{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/404.html","path":"404.html","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/googlec93373d7ad2555cc.html","path":"googlec93373d7ad2555cc.html","modified":0,"renderable":0},{"_id":"source/img/NodeJS安装完成.png","path":"img/NodeJS安装完成.png","modified":0,"renderable":0},{"_id":"source/img/github目录.png","path":"img/github目录.png","modified":0,"renderable":0},{"_id":"source/img/hexo安装目录.png","path":"img/hexo安装目录.png","modified":0,"renderable":0},{"_id":"source/img/jacman主题安装目录.png","path":"img/jacman主题安装目录.png","modified":0,"renderable":0},{"_id":"source/img/jooq-flyway.png","path":"img/jooq-flyway.png","modified":0,"renderable":0},{"_id":"source/img/npm配置信息.png","path":"img/npm配置信息.png","modified":0,"renderable":0},{"_id":"source/img/photos在redis的数据结构示例.png","path":"img/photos在redis的数据结构示例.png","modified":0,"renderable":0},{"_id":"source/img/代码段.png","path":"img/代码段.png","modified":0,"renderable":0},{"_id":"source/img/计算机软硬件配置.png","path":"img/计算机软硬件配置.png","modified":0,"renderable":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"179044808f272d4486453e93a9cb08a05b0c88c7","modified":1458482174000},{"_id":"source/README.md","hash":"92e2452cef1013621156f38bfeb8b708d8ea3789","modified":1458530933318},{"_id":"source/googlec93373d7ad2555cc.html","hash":"b3bab842fde1d080655eccf559915b23944e68d2","modified":1459401255849},{"_id":"themes/jacman/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1458363149340},{"_id":"themes/jacman/LICENSE","hash":"d8780b41bab4b87bdd21eca444cae11af72617f4","modified":1458363149340},{"_id":"themes/jacman/README.md","hash":"b68683508c920456e2b3baf3cb160d358b85ab47","modified":1458363149341},{"_id":"themes/jacman/README_zh.md","hash":"9c818b2c1f8c216c439be6bc574469d1dc338c12","modified":1458363149362},{"_id":"themes/jacman/_config.yml","hash":"c56f68691140e7e6d7692a081304909445bbe534","modified":1459403198829},{"_id":"source/_posts/A-successful-redis-tuning-record.md","hash":"cbb230f61a225f385f419d28578cf4d776725db2","modified":1459594274650},{"_id":"source/_posts/JOOQ-from-entry-to-improve.md","hash":"07c10bb4ec021cc4893d098c98c97b014ab56651","modified":1459501857402},{"_id":"source/_posts/Remember-a-reverse-proxy-configuration-process-for-nginx-and-Tomcat-in-the-docker-environment.md","hash":"433275665e5e6dd0fc3062574e32c9bee024277d","modified":1460110693630},{"_id":"source/_posts/SQL-improve-elegant-use-join-query.md","hash":"5cc1d17eb5fa26e9c1f00d962399f6288f4f2ed0","modified":1459396302629},{"_id":"source/_posts/a-new-start.md","hash":"ad27398678b7599974207262ff9fe5e26b3dcf93","modified":1459146932547},{"_id":"source/about/index.md","hash":"7d9c27d70f898ab72be9d2f11d1c9358c035ef17","modified":1459398796963},{"_id":"source/img/NodeJS安装完成.png","hash":"1f630613e2f0b5223717df4e2985cc565a743649","modified":1458621733295},{"_id":"source/img/github目录.png","hash":"4561e6ea5be731ad908566b7d12f41c6390ced8d","modified":1459136989655},{"_id":"source/img/hexo安装目录.png","hash":"886a417f75050c6c55185d569b18086dc443b5cf","modified":1459137291484},{"_id":"source/img/jacman主题安装目录.png","hash":"2b4e79309f308e0425a42cb14c0e1dd37df3e3c2","modified":1459137376492},{"_id":"source/img/jooq-flyway.png","hash":"4961ef4e24db50b592e41dd5313dbc60dc51c701","modified":1459420682147},{"_id":"source/img/npm配置信息.png","hash":"23415dacd781f9352099a4d12bb81523131cb4d7","modified":1458621806392},{"_id":"source/img/photos在redis的数据结构示例.png","hash":"08c30f9331a911384fea743397877fed7d69a8c8","modified":1459227128550},{"_id":"source/img/代码段.png","hash":"d2ddd6f72646d061518e4920dcba9290cc116f2c","modified":1459139733386},{"_id":"source/img/计算机软硬件配置.png","hash":"ebeb7c730c73eee2939170e49ba2413cb7cadcaf","modified":1458621706113},{"_id":"source/index/index.md","hash":"d51582b64539ef078c1593e79bb8ff7916daaec7","modified":1459400711942},{"_id":"themes/jacman/languages/default.yml","hash":"966be0b585cd3e3b7f0e485c896c24dfdfee423a","modified":1458363149363},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"fc1539cd52b12e0594c929cb6cb22b33bb2571de","modified":1458525492869},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"0e7912c6505592a10efe2db1c994ccc3ebf91239","modified":1458363149364},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1458363149378},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1458363149378},{"_id":"themes/jacman/layout/index.ejs","hash":"b832b280ec0a2b741e73a2300f219f0075c99278","modified":1458363149378},{"_id":"themes/jacman/layout/layout.ejs","hash":"a9f5df51038823a3b7da248b1be592336fd453d9","modified":1458720255702},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1458363149380},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1458363149380},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1458363149380},{"_id":"themes/jacman/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1458363149381},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"f0772c9de0431384d4e852358ee425a1cdf3ea6d","modified":1458363149365},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"90502fc2f5b0a5681a6c6588a9ed6ad297e32890","modified":1458363149365},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"ebaec2ae044ada08825d8e8af9614821f779d3dd","modified":1458363149365},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"00c00b4a961ac1f7bc8ee688ce134fe0c454edc6","modified":1458363149366},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"2c1f1edfeaebaafe4265d58e0b8110e71673da40","modified":1458363149366},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"2b77ff6cbc8571cab27c3bdc4ad51a79510bbca2","modified":1458363149367},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"210bb4c1ec77d998dfd93baeb4e3a0b46a925cd1","modified":1458363149367},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"8e235d41d90ab0aeaa5ca5d6067b0631d5164b55","modified":1458526599061},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"755a5d3f7642a25864bcb5e4c334462abeb4c865","modified":1459402068668},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"5636df1f2b6a8d02986d866e3824ec60430046e6","modified":1458363149368},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1458363149368},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"732fcd909f6dac557629206dc7e93a7083cda084","modified":1458363149372},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"846d96ff73409b9a8b34f3cab691821096c03e1d","modified":1458363149372},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1458363149373},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"67a55a4d94cca2db11a2636f1f2c92c208688b14","modified":1458363149373},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"224d078ba1f2c33c52d5e867af71c5fe9f1bdf45","modified":1458363149374},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1458363149374},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"2c1b9ac7666d7d5b9aaf8f33588e10451c4b7841","modified":1458363149375},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"6dcb532d02325d2a9f5fb92831401552a5540aa8","modified":1458363149375},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"c8a6fdb883be27f5e7daef6fa8899c17f51548a0","modified":1458363149376},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"bd73be669ddc47e1daab38736d1cecc3f37662e2","modified":1458363149376},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1458363149377},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"43b1c29fea51f849ec0bf85a6d91fe0507f01503","modified":1458363149377},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1458363149377},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"ff7db098608ba48752964cc67a51a04965ea927e","modified":1458363149378},{"_id":"themes/jacman/source/css/style.styl","hash":"4610c477560086880acc1ba71c3a72e7c89ecdb7","modified":1458363149389},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458363149389},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458363149390},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458363149390},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458363149391},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458363149391},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458363149392},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1458363149395},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1458363149396},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1458363149396},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1458363149398},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1458363149398},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1458363149401},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1458363149401},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1458363149402},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1458363149406},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1458363149407},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1458363149409},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1458363149409},{"_id":"themes/jacman/source/img/author.jpg","hash":"2f5ca45b01b705cfde874a644ea9b4a635ccd6c0","modified":1458382170998},{"_id":"themes/jacman/source/img/bg.jpg","hash":"5b961c607cc66ce1bf8b0c82399c7505e82f995e","modified":1458547201438},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1458363149412},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1458363149413},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1458363149414},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1458363149414},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1458363149415},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1458363149415},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1458363149416},{"_id":"themes/jacman/source/img/favicon.ico","hash":"48d909a3f0cda656828bbf390962dc8259bcd037","modified":1458528691318},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"fe5bde8e71aa73d8ba8e0804f004bbd59d547d91","modified":1458528747884},{"_id":"themes/jacman/source/img/logo.svg","hash":"7e488fb59dec5a3a9135a6373b5e10628acae86d","modified":1458528921648},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1458363149418},{"_id":"themes/jacman/source/js/gallery.js","hash":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1458363149418},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"28ef4346743a60c896a9ae492a544c0854904350","modified":1458363149420},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"5f690e8588c8493eb9406aa68fbf1765aaff9476","modified":1458363149420},{"_id":"themes/jacman/source/js/totop.js","hash":"48648ec9c86e9ab491831e5a029e6f8864934149","modified":1458363149421},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1458363149400},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1458363149405},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1458363149408},{"_id":"themes/jacman/source/img/logo.png","hash":"34dad41730945a88b7f4e991487577ad65e69aac","modified":1458528798202},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"cd981db035ec1b6f502fca78fd394c5bd438aba1","modified":1458363149419},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"20349dcde9942885d5eae1c302ef26b1b8484f3f","modified":1458363149369},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"c01220f0af629f9e23bf125bdc1beef8afc206ef","modified":1458363149369},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"9db7847461cf8b10a9cd5434deb690c6b26af6f1","modified":1458363149370},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"5b9f5ee6a2cc8bd557550bbdc1a03d237681114e","modified":1458363149370},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1458363149370},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"9433207c1d0e8e02856d271aa333a9849ce5283f","modified":1458525426637},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"12b7360326691ebf06bea5d7ee4d54c41f64e2ec","modified":1458363149371},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"091512e19cfcf5bde2a699b211f99874f26587ad","modified":1458363149372},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"5699c270be7b28c5b2c36f453317ccd42789fd3d","modified":1458363149382},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"bd5c1fddfce68971e0e0e2edcae1f46ea883fe65","modified":1458547134526},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"e9c8fd7d3dca4ce12740eb10a11df346d2a665d0","modified":1458548839344},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"6a283a0e04e17404fcebe6df96646531033eabfa","modified":1459403392067},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"0300d7d289eceb3933c1eebf38f8d10f425c1128","modified":1458363149386},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1458363149386},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"728990221be07abafd841b4f5d63f063f25e1c49","modified":1459402824519},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"4746783dc7993ac45d8a0e7a9d347bfe137111fe","modified":1458363149385},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"75843d727319b1d07ad4b8c2e969036ce0d4f362","modified":1458363149387},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"3ca7266a44240093143d0c55c74bb6daf579e298","modified":1458363149388},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"ce0781354fa8728103226b033627f54dc4bc177d","modified":1458547258171},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"b48360e757d501027b7dbe093859d03795476930","modified":1458363149388},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458363149392},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1458363149393},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1458363149393},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1458363149394},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1458363149394},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1458363149395},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1458363149404},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1458363149412},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"2aee0cdb80fce512cde66ad229b9e5ee42c0d7b4","modified":1458363149382},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"d280f9ab32d7bf177adb5f7c858444cbfbac651a","modified":1458363149383},{"_id":"themes/jacman/.git.rar","hash":"a926f58656ae32f750eb3fda70459d1017baf09a","modified":1459503654146},{"_id":"public/baidusitemap.xml","hash":"c5be4fc225ccc7c2006a4faeb5345fa6cf7d172e","modified":1460110714497},{"_id":"public/sitemap.xml","hash":"ee36e1940c3de453cd8281794a7dcd5b2645872a","modified":1460110714805},{"_id":"public/atom.xml","hash":"1aff8c28e99d583530d685f9c2dbc8d16fe22aac","modified":1460110714807},{"_id":"public/about/index.html","hash":"f5e6d432fdebc360df8599a3f50e034c0e8d98db","modified":1460110714824},{"_id":"public/index/index.html","hash":"acc947a14cca8f10a794e6316969d8d454cc0ed9","modified":1460110714824},{"_id":"public/archives/index.html","hash":"a030b5bb26914a5e8cfcf514f1785860506160a9","modified":1460110714825},{"_id":"public/archives/2016/index.html","hash":"ae0d3abea590c819e25223f747ec323cf5de81e6","modified":1460110714825},{"_id":"public/archives/2016/03/index.html","hash":"0686de2c6e4d2b94b9ef1f444e3f62aaff3b2823","modified":1460110714825},{"_id":"public/archives/2016/04/index.html","hash":"9d490c1d85a63ad7c513c72da536f13a0f5c1965","modified":1460110714825},{"_id":"public/categories/Record/index.html","hash":"594a8adfcd95a99ad60eb4a3b475c9977247e657","modified":1460110714825},{"_id":"public/categories/Learning/index.html","hash":"b37ce954ee0ee9d7459ba97e13daf1e1277a2fe4","modified":1460110714825},{"_id":"public/categories/Tutorial/index.html","hash":"7d0d05439e2d156f7ac3d5679b2c0d991cc08a1b","modified":1460110714825},{"_id":"public/index.html","hash":"64ba5879c99c7f96bc9979fed3720c15f91201ba","modified":1460110714825},{"_id":"public/tags/Nginx/index.html","hash":"6446e6795cbe5859cd233366f2b3623fcfa3c12f","modified":1460110714825},{"_id":"public/tags/Tomcat/index.html","hash":"a4c2a5f780560150b6ec2a68f5ba11a613098e8b","modified":1460110714825},{"_id":"public/tags/Docker/index.html","hash":"09b8abf16a190b767a14059b82f4ff269b2653ea","modified":1460110714825},{"_id":"public/tags/SSL/index.html","hash":"4c43471e42954cebb08cb366338a9fde93645dbe","modified":1460110714825},{"_id":"public/tags/Load-balance/index.html","hash":"fa69e06a09aa360f84e77ebbae3a340f5e6b10ce","modified":1460110714826},{"_id":"public/tags/Tech/index.html","hash":"7e055c1a2df42a35a4979cf5c184de228f927763","modified":1460110714826},{"_id":"public/tags/SQL/index.html","hash":"b1728ed64f9cbdd89d9c831b47a3047cd180f866","modified":1460110714826},{"_id":"public/tags/Elegant/index.html","hash":"74d1144f673a66cd85376e2cb2e5a63e12a08c63","modified":1460110714826},{"_id":"public/tags/JOOQ/index.html","hash":"55bbd12f1bcda50f6c234c941252039156b78505","modified":1460110714826},{"_id":"public/tags/ARM/index.html","hash":"a71a386dbe959770d032052b337b35d05cd25c29","modified":1460110714826},{"_id":"public/tags/ORM/index.html","hash":"df9ea3cc81927a80a7c23e1e07df6474deb823bf","modified":1460110714827},{"_id":"public/tags/GitHub/index.html","hash":"f02e5282bf868c997cc84ff443f46fa2b51c7c93","modified":1460110714827},{"_id":"public/tags/Hexo/index.html","hash":"372f19f2c0826941e4d21cc742b1b9f5fd44ff82","modified":1460110714827},{"_id":"public/tags/Jacman/index.html","hash":"d67390abf0f650f809e345446efeacea10b1cffa","modified":1460110714827},{"_id":"public/tags/Markdown/index.html","hash":"ecac6049d7ff585aa96d1cbe936358b99909ef92","modified":1460110714827},{"_id":"public/tags/Redis/index.html","hash":"414881633981643ac4f6ff4947e8c8c80e57fab9","modified":1460110714827},{"_id":"public/tags/Hash/index.html","hash":"33d875f58c93b793c8de5138d2b642cabf7938f2","modified":1460110714827},{"_id":"public/tags/Sharding/index.html","hash":"d37a94e880fb0e7f7a56e930e7d189b77e11a304","modified":1460110714827},{"_id":"public/tags/Twemproxy/index.html","hash":"273e21f366c9fb7aef8d1a9f7ba7f6a5e5edc146","modified":1460110714827},{"_id":"public/post/2016/04/Remember-a-reverse-proxy-configuration-process-for-nginx-and-Tomcat-in-the-docker-environment/index.html","hash":"b9dcc7fe4ff5c0defc9f44fd5992b91a81fa819d","modified":1460110714827},{"_id":"public/post/2016/04/JOOQ-from-entry-to-improve/index.html","hash":"f757e3b29539657fabd753f830fe4076e267ce85","modified":1460110714827},{"_id":"public/post/2016/04/a-new-start/index.html","hash":"a676327082e03529a009d4cb3b07cc34abdfe628","modified":1460110714828},{"_id":"public/post/2016/03/A-successful-redis-tuning-record/index.html","hash":"e7373cc7145dfff0afc58e1cf9de07b5c7ef717e","modified":1460110714828},{"_id":"public/post/2016/03/SQL-improve-elegant-use-join-query/index.html","hash":"f25622cf3d37077d56970b9ec139d6f28dfac6d6","modified":1460110714828},{"_id":"public/README.md","hash":"92e2452cef1013621156f38bfeb8b708d8ea3789","modified":1460110714856},{"_id":"public/404.html","hash":"179044808f272d4486453e93a9cb08a05b0c88c7","modified":1460110714856},{"_id":"public/googlec93373d7ad2555cc.html","hash":"b3bab842fde1d080655eccf559915b23944e68d2","modified":1460110714856},{"_id":"public/img/NodeJS安装完成.png","hash":"1f630613e2f0b5223717df4e2985cc565a743649","modified":1460110714857},{"_id":"public/img/github目录.png","hash":"4561e6ea5be731ad908566b7d12f41c6390ced8d","modified":1460110714857},{"_id":"public/img/jacman主题安装目录.png","hash":"2b4e79309f308e0425a42cb14c0e1dd37df3e3c2","modified":1460110714857},{"_id":"public/img/jooq-flyway.png","hash":"4961ef4e24db50b592e41dd5313dbc60dc51c701","modified":1460110714857},{"_id":"public/img/hexo安装目录.png","hash":"886a417f75050c6c55185d569b18086dc443b5cf","modified":1460110714857},{"_id":"public/img/photos在redis的数据结构示例.png","hash":"08c30f9331a911384fea743397877fed7d69a8c8","modified":1460110714857},{"_id":"public/img/npm配置信息.png","hash":"23415dacd781f9352099a4d12bb81523131cb4d7","modified":1460110714857},{"_id":"public/img/代码段.png","hash":"d2ddd6f72646d061518e4920dcba9290cc116f2c","modified":1460110714857},{"_id":"public/img/计算机软硬件配置.png","hash":"ebeb7c730c73eee2939170e49ba2413cb7cadcaf","modified":1460110714857},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1460110714858},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1460110714858},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1460110714858},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1460110714858},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1460110714858},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1460110714858},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1460110714858},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1460110714858},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1460110714858},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1460110714858},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1460110714858},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1460110714858},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1460110714858},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1460110714858},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1460110714859},{"_id":"public/img/author.jpg","hash":"2f5ca45b01b705cfde874a644ea9b4a635ccd6c0","modified":1460110714859},{"_id":"public/img/bg.jpg","hash":"5b961c607cc66ce1bf8b0c82399c7505e82f995e","modified":1460110714859},{"_id":"public/img/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1460110714859},{"_id":"public/img/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1460110714859},{"_id":"public/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1460110714859},{"_id":"public/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1460110714859},{"_id":"public/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1460110714859},{"_id":"public/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1460110714860},{"_id":"public/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1460110714860},{"_id":"public/img/favicon.ico","hash":"48d909a3f0cda656828bbf390962dc8259bcd037","modified":1460110714860},{"_id":"public/img/jacman.jpg","hash":"fe5bde8e71aa73d8ba8e0804f004bbd59d547d91","modified":1460110714860},{"_id":"public/img/logo.svg","hash":"7e488fb59dec5a3a9135a6373b5e10628acae86d","modified":1460110714860},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1460110714860},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1460110714860},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1460110715585},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1460110715587},{"_id":"public/font/fontdiao.svg","hash":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1460110715588},{"_id":"public/img/logo.png","hash":"34dad41730945a88b7f4e991487577ad65e69aac","modified":1460110715588},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1460110715593},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1460110715593},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1460110715593},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1460110715593},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1460110715593},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1460110715593},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1460110715593},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1460110715593},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1460110715593},{"_id":"public/css/style.css","hash":"bae01d187c61819baa2c818345ba17192aa95752","modified":1460110715593},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1460110715593},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1460110715593},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1460110715593},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1460110715593},{"_id":"public/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1460110715594},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1460110715594}],"Category":[{"name":"Record","_id":"cimrk7x990004acnnfqumxjii"},{"name":"Learning","_id":"cimrk7x9g0009acnnbj2ijtzq"},{"name":"Tutorial","_id":"cimrk7x9l000facnnm1y5jhup"}],"Data":[],"Page":[{"title":"关于我","date":"2016-04-01T09:38:14.451Z","_content":"## A resume.","source":"about/index.md","raw":"---\ntitle: '关于我'\ndate: 2016年3月21日16:59:51\n---\n## A resume.","updated":"2016-03-31T04:33:16.963Z","path":"about/index.html","comments":1,"layout":"page","_id":"cimrk7x930001acnnvuig94xv","content":"<h2 id=\"A-resume\"><a href=\"#A-resume\" class=\"headerlink\" title=\"A resume.\"></a>A resume.</h2>","excerpt":"","more":"<h2 id=\"A-resume\"><a href=\"#A-resume\" class=\"headerlink\" title=\"A resume.\"></a>A resume.</h2>"},{"title":"个人常用资源汇总","date":"2016-04-01T09:38:14.460Z","_content":"## 软件\n\n## 学习资源","source":"index/index.md","raw":"---\ntitle: '个人常用资源汇总'\ndate: 2016年3月31日13:01:55\n---\n## 软件\n\n## 学习资源","updated":"2016-03-31T05:05:11.942Z","path":"index/index.html","comments":1,"layout":"page","_id":"cimrk7xal001jacnnutcic195","content":"<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2>","excerpt":"","more":"<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2>"}],"Post":[{"title":"Nginx与Tomcat 8在Docker环境的反向代理配置过程","date":"2016-04-08T06:49:32.000Z","description":"全程记录在Docker环境下，Nginx与Tomcat的反向代理与负载均衡配置。","_content":"# 需要做什么？\n最近接到的任务是:在Docker环境下，Nginx与Tomcat的反向代理与负载均衡配置。先拿出可行性方案，以便在业务量突发时，在线上环境实施。典型的技术预研，打有准备仗。同时还提出了安全需求，在配置上，需要有安全加固。\n\n在Nginx配置时，针对不同的使用环境，配置的参数有很多不同。迫在眉睫的，我们需要先对线上的API服务系统进行反向代理与负载均衡配置。API服务系统是面向手机APP的接口系统，使用HTTP Restful+json进行数据通讯。\n\n我们在局域网环境下，有2台机器在软硬件配置方面，与线上的API服务系统类似。这2台机器的局域网IP分别是：192.168.1.158(简称为：158机器)、192.168.1.188(简称为：188机器)。由于188机器正在做压力测试，而且近期需要持续的对所有接口进行压力测试，没有办法空闲出来做实验。所以在实验之初我使用了158机器的普通账号进行，很快就因为权限不足，遭遇了很多莫名其妙的问题，而且158的使用量比较多，主要作为功能测试的机器。\n\n随后与PM沟通，延后了188机器的压力测试计划，拿到了权限比较高的账号，但还不是root账户。下面会说到如何在普通账户下，使用root账户执行shell命令。\n\n# Docker with Tomcat\n为了模拟线上真实环境，我们在188机器上搭建了docker环境。docker是借助Linux container(简称LXC)技术的轻量级可移植运行时环境，这意味着在docker中完成的软件运行时环境搭建后，可以移植到任意一台支持docker运行的机器上，功能上不会有任何的丢失。这有点像Java开发中的JVM，都是解决在不同环境下软件运行的问题。docker更多的提供了资源共享和资源隔离的机制，容器之间本身是隔离互不干扰的，但提供配置允许不同容器之间交换数据，开放对外端口；同时可以限制某个容器对宿主机的资源占用，如cpu、内存、io等等。\n\n为了方便，低成本，我们使用docker hub上的tomcat镜像：tomcat:8-jre8。在后续的实验中，我们需要2个tomcat作为后端应用服务器来处理实际的HTTP请求。\n```\nFROM tomcat:8-jre8\n\nRUN mkdir /root/downloadAppBase\n```\n# Nginx VS Tengine\n在技术选项时，我们遇到Nginx以及衍生产品Tengine。Nginx是俄罗斯人编写的一款轻量级的Web 服务器/反向代理服务器，它还具备邮件服务器的功能。我们在[Nginx官网](http://nginx.org/en/download.html)上查询发布日志，发现更新的比较频繁。仅在2016年前4月，就出现了2个比较大的版本：1.8.*、1.9.14。Tengine是由淘宝在官方nginx基础之上进行改进的版本，做了很多功能增强，最后一次的版本发布是：2015-12-31：Tengine-2.1.2,此版本仅兼容官方Nginx的1.6.2版本，该版本发布于：2014年9月16日。这也太久了，可能会错过很多官方更新。\n\n# 安装与配置\n```\n准备工作\ncd /home/www/\nmkdir nginx\ncd nginx/\nmkdir nginx\nmkdir zlib\nmkdir openssl\nmkdir pcre\n\nsudo apt-get update\n\n如果没有安装gcc/gcc-c++，请执行：sudo apt-get install build-essential\n如果没有安装make，请执行：sudo apt-get install make\n\nStep 1：编译安装Pcre包 (rewrite模块需要 pcre 库)\n1.软件位于/software/pcre-8.38.tar.gz\n2.拷贝软件到目标机器\"/home/www/nginx/pcre/\"目录\n3.顺序执行以下脚本\n\ncd /home/www/nginx/pcre/\ntar -xzvf pcre-8.38.tar.gz\ncd pcre-8.38/\n./configure\nsudo make\n#有可能需要输入密码\nsudo make install\n\n\n\nStep 2：编译安装Zlib (gzip模块需要 zlib 库)\n1.软件位于/software/zlib-1.2.8.tar.gz\n2.拷贝软件到目标机器\"/home/www/nginx/zlib/\"目录\n3.顺序执行以下脚本\n\ncd /home/www/nginx/zlib/\ntar -xzvf zlib-1.2.8.tar.gz\ncd zlib-1.2.8/\n./configure\nsudo make\n#有可能需要输入密码\nsudo make install\n\nStep 2：编译安装OpenSSL (ssl 功能需要openssl库)\n1.软件位于/software/openssl-1.1.0-pre4.tar.gz\n2.拷贝软件到目标机器\"/home/www/nginx/openssl/\"目录\n3.顺序执行以下脚本\n\ncd /home/www/nginx/openssl/\ntar -xzvf openssl-1.1.0-pre4.tar.gz\ncd openssl-1.1.0-pre4/\n./config\nsudo make\n#命令执行时间超过5分钟，耐心等待\nsudo make install\n#命令执行时间超过5分钟，耐心等待\n\nStep 3：编译安装Nginx\n1.软件位于/software/nginx-1.9.14.tar.gz\n2.拷贝软件到目标机器\"/home/www/nginx/nginx/\"目录\n3.顺序执行以下脚本\n\ncd /home/www/nginx/nginx/\ntar -xzvf nginx-1.9.14.tar.gz\ncd nginx-1.9.14/\n\nsed -i -e 's/1.9.14//g' -e 's/nginx\\//ERROR/g' -e 's/\"NGINX\"/\"ERROR\"/g' src/core/nginx.h\n\n./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-8.38 --with-openssl=/home/www/nginx/openssl/openssl-1.1.0-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-1.2.8\n\nsudo make\n#命令执行时间超过5分钟，耐心等待\nsudo make install\n\nStep 4：安装补丁(对应用服务器进行监控)\ncd /home/www/nginx/nginx/\nmkdir patch\n补丁文件位于/software/patch目录，拷贝目录下的所有文件到：/home/www/nginx/nginx/patch/\ncd /home/www/nginx/nginx/nginx-1.9.14/src/\npatch -p1 < /home/www/nginx/nginx/patch/nginx_upstream_check_module-master/check_1.9.2+.patch\ncd ..\n./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-8.38 --with-openssl=/home/www/nginx/openssl/openssl-1.1.0-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-1.2.8 --add-module=/home/www/nginx/nginx/patch/nginx_upstream_check_module-master/\nsudo make\n#命令执行时间超过5分钟，耐心等待\nsudo make install\ncd /home/www/nginx/nginx/sbin/\nsudo rm -f nginx.old\n\nStep 5：配置\n配置文件位于：conf/nginx.conf\n将该文件拷贝到：/home/www/nginx/nginx/conf/目录下，遇到文件已存在时，直接覆盖。\n\n确保可以访问到后端tomcat开放的端口，telnet\n修改配置文件nginx.conf,“upstream  xws”改为实际的tomcat运行环境\n\ncd /home/www/nginx/nginx/\nmkdir ssl\ncd ssl\nSSL证书文件位于：ssl/www.abcde.com.crt，ssl/www.abcde.com.key\n将这2个文件拷贝到/home/www/nginx/nginx/ssl/目录下\n\nStep 6：运行\n确保系统的80、443端口处于空闲状态。netstat\n确保/home/www/nginx/nginx/logs/目录具备读写权限。\n确保/home/www/nginx/nginx/ssl/www.abcde.com.crt具备读权限。\n确保/home/www/nginx/nginx/ssl/www.abcde.com.key具备读权限。\n确保/home/www/nginx/nginx/sbin/nginx文件具备可执行权限。\n\ncd /home/www/nginx/nginx/sbin/\nsudo ./nginx\n\nStep 7：验证\n1.pcre包安装的正确性\n\ncd /home/www/nginx/pcre/\n./pcre-config --version\n有版本号输出则安装成功。\n\n2.openssl包安装的正确性\ncd /home/www/nginx/openssl/openssl-1.1.0-pre4/\nopenssl version –a\n有版本号输出则安装成功。\n\n3.nginx包安装的正确性\ncd /home/www/nginx/nginx/nginx-1.9.14/objs\n./nginx -V\n##也可以使用：./nginx -t\n有配置详情输出则安装成功。\n\n卸载\n1.停止nginx的运行\ncd /home/www/nginx/nginx/sbin/\nsudo ./nginx -s stop\n\n2.删除文件\ncd /home/www/\nrm -rf nginx\n\n\n监控\n进入到与nginx部署机器的局域网络\n浏览器访问：http://nginx主机的局域网ip/nginxStatus/\n```\n\n贴出nginx.cof\n\n```\n#你所看到的这个文件，是nginx的工作配置文件，不要轻易改动。\n\nworker_processes  4;\nerror_log  logs/error.log;\npid        logs/nginx.pid;\nworker_rlimit_nofile 65535;\n\nevents {\n    use epoll;\n    worker_connections  65535;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    server_tokens off;\n    tcp_nopush on;\n    tcp_nodelay on;\n    client_body_timeout   10;\n    client_header_timeout  30;\n    keepalive_timeout     30  30;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    sendfile on;\n    send_timeout 10;\n    client_body_buffer_size  64K;\n    client_header_buffer_size  128k;\n    client_max_body_size  10m;\n    large_client_header_buffers  4  128k;\n\n  # gzip压缩功能设置\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers    4 16k;\n    gzip_http_version 1.0;\n    gzip_comp_level 6;\n    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n    gzip_vary on;\n\n    #设置单个IP在每秒请求数不能超过20次\n    limit_req_zone $binary_remote_addr zone=one:20m rate=20r/s;\n\n    #设置单个IP同时连接数\n    limit_conn_zone $binary_remote_addr zone=addr:20m;\n\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n  # 设定负载均衡方式：RR模式\n    upstream  xws  {\n        server 127.0.0.1:6080 weight=1 max_fails=5 fail_timeout=10s ;\n        server 127.0.0.1:7080 weight=1 max_fails=5 fail_timeout=10s ;\n        check interval=3000 rise=2 fall=5 timeout=1000 type=http;\n    }\n\n  # 虚拟主机配置\n    server {\n        listen 80 default_server;\n        #root   /apps/oaapp;\n\n        listen 443 ssl default_server;\n        server_name www.abcde.com;\n        ssl_certificate  /home/www/nginx/nginx/ssl/yourCAcrt.crt;\n        ssl_certificate_key  /home/www/nginx/nginx/ssl/yourCAkey.key;\n        ssl_session_timeout  10m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers \"ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4\";\n        ssl_prefer_server_ciphers on;\n\n        charset utf-8;\n        access_log  logs/xws.access.log  main;\n\n        if ($request_method !~ ^(GET|HEAD|POST)$) {\n            return 404;\n        }\n\n        #对所有URL做负载均衡+反向代理\n        location / {\n            #root   /apps/oaapp;\n            #index  index.jsp index.html index.htm;\n            proxy_pass http://xws;\n            proxy_redirect off;\n            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header  Host  $host;\n            proxy_set_header  X-Real-IP  $remote_addr;\n            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n\n            limit_conn addr 2;\n            limit_req zone=one burst=5 nodelay;\n        }\n\n        #静态文件，nginx自己处理，不去backend请求tomcat\n        #location  ~* /download/ {\n        #    root /apps/oa/fs;\n\n        #}\n\n        #location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$\n        #{\n        #    root /apps/oaapp;\n        #    expires      7d;\n        #}\n\n        # 为内网IP开放nginx状态监控\n        location /nginxStatus {\n            stub_status on;\n            access_log off;\n            allow 192.168.1.0/24;\n            deny all;\n        }\n\n        location ~ ^/(WEB-INF)/ {\n            deny all;\n        }\n        #error_page 404              /404.html;\n        error_page 500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n}\n```\n\n# 踩到的一些坑\n\n## 400 \\x16\\x03\n同一个server节点，配置：\n```\nlisten 80 default_server;\nlisten 443 ssl default_server;\n```\n## 调试Https\n如果CA证书签发的域名是：www.abcde.com，为了在线下调试，假设将nginx部署在局域网IP：192.168.1.188，我们可以将本机的hosts文件修改一下，文件位于：C:\\Windows\\System32\\drivers\\etc\\hosts。加上一行记录：“192.168.1.188 www.abcde.com”，保存后退出。再到本机的cmd命令行输入：ipconfig flushdns，退出cmd。等待几分钟后，在浏览器输入：https://www.abcde.com，即可在局域网调试啦！\n## ssl_protocols\n如果nginx.conf在定义ssl_protocols时，用了一些比较过时的协议，比如：SSLV3，则会被chrome提示连接不安全。可以参考我的nginx.conf配置，事实上这些过时的协议都有一些可以被利用的漏洞，建议不要使用了。","source":"_posts/Remember-a-reverse-proxy-configuration-process-for-nginx-and-Tomcat-in-the-docker-environment.md","raw":"---\ntitle: Nginx与Tomcat 8在Docker环境的反向代理配置过程\ndate: 2016-04-08 14:49:32\ntags:\n    - Nginx\n    - Tomcat\n    - Docker\n    - SSL\n    - Load balance\ncategories:\n    - Record\ndescription: 全程记录在Docker环境下，Nginx与Tomcat的反向代理与负载均衡配置。\n---\n# 需要做什么？\n最近接到的任务是:在Docker环境下，Nginx与Tomcat的反向代理与负载均衡配置。先拿出可行性方案，以便在业务量突发时，在线上环境实施。典型的技术预研，打有准备仗。同时还提出了安全需求，在配置上，需要有安全加固。\n\n在Nginx配置时，针对不同的使用环境，配置的参数有很多不同。迫在眉睫的，我们需要先对线上的API服务系统进行反向代理与负载均衡配置。API服务系统是面向手机APP的接口系统，使用HTTP Restful+json进行数据通讯。\n\n我们在局域网环境下，有2台机器在软硬件配置方面，与线上的API服务系统类似。这2台机器的局域网IP分别是：192.168.1.158(简称为：158机器)、192.168.1.188(简称为：188机器)。由于188机器正在做压力测试，而且近期需要持续的对所有接口进行压力测试，没有办法空闲出来做实验。所以在实验之初我使用了158机器的普通账号进行，很快就因为权限不足，遭遇了很多莫名其妙的问题，而且158的使用量比较多，主要作为功能测试的机器。\n\n随后与PM沟通，延后了188机器的压力测试计划，拿到了权限比较高的账号，但还不是root账户。下面会说到如何在普通账户下，使用root账户执行shell命令。\n\n# Docker with Tomcat\n为了模拟线上真实环境，我们在188机器上搭建了docker环境。docker是借助Linux container(简称LXC)技术的轻量级可移植运行时环境，这意味着在docker中完成的软件运行时环境搭建后，可以移植到任意一台支持docker运行的机器上，功能上不会有任何的丢失。这有点像Java开发中的JVM，都是解决在不同环境下软件运行的问题。docker更多的提供了资源共享和资源隔离的机制，容器之间本身是隔离互不干扰的，但提供配置允许不同容器之间交换数据，开放对外端口；同时可以限制某个容器对宿主机的资源占用，如cpu、内存、io等等。\n\n为了方便，低成本，我们使用docker hub上的tomcat镜像：tomcat:8-jre8。在后续的实验中，我们需要2个tomcat作为后端应用服务器来处理实际的HTTP请求。\n```\nFROM tomcat:8-jre8\n\nRUN mkdir /root/downloadAppBase\n```\n# Nginx VS Tengine\n在技术选项时，我们遇到Nginx以及衍生产品Tengine。Nginx是俄罗斯人编写的一款轻量级的Web 服务器/反向代理服务器，它还具备邮件服务器的功能。我们在[Nginx官网](http://nginx.org/en/download.html)上查询发布日志，发现更新的比较频繁。仅在2016年前4月，就出现了2个比较大的版本：1.8.*、1.9.14。Tengine是由淘宝在官方nginx基础之上进行改进的版本，做了很多功能增强，最后一次的版本发布是：2015-12-31：Tengine-2.1.2,此版本仅兼容官方Nginx的1.6.2版本，该版本发布于：2014年9月16日。这也太久了，可能会错过很多官方更新。\n\n# 安装与配置\n```\n准备工作\ncd /home/www/\nmkdir nginx\ncd nginx/\nmkdir nginx\nmkdir zlib\nmkdir openssl\nmkdir pcre\n\nsudo apt-get update\n\n如果没有安装gcc/gcc-c++，请执行：sudo apt-get install build-essential\n如果没有安装make，请执行：sudo apt-get install make\n\nStep 1：编译安装Pcre包 (rewrite模块需要 pcre 库)\n1.软件位于/software/pcre-8.38.tar.gz\n2.拷贝软件到目标机器\"/home/www/nginx/pcre/\"目录\n3.顺序执行以下脚本\n\ncd /home/www/nginx/pcre/\ntar -xzvf pcre-8.38.tar.gz\ncd pcre-8.38/\n./configure\nsudo make\n#有可能需要输入密码\nsudo make install\n\n\n\nStep 2：编译安装Zlib (gzip模块需要 zlib 库)\n1.软件位于/software/zlib-1.2.8.tar.gz\n2.拷贝软件到目标机器\"/home/www/nginx/zlib/\"目录\n3.顺序执行以下脚本\n\ncd /home/www/nginx/zlib/\ntar -xzvf zlib-1.2.8.tar.gz\ncd zlib-1.2.8/\n./configure\nsudo make\n#有可能需要输入密码\nsudo make install\n\nStep 2：编译安装OpenSSL (ssl 功能需要openssl库)\n1.软件位于/software/openssl-1.1.0-pre4.tar.gz\n2.拷贝软件到目标机器\"/home/www/nginx/openssl/\"目录\n3.顺序执行以下脚本\n\ncd /home/www/nginx/openssl/\ntar -xzvf openssl-1.1.0-pre4.tar.gz\ncd openssl-1.1.0-pre4/\n./config\nsudo make\n#命令执行时间超过5分钟，耐心等待\nsudo make install\n#命令执行时间超过5分钟，耐心等待\n\nStep 3：编译安装Nginx\n1.软件位于/software/nginx-1.9.14.tar.gz\n2.拷贝软件到目标机器\"/home/www/nginx/nginx/\"目录\n3.顺序执行以下脚本\n\ncd /home/www/nginx/nginx/\ntar -xzvf nginx-1.9.14.tar.gz\ncd nginx-1.9.14/\n\nsed -i -e 's/1.9.14//g' -e 's/nginx\\//ERROR/g' -e 's/\"NGINX\"/\"ERROR\"/g' src/core/nginx.h\n\n./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-8.38 --with-openssl=/home/www/nginx/openssl/openssl-1.1.0-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-1.2.8\n\nsudo make\n#命令执行时间超过5分钟，耐心等待\nsudo make install\n\nStep 4：安装补丁(对应用服务器进行监控)\ncd /home/www/nginx/nginx/\nmkdir patch\n补丁文件位于/software/patch目录，拷贝目录下的所有文件到：/home/www/nginx/nginx/patch/\ncd /home/www/nginx/nginx/nginx-1.9.14/src/\npatch -p1 < /home/www/nginx/nginx/patch/nginx_upstream_check_module-master/check_1.9.2+.patch\ncd ..\n./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-8.38 --with-openssl=/home/www/nginx/openssl/openssl-1.1.0-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-1.2.8 --add-module=/home/www/nginx/nginx/patch/nginx_upstream_check_module-master/\nsudo make\n#命令执行时间超过5分钟，耐心等待\nsudo make install\ncd /home/www/nginx/nginx/sbin/\nsudo rm -f nginx.old\n\nStep 5：配置\n配置文件位于：conf/nginx.conf\n将该文件拷贝到：/home/www/nginx/nginx/conf/目录下，遇到文件已存在时，直接覆盖。\n\n确保可以访问到后端tomcat开放的端口，telnet\n修改配置文件nginx.conf,“upstream  xws”改为实际的tomcat运行环境\n\ncd /home/www/nginx/nginx/\nmkdir ssl\ncd ssl\nSSL证书文件位于：ssl/www.abcde.com.crt，ssl/www.abcde.com.key\n将这2个文件拷贝到/home/www/nginx/nginx/ssl/目录下\n\nStep 6：运行\n确保系统的80、443端口处于空闲状态。netstat\n确保/home/www/nginx/nginx/logs/目录具备读写权限。\n确保/home/www/nginx/nginx/ssl/www.abcde.com.crt具备读权限。\n确保/home/www/nginx/nginx/ssl/www.abcde.com.key具备读权限。\n确保/home/www/nginx/nginx/sbin/nginx文件具备可执行权限。\n\ncd /home/www/nginx/nginx/sbin/\nsudo ./nginx\n\nStep 7：验证\n1.pcre包安装的正确性\n\ncd /home/www/nginx/pcre/\n./pcre-config --version\n有版本号输出则安装成功。\n\n2.openssl包安装的正确性\ncd /home/www/nginx/openssl/openssl-1.1.0-pre4/\nopenssl version –a\n有版本号输出则安装成功。\n\n3.nginx包安装的正确性\ncd /home/www/nginx/nginx/nginx-1.9.14/objs\n./nginx -V\n##也可以使用：./nginx -t\n有配置详情输出则安装成功。\n\n卸载\n1.停止nginx的运行\ncd /home/www/nginx/nginx/sbin/\nsudo ./nginx -s stop\n\n2.删除文件\ncd /home/www/\nrm -rf nginx\n\n\n监控\n进入到与nginx部署机器的局域网络\n浏览器访问：http://nginx主机的局域网ip/nginxStatus/\n```\n\n贴出nginx.cof\n\n```\n#你所看到的这个文件，是nginx的工作配置文件，不要轻易改动。\n\nworker_processes  4;\nerror_log  logs/error.log;\npid        logs/nginx.pid;\nworker_rlimit_nofile 65535;\n\nevents {\n    use epoll;\n    worker_connections  65535;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    server_tokens off;\n    tcp_nopush on;\n    tcp_nodelay on;\n    client_body_timeout   10;\n    client_header_timeout  30;\n    keepalive_timeout     30  30;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    sendfile on;\n    send_timeout 10;\n    client_body_buffer_size  64K;\n    client_header_buffer_size  128k;\n    client_max_body_size  10m;\n    large_client_header_buffers  4  128k;\n\n  # gzip压缩功能设置\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers    4 16k;\n    gzip_http_version 1.0;\n    gzip_comp_level 6;\n    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n    gzip_vary on;\n\n    #设置单个IP在每秒请求数不能超过20次\n    limit_req_zone $binary_remote_addr zone=one:20m rate=20r/s;\n\n    #设置单个IP同时连接数\n    limit_conn_zone $binary_remote_addr zone=addr:20m;\n\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n  # 设定负载均衡方式：RR模式\n    upstream  xws  {\n        server 127.0.0.1:6080 weight=1 max_fails=5 fail_timeout=10s ;\n        server 127.0.0.1:7080 weight=1 max_fails=5 fail_timeout=10s ;\n        check interval=3000 rise=2 fall=5 timeout=1000 type=http;\n    }\n\n  # 虚拟主机配置\n    server {\n        listen 80 default_server;\n        #root   /apps/oaapp;\n\n        listen 443 ssl default_server;\n        server_name www.abcde.com;\n        ssl_certificate  /home/www/nginx/nginx/ssl/yourCAcrt.crt;\n        ssl_certificate_key  /home/www/nginx/nginx/ssl/yourCAkey.key;\n        ssl_session_timeout  10m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers \"ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4\";\n        ssl_prefer_server_ciphers on;\n\n        charset utf-8;\n        access_log  logs/xws.access.log  main;\n\n        if ($request_method !~ ^(GET|HEAD|POST)$) {\n            return 404;\n        }\n\n        #对所有URL做负载均衡+反向代理\n        location / {\n            #root   /apps/oaapp;\n            #index  index.jsp index.html index.htm;\n            proxy_pass http://xws;\n            proxy_redirect off;\n            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header  Host  $host;\n            proxy_set_header  X-Real-IP  $remote_addr;\n            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n\n            limit_conn addr 2;\n            limit_req zone=one burst=5 nodelay;\n        }\n\n        #静态文件，nginx自己处理，不去backend请求tomcat\n        #location  ~* /download/ {\n        #    root /apps/oa/fs;\n\n        #}\n\n        #location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$\n        #{\n        #    root /apps/oaapp;\n        #    expires      7d;\n        #}\n\n        # 为内网IP开放nginx状态监控\n        location /nginxStatus {\n            stub_status on;\n            access_log off;\n            allow 192.168.1.0/24;\n            deny all;\n        }\n\n        location ~ ^/(WEB-INF)/ {\n            deny all;\n        }\n        #error_page 404              /404.html;\n        error_page 500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n}\n```\n\n# 踩到的一些坑\n\n## 400 \\x16\\x03\n同一个server节点，配置：\n```\nlisten 80 default_server;\nlisten 443 ssl default_server;\n```\n## 调试Https\n如果CA证书签发的域名是：www.abcde.com，为了在线下调试，假设将nginx部署在局域网IP：192.168.1.188，我们可以将本机的hosts文件修改一下，文件位于：C:\\Windows\\System32\\drivers\\etc\\hosts。加上一行记录：“192.168.1.188 www.abcde.com”，保存后退出。再到本机的cmd命令行输入：ipconfig flushdns，退出cmd。等待几分钟后，在浏览器输入：https://www.abcde.com，即可在局域网调试啦！\n## ssl_protocols\n如果nginx.conf在定义ssl_protocols时，用了一些比较过时的协议，比如：SSLV3，则会被chrome提示连接不安全。可以参考我的nginx.conf配置，事实上这些过时的协议都有一些可以被利用的漏洞，建议不要使用了。","slug":"Remember-a-reverse-proxy-configuration-process-for-nginx-and-Tomcat-in-the-docker-environment","published":1,"updated":"2016-04-08T10:18:13.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimrk7x8x0000acnnx94ih2u6","content":"<h1 id=\"需要做什么？\"><a href=\"#需要做什么？\" class=\"headerlink\" title=\"需要做什么？\"></a>需要做什么？</h1><p>最近接到的任务是:在Docker环境下，Nginx与Tomcat的反向代理与负载均衡配置。先拿出可行性方案，以便在业务量突发时，在线上环境实施。典型的技术预研，打有准备仗。同时还提出了安全需求，在配置上，需要有安全加固。</p>\n<p>在Nginx配置时，针对不同的使用环境，配置的参数有很多不同。迫在眉睫的，我们需要先对线上的API服务系统进行反向代理与负载均衡配置。API服务系统是面向手机APP的接口系统，使用HTTP Restful+json进行数据通讯。</p>\n<p>我们在局域网环境下，有2台机器在软硬件配置方面，与线上的API服务系统类似。这2台机器的局域网IP分别是：192.168.1.158(简称为：158机器)、192.168.1.188(简称为：188机器)。由于188机器正在做压力测试，而且近期需要持续的对所有接口进行压力测试，没有办法空闲出来做实验。所以在实验之初我使用了158机器的普通账号进行，很快就因为权限不足，遭遇了很多莫名其妙的问题，而且158的使用量比较多，主要作为功能测试的机器。</p>\n<p>随后与PM沟通，延后了188机器的压力测试计划，拿到了权限比较高的账号，但还不是root账户。下面会说到如何在普通账户下，使用root账户执行shell命令。</p>\n<h1 id=\"Docker-with-Tomcat\"><a href=\"#Docker-with-Tomcat\" class=\"headerlink\" title=\"Docker with Tomcat\"></a>Docker with Tomcat</h1><p>为了模拟线上真实环境，我们在188机器上搭建了docker环境。docker是借助Linux container(简称LXC)技术的轻量级可移植运行时环境，这意味着在docker中完成的软件运行时环境搭建后，可以移植到任意一台支持docker运行的机器上，功能上不会有任何的丢失。这有点像Java开发中的JVM，都是解决在不同环境下软件运行的问题。docker更多的提供了资源共享和资源隔离的机制，容器之间本身是隔离互不干扰的，但提供配置允许不同容器之间交换数据，开放对外端口；同时可以限制某个容器对宿主机的资源占用，如cpu、内存、io等等。</p>\n<p>为了方便，低成本，我们使用docker hub上的tomcat镜像：tomcat:8-jre8。在后续的实验中，我们需要2个tomcat作为后端应用服务器来处理实际的HTTP请求。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM tomcat:8-jre8</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir /root/downloadAppBase</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Nginx-VS-Tengine\"><a href=\"#Nginx-VS-Tengine\" class=\"headerlink\" title=\"Nginx VS Tengine\"></a>Nginx VS Tengine</h1><p>在技术选项时，我们遇到Nginx以及衍生产品Tengine。Nginx是俄罗斯人编写的一款轻量级的Web 服务器/反向代理服务器，它还具备邮件服务器的功能。我们在<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"external\">Nginx官网</a>上查询发布日志，发现更新的比较频繁。仅在2016年前4月，就出现了2个比较大的版本：1.8.*、1.9.14。Tengine是由淘宝在官方nginx基础之上进行改进的版本，做了很多功能增强，最后一次的版本发布是：2015-12-31：Tengine-2.1.2,此版本仅兼容官方Nginx的1.6.2版本，该版本发布于：2014年9月16日。这也太久了，可能会错过很多官方更新。</p>\n<h1 id=\"安装与配置\"><a href=\"#安装与配置\" class=\"headerlink\" title=\"安装与配置\"></a>安装与配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">准备工作</span><br><span class=\"line\">cd /home/www/</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">cd nginx/</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">mkdir zlib</span><br><span class=\"line\">mkdir openssl</span><br><span class=\"line\">mkdir pcre</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">如果没有安装gcc/gcc-c++，请执行：sudo apt-get install build-essential</span><br><span class=\"line\">如果没有安装make，请执行：sudo apt-get install make</span><br><span class=\"line\"></span><br><span class=\"line\">Step 1：编译安装Pcre包 (rewrite模块需要 pcre 库)</span><br><span class=\"line\">1.软件位于/software/pcre-8.38.tar.gz</span><br><span class=\"line\">2.拷贝软件到目标机器&quot;/home/www/nginx/pcre/&quot;目录</span><br><span class=\"line\">3.顺序执行以下脚本</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/pcre/</span><br><span class=\"line\">tar -xzvf pcre-8.38.tar.gz</span><br><span class=\"line\">cd pcre-8.38/</span><br><span class=\"line\">./configure</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">#有可能需要输入密码</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Step 2：编译安装Zlib (gzip模块需要 zlib 库)</span><br><span class=\"line\">1.软件位于/software/zlib-1.2.8.tar.gz</span><br><span class=\"line\">2.拷贝软件到目标机器&quot;/home/www/nginx/zlib/&quot;目录</span><br><span class=\"line\">3.顺序执行以下脚本</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/zlib/</span><br><span class=\"line\">tar -xzvf zlib-1.2.8.tar.gz</span><br><span class=\"line\">cd zlib-1.2.8/</span><br><span class=\"line\">./configure</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">#有可能需要输入密码</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\">Step 2：编译安装OpenSSL (ssl 功能需要openssl库)</span><br><span class=\"line\">1.软件位于/software/openssl-1.1.0-pre4.tar.gz</span><br><span class=\"line\">2.拷贝软件到目标机器&quot;/home/www/nginx/openssl/&quot;目录</span><br><span class=\"line\">3.顺序执行以下脚本</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/openssl/</span><br><span class=\"line\">tar -xzvf openssl-1.1.0-pre4.tar.gz</span><br><span class=\"line\">cd openssl-1.1.0-pre4/</span><br><span class=\"line\">./config</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">#命令执行时间超过5分钟，耐心等待</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\">#命令执行时间超过5分钟，耐心等待</span><br><span class=\"line\"></span><br><span class=\"line\">Step 3：编译安装Nginx</span><br><span class=\"line\">1.软件位于/software/nginx-1.9.14.tar.gz</span><br><span class=\"line\">2.拷贝软件到目标机器&quot;/home/www/nginx/nginx/&quot;目录</span><br><span class=\"line\">3.顺序执行以下脚本</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/nginx/</span><br><span class=\"line\">tar -xzvf nginx-1.9.14.tar.gz</span><br><span class=\"line\">cd nginx-1.9.14/</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i -e &apos;s/1.9.14//g&apos; -e &apos;s/nginx\\//ERROR/g&apos; -e &apos;s/&quot;NGINX&quot;/&quot;ERROR&quot;/g&apos; src/core/nginx.h</span><br><span class=\"line\"></span><br><span class=\"line\">./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-8.38 --with-openssl=/home/www/nginx/openssl/openssl-1.1.0-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-1.2.8</span><br><span class=\"line\"></span><br><span class=\"line\">sudo make</span><br><span class=\"line\">#命令执行时间超过5分钟，耐心等待</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\">Step 4：安装补丁(对应用服务器进行监控)</span><br><span class=\"line\">cd /home/www/nginx/nginx/</span><br><span class=\"line\">mkdir patch</span><br><span class=\"line\">补丁文件位于/software/patch目录，拷贝目录下的所有文件到：/home/www/nginx/nginx/patch/</span><br><span class=\"line\">cd /home/www/nginx/nginx/nginx-1.9.14/src/</span><br><span class=\"line\">patch -p1 &lt; /home/www/nginx/nginx/patch/nginx_upstream_check_module-master/check_1.9.2+.patch</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-8.38 --with-openssl=/home/www/nginx/openssl/openssl-1.1.0-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-1.2.8 --add-module=/home/www/nginx/nginx/patch/nginx_upstream_check_module-master/</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">#命令执行时间超过5分钟，耐心等待</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\">cd /home/www/nginx/nginx/sbin/</span><br><span class=\"line\">sudo rm -f nginx.old</span><br><span class=\"line\"></span><br><span class=\"line\">Step 5：配置</span><br><span class=\"line\">配置文件位于：conf/nginx.conf</span><br><span class=\"line\">将该文件拷贝到：/home/www/nginx/nginx/conf/目录下，遇到文件已存在时，直接覆盖。</span><br><span class=\"line\"></span><br><span class=\"line\">确保可以访问到后端tomcat开放的端口，telnet</span><br><span class=\"line\">修改配置文件nginx.conf,“upstream  xws”改为实际的tomcat运行环境</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/nginx/</span><br><span class=\"line\">mkdir ssl</span><br><span class=\"line\">cd ssl</span><br><span class=\"line\">SSL证书文件位于：ssl/www.abcde.com.crt，ssl/www.abcde.com.key</span><br><span class=\"line\">将这2个文件拷贝到/home/www/nginx/nginx/ssl/目录下</span><br><span class=\"line\"></span><br><span class=\"line\">Step 6：运行</span><br><span class=\"line\">确保系统的80、443端口处于空闲状态。netstat</span><br><span class=\"line\">确保/home/www/nginx/nginx/logs/目录具备读写权限。</span><br><span class=\"line\">确保/home/www/nginx/nginx/ssl/www.abcde.com.crt具备读权限。</span><br><span class=\"line\">确保/home/www/nginx/nginx/ssl/www.abcde.com.key具备读权限。</span><br><span class=\"line\">确保/home/www/nginx/nginx/sbin/nginx文件具备可执行权限。</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/nginx/sbin/</span><br><span class=\"line\">sudo ./nginx</span><br><span class=\"line\"></span><br><span class=\"line\">Step 7：验证</span><br><span class=\"line\">1.pcre包安装的正确性</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/pcre/</span><br><span class=\"line\">./pcre-config --version</span><br><span class=\"line\">有版本号输出则安装成功。</span><br><span class=\"line\"></span><br><span class=\"line\">2.openssl包安装的正确性</span><br><span class=\"line\">cd /home/www/nginx/openssl/openssl-1.1.0-pre4/</span><br><span class=\"line\">openssl version –a</span><br><span class=\"line\">有版本号输出则安装成功。</span><br><span class=\"line\"></span><br><span class=\"line\">3.nginx包安装的正确性</span><br><span class=\"line\">cd /home/www/nginx/nginx/nginx-1.9.14/objs</span><br><span class=\"line\">./nginx -V</span><br><span class=\"line\">##也可以使用：./nginx -t</span><br><span class=\"line\">有配置详情输出则安装成功。</span><br><span class=\"line\"></span><br><span class=\"line\">卸载</span><br><span class=\"line\">1.停止nginx的运行</span><br><span class=\"line\">cd /home/www/nginx/nginx/sbin/</span><br><span class=\"line\">sudo ./nginx -s stop</span><br><span class=\"line\"></span><br><span class=\"line\">2.删除文件</span><br><span class=\"line\">cd /home/www/</span><br><span class=\"line\">rm -rf nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">监控</span><br><span class=\"line\">进入到与nginx部署机器的局域网络</span><br><span class=\"line\">浏览器访问：http://nginx主机的局域网ip/nginxStatus/</span><br></pre></td></tr></table></figure>\n<p>贴出nginx.cof</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#你所看到的这个文件，是nginx的工作配置文件，不要轻易改动。</span><br><span class=\"line\"></span><br><span class=\"line\">worker_processes  4;</span><br><span class=\"line\">error_log  logs/error.log;</span><br><span class=\"line\">pid        logs/nginx.pid;</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\">    worker_connections  65535;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\">    tcp_nopush on;</span><br><span class=\"line\">    tcp_nodelay on;</span><br><span class=\"line\">    client_body_timeout   10;</span><br><span class=\"line\">    client_header_timeout  30;</span><br><span class=\"line\">    keepalive_timeout     30  30;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\">    send_timeout 10;</span><br><span class=\"line\">    client_body_buffer_size  64K;</span><br><span class=\"line\">    client_header_buffer_size  128k;</span><br><span class=\"line\">    client_max_body_size  10m;</span><br><span class=\"line\">    large_client_header_buffers  4  128k;</span><br><span class=\"line\"></span><br><span class=\"line\">  # gzip压缩功能设置</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers    4 16k;</span><br><span class=\"line\">    gzip_http_version 1.0;</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置单个IP在每秒请求数不能超过20次</span><br><span class=\"line\">    limit_req_zone $binary_remote_addr zone=one:20m rate=20r/s;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置单个IP同时连接数</span><br><span class=\"line\">    limit_conn_zone $binary_remote_addr zone=addr:20m;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout 10m;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 设定负载均衡方式：RR模式</span><br><span class=\"line\">    upstream  xws  &#123;</span><br><span class=\"line\">        server 127.0.0.1:6080 weight=1 max_fails=5 fail_timeout=10s ;</span><br><span class=\"line\">        server 127.0.0.1:7080 weight=1 max_fails=5 fail_timeout=10s ;</span><br><span class=\"line\">        check interval=3000 rise=2 fall=5 timeout=1000 type=http;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80 default_server;</span><br><span class=\"line\">        #root   /apps/oaapp;</span><br><span class=\"line\"></span><br><span class=\"line\">        listen 443 ssl default_server;</span><br><span class=\"line\">        server_name www.abcde.com;</span><br><span class=\"line\">        ssl_certificate  /home/www/nginx/nginx/ssl/yourCAcrt.crt;</span><br><span class=\"line\">        ssl_certificate_key  /home/www/nginx/nginx/ssl/yourCAkey.key;</span><br><span class=\"line\">        ssl_session_timeout  10m;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">        ssl_ciphers &quot;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4&quot;;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        access_log  logs/xws.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        if ($request_method !~ ^(GET|HEAD|POST)$) &#123;</span><br><span class=\"line\">            return 404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对所有URL做负载均衡+反向代理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            #root   /apps/oaapp;</span><br><span class=\"line\">            #index  index.jsp index.html index.htm;</span><br><span class=\"line\">            proxy_pass http://xws;</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">            proxy_set_header  Host  $host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class=\"line\"></span><br><span class=\"line\">            limit_conn addr 2;</span><br><span class=\"line\">            limit_req zone=one burst=5 nodelay;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #静态文件，nginx自己处理，不去backend请求tomcat</span><br><span class=\"line\">        #location  ~* /download/ &#123;</span><br><span class=\"line\">        #    root /apps/oa/fs;</span><br><span class=\"line\"></span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$</span><br><span class=\"line\">        #&#123;</span><br><span class=\"line\">        #    root /apps/oaapp;</span><br><span class=\"line\">        #    expires      7d;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 为内网IP开放nginx状态监控</span><br><span class=\"line\">        location /nginxStatus &#123;</span><br><span class=\"line\">            stub_status on;</span><br><span class=\"line\">            access_log off;</span><br><span class=\"line\">            allow 192.168.1.0/24;</span><br><span class=\"line\">            deny all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ ^/(WEB-INF)/ &#123;</span><br><span class=\"line\">            deny all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #error_page 404              /404.html;</span><br><span class=\"line\">        error_page 500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"踩到的一些坑\"><a href=\"#踩到的一些坑\" class=\"headerlink\" title=\"踩到的一些坑\"></a>踩到的一些坑</h1><h2 id=\"400-x16-x03\"><a href=\"#400-x16-x03\" class=\"headerlink\" title=\"400 \\x16\\x03\"></a>400 \\x16\\x03</h2><p>同一个server节点，配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 80 default_server;</span><br><span class=\"line\">listen 443 ssl default_server;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"调试Https\"><a href=\"#调试Https\" class=\"headerlink\" title=\"调试Https\"></a>调试Https</h2><p>如果CA证书签发的域名是：www.abcde.com，为了在线下调试，假设将nginx部署在局域网IP：192.168.1.188，我们可以将本机的hosts文件修改一下，文件位于：C:\\Windows\\System32\\drivers\\etc\\hosts。加上一行记录：“192.168.1.188 www.abcde.com”，保存后退出。再到本机的cmd命令行输入：ipconfig flushdns，退出cmd。等待几分钟后，在浏览器输入：<a href=\"https://www.abcde.com，即可在局域网调试啦！\" target=\"_blank\" rel=\"external\">https://www.abcde.com，即可在局域网调试啦！</a></p>\n<h2 id=\"ssl-protocols\"><a href=\"#ssl-protocols\" class=\"headerlink\" title=\"ssl_protocols\"></a>ssl_protocols</h2><p>如果nginx.conf在定义ssl_protocols时，用了一些比较过时的协议，比如：SSLV3，则会被chrome提示连接不安全。可以参考我的nginx.conf配置，事实上这些过时的协议都有一些可以被利用的漏洞，建议不要使用了。</p>\n","excerpt":"","more":"<h1 id=\"需要做什么？\"><a href=\"#需要做什么？\" class=\"headerlink\" title=\"需要做什么？\"></a>需要做什么？</h1><p>最近接到的任务是:在Docker环境下，Nginx与Tomcat的反向代理与负载均衡配置。先拿出可行性方案，以便在业务量突发时，在线上环境实施。典型的技术预研，打有准备仗。同时还提出了安全需求，在配置上，需要有安全加固。</p>\n<p>在Nginx配置时，针对不同的使用环境，配置的参数有很多不同。迫在眉睫的，我们需要先对线上的API服务系统进行反向代理与负载均衡配置。API服务系统是面向手机APP的接口系统，使用HTTP Restful+json进行数据通讯。</p>\n<p>我们在局域网环境下，有2台机器在软硬件配置方面，与线上的API服务系统类似。这2台机器的局域网IP分别是：192.168.1.158(简称为：158机器)、192.168.1.188(简称为：188机器)。由于188机器正在做压力测试，而且近期需要持续的对所有接口进行压力测试，没有办法空闲出来做实验。所以在实验之初我使用了158机器的普通账号进行，很快就因为权限不足，遭遇了很多莫名其妙的问题，而且158的使用量比较多，主要作为功能测试的机器。</p>\n<p>随后与PM沟通，延后了188机器的压力测试计划，拿到了权限比较高的账号，但还不是root账户。下面会说到如何在普通账户下，使用root账户执行shell命令。</p>\n<h1 id=\"Docker-with-Tomcat\"><a href=\"#Docker-with-Tomcat\" class=\"headerlink\" title=\"Docker with Tomcat\"></a>Docker with Tomcat</h1><p>为了模拟线上真实环境，我们在188机器上搭建了docker环境。docker是借助Linux container(简称LXC)技术的轻量级可移植运行时环境，这意味着在docker中完成的软件运行时环境搭建后，可以移植到任意一台支持docker运行的机器上，功能上不会有任何的丢失。这有点像Java开发中的JVM，都是解决在不同环境下软件运行的问题。docker更多的提供了资源共享和资源隔离的机制，容器之间本身是隔离互不干扰的，但提供配置允许不同容器之间交换数据，开放对外端口；同时可以限制某个容器对宿主机的资源占用，如cpu、内存、io等等。</p>\n<p>为了方便，低成本，我们使用docker hub上的tomcat镜像：tomcat:8-jre8。在后续的实验中，我们需要2个tomcat作为后端应用服务器来处理实际的HTTP请求。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM tomcat:8-jre8</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir /root/downloadAppBase</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Nginx-VS-Tengine\"><a href=\"#Nginx-VS-Tengine\" class=\"headerlink\" title=\"Nginx VS Tengine\"></a>Nginx VS Tengine</h1><p>在技术选项时，我们遇到Nginx以及衍生产品Tengine。Nginx是俄罗斯人编写的一款轻量级的Web 服务器/反向代理服务器，它还具备邮件服务器的功能。我们在<a href=\"http://nginx.org/en/download.html\">Nginx官网</a>上查询发布日志，发现更新的比较频繁。仅在2016年前4月，就出现了2个比较大的版本：1.8.*、1.9.14。Tengine是由淘宝在官方nginx基础之上进行改进的版本，做了很多功能增强，最后一次的版本发布是：2015-12-31：Tengine-2.1.2,此版本仅兼容官方Nginx的1.6.2版本，该版本发布于：2014年9月16日。这也太久了，可能会错过很多官方更新。</p>\n<h1 id=\"安装与配置\"><a href=\"#安装与配置\" class=\"headerlink\" title=\"安装与配置\"></a>安装与配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">准备工作</span><br><span class=\"line\">cd /home/www/</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">cd nginx/</span><br><span class=\"line\">mkdir nginx</span><br><span class=\"line\">mkdir zlib</span><br><span class=\"line\">mkdir openssl</span><br><span class=\"line\">mkdir pcre</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">如果没有安装gcc/gcc-c++，请执行：sudo apt-get install build-essential</span><br><span class=\"line\">如果没有安装make，请执行：sudo apt-get install make</span><br><span class=\"line\"></span><br><span class=\"line\">Step 1：编译安装Pcre包 (rewrite模块需要 pcre 库)</span><br><span class=\"line\">1.软件位于/software/pcre-8.38.tar.gz</span><br><span class=\"line\">2.拷贝软件到目标机器&quot;/home/www/nginx/pcre/&quot;目录</span><br><span class=\"line\">3.顺序执行以下脚本</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/pcre/</span><br><span class=\"line\">tar -xzvf pcre-8.38.tar.gz</span><br><span class=\"line\">cd pcre-8.38/</span><br><span class=\"line\">./configure</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">#有可能需要输入密码</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Step 2：编译安装Zlib (gzip模块需要 zlib 库)</span><br><span class=\"line\">1.软件位于/software/zlib-1.2.8.tar.gz</span><br><span class=\"line\">2.拷贝软件到目标机器&quot;/home/www/nginx/zlib/&quot;目录</span><br><span class=\"line\">3.顺序执行以下脚本</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/zlib/</span><br><span class=\"line\">tar -xzvf zlib-1.2.8.tar.gz</span><br><span class=\"line\">cd zlib-1.2.8/</span><br><span class=\"line\">./configure</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">#有可能需要输入密码</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\">Step 2：编译安装OpenSSL (ssl 功能需要openssl库)</span><br><span class=\"line\">1.软件位于/software/openssl-1.1.0-pre4.tar.gz</span><br><span class=\"line\">2.拷贝软件到目标机器&quot;/home/www/nginx/openssl/&quot;目录</span><br><span class=\"line\">3.顺序执行以下脚本</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/openssl/</span><br><span class=\"line\">tar -xzvf openssl-1.1.0-pre4.tar.gz</span><br><span class=\"line\">cd openssl-1.1.0-pre4/</span><br><span class=\"line\">./config</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">#命令执行时间超过5分钟，耐心等待</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\">#命令执行时间超过5分钟，耐心等待</span><br><span class=\"line\"></span><br><span class=\"line\">Step 3：编译安装Nginx</span><br><span class=\"line\">1.软件位于/software/nginx-1.9.14.tar.gz</span><br><span class=\"line\">2.拷贝软件到目标机器&quot;/home/www/nginx/nginx/&quot;目录</span><br><span class=\"line\">3.顺序执行以下脚本</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/nginx/</span><br><span class=\"line\">tar -xzvf nginx-1.9.14.tar.gz</span><br><span class=\"line\">cd nginx-1.9.14/</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i -e &apos;s/1.9.14//g&apos; -e &apos;s/nginx\\//ERROR/g&apos; -e &apos;s/&quot;NGINX&quot;/&quot;ERROR&quot;/g&apos; src/core/nginx.h</span><br><span class=\"line\"></span><br><span class=\"line\">./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-8.38 --with-openssl=/home/www/nginx/openssl/openssl-1.1.0-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-1.2.8</span><br><span class=\"line\"></span><br><span class=\"line\">sudo make</span><br><span class=\"line\">#命令执行时间超过5分钟，耐心等待</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\">Step 4：安装补丁(对应用服务器进行监控)</span><br><span class=\"line\">cd /home/www/nginx/nginx/</span><br><span class=\"line\">mkdir patch</span><br><span class=\"line\">补丁文件位于/software/patch目录，拷贝目录下的所有文件到：/home/www/nginx/nginx/patch/</span><br><span class=\"line\">cd /home/www/nginx/nginx/nginx-1.9.14/src/</span><br><span class=\"line\">patch -p1 &lt; /home/www/nginx/nginx/patch/nginx_upstream_check_module-master/check_1.9.2+.patch</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">./configure --prefix=/home/www/nginx/nginx --with-http_realip_module --with-http_sub_module --with-http_flv_module --with-http_dav_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_addition_module --with-pcre=/home/www/nginx/pcre/pcre-8.38 --with-openssl=/home/www/nginx/openssl/openssl-1.1.0-pre4 --with-http_ssl_module --with-zlib=/home/www/nginx/zlib/zlib-1.2.8 --add-module=/home/www/nginx/nginx/patch/nginx_upstream_check_module-master/</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">#命令执行时间超过5分钟，耐心等待</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\">cd /home/www/nginx/nginx/sbin/</span><br><span class=\"line\">sudo rm -f nginx.old</span><br><span class=\"line\"></span><br><span class=\"line\">Step 5：配置</span><br><span class=\"line\">配置文件位于：conf/nginx.conf</span><br><span class=\"line\">将该文件拷贝到：/home/www/nginx/nginx/conf/目录下，遇到文件已存在时，直接覆盖。</span><br><span class=\"line\"></span><br><span class=\"line\">确保可以访问到后端tomcat开放的端口，telnet</span><br><span class=\"line\">修改配置文件nginx.conf,“upstream  xws”改为实际的tomcat运行环境</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/nginx/</span><br><span class=\"line\">mkdir ssl</span><br><span class=\"line\">cd ssl</span><br><span class=\"line\">SSL证书文件位于：ssl/www.abcde.com.crt，ssl/www.abcde.com.key</span><br><span class=\"line\">将这2个文件拷贝到/home/www/nginx/nginx/ssl/目录下</span><br><span class=\"line\"></span><br><span class=\"line\">Step 6：运行</span><br><span class=\"line\">确保系统的80、443端口处于空闲状态。netstat</span><br><span class=\"line\">确保/home/www/nginx/nginx/logs/目录具备读写权限。</span><br><span class=\"line\">确保/home/www/nginx/nginx/ssl/www.abcde.com.crt具备读权限。</span><br><span class=\"line\">确保/home/www/nginx/nginx/ssl/www.abcde.com.key具备读权限。</span><br><span class=\"line\">确保/home/www/nginx/nginx/sbin/nginx文件具备可执行权限。</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/nginx/sbin/</span><br><span class=\"line\">sudo ./nginx</span><br><span class=\"line\"></span><br><span class=\"line\">Step 7：验证</span><br><span class=\"line\">1.pcre包安装的正确性</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/www/nginx/pcre/</span><br><span class=\"line\">./pcre-config --version</span><br><span class=\"line\">有版本号输出则安装成功。</span><br><span class=\"line\"></span><br><span class=\"line\">2.openssl包安装的正确性</span><br><span class=\"line\">cd /home/www/nginx/openssl/openssl-1.1.0-pre4/</span><br><span class=\"line\">openssl version –a</span><br><span class=\"line\">有版本号输出则安装成功。</span><br><span class=\"line\"></span><br><span class=\"line\">3.nginx包安装的正确性</span><br><span class=\"line\">cd /home/www/nginx/nginx/nginx-1.9.14/objs</span><br><span class=\"line\">./nginx -V</span><br><span class=\"line\">##也可以使用：./nginx -t</span><br><span class=\"line\">有配置详情输出则安装成功。</span><br><span class=\"line\"></span><br><span class=\"line\">卸载</span><br><span class=\"line\">1.停止nginx的运行</span><br><span class=\"line\">cd /home/www/nginx/nginx/sbin/</span><br><span class=\"line\">sudo ./nginx -s stop</span><br><span class=\"line\"></span><br><span class=\"line\">2.删除文件</span><br><span class=\"line\">cd /home/www/</span><br><span class=\"line\">rm -rf nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">监控</span><br><span class=\"line\">进入到与nginx部署机器的局域网络</span><br><span class=\"line\">浏览器访问：http://nginx主机的局域网ip/nginxStatus/</span><br></pre></td></tr></table></figure>\n<p>贴出nginx.cof</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#你所看到的这个文件，是nginx的工作配置文件，不要轻易改动。</span><br><span class=\"line\"></span><br><span class=\"line\">worker_processes  4;</span><br><span class=\"line\">error_log  logs/error.log;</span><br><span class=\"line\">pid        logs/nginx.pid;</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\">    worker_connections  65535;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\">    tcp_nopush on;</span><br><span class=\"line\">    tcp_nodelay on;</span><br><span class=\"line\">    client_body_timeout   10;</span><br><span class=\"line\">    client_header_timeout  30;</span><br><span class=\"line\">    keepalive_timeout     30  30;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\">    send_timeout 10;</span><br><span class=\"line\">    client_body_buffer_size  64K;</span><br><span class=\"line\">    client_header_buffer_size  128k;</span><br><span class=\"line\">    client_max_body_size  10m;</span><br><span class=\"line\">    large_client_header_buffers  4  128k;</span><br><span class=\"line\"></span><br><span class=\"line\">  # gzip压缩功能设置</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers    4 16k;</span><br><span class=\"line\">    gzip_http_version 1.0;</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置单个IP在每秒请求数不能超过20次</span><br><span class=\"line\">    limit_req_zone $binary_remote_addr zone=one:20m rate=20r/s;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设置单个IP同时连接数</span><br><span class=\"line\">    limit_conn_zone $binary_remote_addr zone=addr:20m;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout 10m;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 设定负载均衡方式：RR模式</span><br><span class=\"line\">    upstream  xws  &#123;</span><br><span class=\"line\">        server 127.0.0.1:6080 weight=1 max_fails=5 fail_timeout=10s ;</span><br><span class=\"line\">        server 127.0.0.1:7080 weight=1 max_fails=5 fail_timeout=10s ;</span><br><span class=\"line\">        check interval=3000 rise=2 fall=5 timeout=1000 type=http;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80 default_server;</span><br><span class=\"line\">        #root   /apps/oaapp;</span><br><span class=\"line\"></span><br><span class=\"line\">        listen 443 ssl default_server;</span><br><span class=\"line\">        server_name www.abcde.com;</span><br><span class=\"line\">        ssl_certificate  /home/www/nginx/nginx/ssl/yourCAcrt.crt;</span><br><span class=\"line\">        ssl_certificate_key  /home/www/nginx/nginx/ssl/yourCAkey.key;</span><br><span class=\"line\">        ssl_session_timeout  10m;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">        ssl_ciphers &quot;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4&quot;;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        access_log  logs/xws.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        if ($request_method !~ ^(GET|HEAD|POST)$) &#123;</span><br><span class=\"line\">            return 404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对所有URL做负载均衡+反向代理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            #root   /apps/oaapp;</span><br><span class=\"line\">            #index  index.jsp index.html index.htm;</span><br><span class=\"line\">            proxy_pass http://xws;</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">            proxy_set_header  Host  $host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class=\"line\"></span><br><span class=\"line\">            limit_conn addr 2;</span><br><span class=\"line\">            limit_req zone=one burst=5 nodelay;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #静态文件，nginx自己处理，不去backend请求tomcat</span><br><span class=\"line\">        #location  ~* /download/ &#123;</span><br><span class=\"line\">        #    root /apps/oa/fs;</span><br><span class=\"line\"></span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$</span><br><span class=\"line\">        #&#123;</span><br><span class=\"line\">        #    root /apps/oaapp;</span><br><span class=\"line\">        #    expires      7d;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 为内网IP开放nginx状态监控</span><br><span class=\"line\">        location /nginxStatus &#123;</span><br><span class=\"line\">            stub_status on;</span><br><span class=\"line\">            access_log off;</span><br><span class=\"line\">            allow 192.168.1.0/24;</span><br><span class=\"line\">            deny all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ ^/(WEB-INF)/ &#123;</span><br><span class=\"line\">            deny all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #error_page 404              /404.html;</span><br><span class=\"line\">        error_page 500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"踩到的一些坑\"><a href=\"#踩到的一些坑\" class=\"headerlink\" title=\"踩到的一些坑\"></a>踩到的一些坑</h1><h2 id=\"400-x16-x03\"><a href=\"#400-x16-x03\" class=\"headerlink\" title=\"400 \\x16\\x03\"></a>400 \\x16\\x03</h2><p>同一个server节点，配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 80 default_server;</span><br><span class=\"line\">listen 443 ssl default_server;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"调试Https\"><a href=\"#调试Https\" class=\"headerlink\" title=\"调试Https\"></a>调试Https</h2><p>如果CA证书签发的域名是：www.abcde.com，为了在线下调试，假设将nginx部署在局域网IP：192.168.1.188，我们可以将本机的hosts文件修改一下，文件位于：C:\\Windows\\System32\\drivers\\etc\\hosts。加上一行记录：“192.168.1.188 www.abcde.com”，保存后退出。再到本机的cmd命令行输入：ipconfig flushdns，退出cmd。等待几分钟后，在浏览器输入：<a href=\"https://www.abcde.com，即可在局域网调试啦！\">https://www.abcde.com，即可在局域网调试啦！</a></p>\n<h2 id=\"ssl-protocols\"><a href=\"#ssl-protocols\" class=\"headerlink\" title=\"ssl_protocols\"></a>ssl_protocols</h2><p>如果nginx.conf在定义ssl_protocols时，用了一些比较过时的协议，比如：SSLV3，则会被chrome提示连接不安全。可以参考我的nginx.conf配置，事实上这些过时的协议都有一些可以被利用的漏洞，建议不要使用了。</p>\n"},{"title":"SQL查询提高篇：捋清连接查询的那些事儿","date":"2016-03-21T04:25:10.000Z","description":"有时为了得到完整的结果，我们需要从两个或更多的表中获取结果。我们就需要执行 join。","_content":"数据库中的表可通过键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。\n\n而在两个表之间建立关联关系，是不要求任何一个表的关联列(column)是主键的，这个关联列可以是任何类型的列，但是要求，两个表的关联列可以做关联关系的条件计算，为避免转换影响效率，两个关联列最好保持类型、长度一致。\n\n为方便说明，定义以下2张表：\n```\n用户信息表\nCREATE TABLE `user` (\n  `uid` int(11) NOT NULL COMMENT '用户id',\n  `name` varchar(10) DEFAULT NULL COMMENT '姓名',\n  `sex` tinyint(1) DEFAULT NULL COMMENT '性别',\n  `age` tinyint(2) DEFAULT NULL COMMENT '年龄',\n  `mobile` varchar(11) DEFAULT NULL COMMENT '手机号码',\n  `password` varchar(64) NOT NULL COMMENT '密码',\n  `register_time` datetime NOT NULL COMMENT '注册时间',\n  PRIMARY KEY (`uid`),\n  UNIQUE KEY `index_mobile` (`mobile`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nINSERT INTO `user` VALUES ('100', '张三', '1', '28', '13547521456', 'ASDAWQ@!#SDF@#$%XCF', '2016-03-30 17:47:51');\nINSERT INTO `user` VALUES ('101', '李四', '2', '35', '17025856329', '234ASD@#$@#$AFSDFRT', '2016-03-30 17:48:34');\nINSERT INTO `user` VALUES ('102', '王五', '1', '48', '15925874536', '#$%SDFSDR@#$%@#$#@', '2016-03-30 17:53:49');\n\n订单信息表\nCREATE TABLE `order` (\n  `order_id` int(11) NOT NULL COMMENT '订单编号',\n  `uid` int(11) DEFAULT NULL COMMENT '用户Id',\n  `amout` mediumtext NOT NULL COMMENT '订单金额(单位为分)',\n  `status` tinyint(2) DEFAULT NULL COMMENT '订单状态',\n  `order_time` datetime DEFAULT NULL COMMENT '订单时间',\n  PRIMARY KEY (`order_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nINSERT INTO `order` VALUES ('200', '100', '5899', '0', '2016-03-30 17:54:20');\nINSERT INTO `order` VALUES ('201', '100', '6799', '0', '2016-03-30 17:54:38');\nINSERT INTO `order` VALUES ('202', '101', '12699', '0', '2016-03-30 17:55:01');\n```\n数据库现在2张表的数据看起来是这样：\nuser表\n\n| uid        | name           | sex  | age | mobile | password | register_time |\n| ------------- |:-------------:| -----:|-----:|-----:|-----:|-----:|\n|100| 张三|  1  | 28|  13547521456| password | 2016-03-30 17:47:51 |\n|101 |李四 | 2 |  35 | 17025856329 | password | 2016-03-30 17:48:34 |\n|102| 王五  |1|   48  |15925874536 | password  | 2016-03-30 17:53:49 |\n\norder表\n\n| order_id        | uid           | amout  | status | order_time |\n| ------------- |:-------------:| -----:|-----:|-----:|-----:|\n|200| 100 | 5899|    0 |  2016-03-30 17:54:20|\n|201 | 100 | 6799 |   0  | 2016-03-30 17:54:38|\n|202 | 101 | 12699 |  0   | 2016-03-30 17:55:01|\n\n## 练习题\n\n查询所有用户的订单信息，订单信息不能为空，要求返回的字段有：用户姓名、手机号码、订单号、订单状态、订单金额。\n\n### left join VS right join\n规律：\n\n* A表 left join B表；则返回A表的所有符合条件(on条件、where条件)的记录。A表的字段不会为null，而B表没有对应记录时,字段值返回null。\n* B表 left join A表；则返回B表的所有符合条件(on条件、where条件)的记录。B表的字段不会为null，而A表没有对应记录时,字段值返回null。\n\n* A表 left join B表 等价于 B表 right join A表.\n* A表 right join B表 等价于 B表 left join A表.\n\n正确的SQL语句：\n```\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `user` RIGHT JOIN `order` ON `user`.uid=`order`.uid\n\n等价于\n\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `order` LEFT JOIN `user` ON `user`.uid=`order`.uid\n```\n结果集是：\n\n| name        | mobile           | order_id  |status|amout|\n| ------------- |:-------------:| -----:|-----:|-----:|\n|张三|  13547521456| 200| 0   |5899|\n|张三 | 13547521456 |201 |0  | 6799|\n|李四  |17025856329 |202 |0 |  12699|\n\n错误的SQL语句：\n```\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `user` LEFT JOIN `order` ON `user`.uid=`order`.uid\n\n等价于\n\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `order` RIGHT JOIN `user` ON `user`.uid=`order`.uid\n```\n结果集是：\n\n| name        | mobile           | order_id  |status|amout|\n| ------------- |:-------------:| -----:|-----:|-----:|\n|张三 | 13547521456| 200| 0   |5899|\n|张三  |13547521456 |201 |0   |6799|\n|李四  |17025856329 |202 |0   |12699|\n|王五  |15925874536 |null |null| null|\n\n可以看出错误的SQL语句中，查出了没有订单的用户“王五”\n\n### inner join\n规律：\n\n* A表 inner join B表；则返回A表和B表同时符合条件(on条件、where条件)的记录。\n\n```\n两种写法，后者使用的居多\n\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `order` INNER JOIN `user` ON `user`.uid=`order`.uid;\n\n等价于\n\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `order`,`user` WHERE `user`.uid=`order`.uid;\n```\n\n### left outter join VS right outter join\n\nleft join 是left outer join的简写，left join默认是outer属性的。\n\n在某些数据库(如Oracle)中， left join 称为 left outer join；相应的right join 称为 right outter join\n\n### full join\n* 在某些数据库中， FULL JOIN 称为 FULL OUTER JOIN。\n* 只要其中某个表存在匹配，FULL JOIN 关键字就会返回行，意思是只需要有一个以上的表满足条件即可。\n* Oracle 、DB2、SQL Server、PostgreSQL 支持 Full JOIN，但是 MySQL 是不支持的。\n```\nMySQL使用FULL JOIN报错\n[Err] 1054 - Unknown column 'order.uid' in 'on clause'\n```\n* MySQL可以通过 LEFT JOIN + UNION + RIGHT JOIN 的方式 来实现Full JOIN。\n```\nselect `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n from `order` left join `user` on `user`.uid=`order`.uid\n union\nselect `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n from `order` right join `user` on `user`.uid=`order`.uid;\n```\n### cross join\n除了在FROM子句中使用逗号间隔连接的表外，SQL还支持另一种被称为交叉连接的操作，它们都返回被连接的两个表所有数据行的笛卡尔积，返回到的数据行数等于第一个表中符合查询条件的数据行数乘以第二个表中符合查询条件的数据行数。惟一的不同在于，交叉连接分开列名时，使用CROSS JOIN关键字而不是逗号。\n\n实际上，下面两个表达式是完全等价的。\n```\nSELECT  *  FROM  table1, table2 WHERE table1.name=table2.name;\nSELECT  *  FROM  table1  CROSS JOIN  table2 WHERE table1.name=table2.name;\n```\n在使用CROSS JOIN关键字交叉连接表时，因为生成的是两个表的笛卡尔积，因而不能使用ON关键字，只能在WHERE子句中定义搜索条件。\n\n事实上，直接使用CROSS JOIN很少得到想要的结果，但是，正如实例所示，作为查询的第一步，DBMS通常在FROM子句中，对连接的表进行CROSS JOIN，然后过滤得到的中间表。\n### union,union all\n在数据库中，union和union all关键字都是将两个结果集合并为一个，但这两者从使用和效率上来说都有所不同。\n\nunion在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。\n\n如：\n select * from test_union1\n   union\n select * from test_union2\n\n这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，如果表数据量大的话可能会导致用磁盘进行排序。而union all只是简单的将两个结果合并后就返回。这样，如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。从效率上说，union all要比union快很多，所以，如果可以确认合并的两个结果集中不包含重复的数据的话，那么就使用union all，\n\n如下：\nselect * from test_union1\nunion all\nselect * from test_union2\n\n使用 union 组合查询的结果集有两个最基本的规则：\n1。所有查询中的列数和列的顺序必须相同。\n2。数据类型必须兼容\n### Apache Hive连接查询\nHive支持连接查询，但有一些条件必须遵守，比如只支持相等查询，其它查询如不等式查询则不支持，还支持外连接，左半连接查询。另外Hive支持多于两个表以上的连接查询。\n* [Hive学习之连接查询](http://blog.csdn.net/skywalker_only/article/details/39205973)\n* [Hive JOIN使用详解](http://shiyanjun.cn/archives/588.html)\n### 结合explain进行执行分析\n* [MySQL EXPLAIN 命令详解学习](http://blog.csdn.net/mchdba/article/details/9190771)","source":"_posts/SQL-improve-elegant-use-join-query.md","raw":"---\ntitle: 'SQL查询提高篇：捋清连接查询的那些事儿'\ndate: 2016-03-21 12:25:10\ntags:\n    - Tech\n    - SQL\n    - Elegant\ncategories: Learning\ndescription: 有时为了得到完整的结果，我们需要从两个或更多的表中获取结果。我们就需要执行 join。\n---\n数据库中的表可通过键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。\n\n而在两个表之间建立关联关系，是不要求任何一个表的关联列(column)是主键的，这个关联列可以是任何类型的列，但是要求，两个表的关联列可以做关联关系的条件计算，为避免转换影响效率，两个关联列最好保持类型、长度一致。\n\n为方便说明，定义以下2张表：\n```\n用户信息表\nCREATE TABLE `user` (\n  `uid` int(11) NOT NULL COMMENT '用户id',\n  `name` varchar(10) DEFAULT NULL COMMENT '姓名',\n  `sex` tinyint(1) DEFAULT NULL COMMENT '性别',\n  `age` tinyint(2) DEFAULT NULL COMMENT '年龄',\n  `mobile` varchar(11) DEFAULT NULL COMMENT '手机号码',\n  `password` varchar(64) NOT NULL COMMENT '密码',\n  `register_time` datetime NOT NULL COMMENT '注册时间',\n  PRIMARY KEY (`uid`),\n  UNIQUE KEY `index_mobile` (`mobile`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nINSERT INTO `user` VALUES ('100', '张三', '1', '28', '13547521456', 'ASDAWQ@!#SDF@#$%XCF', '2016-03-30 17:47:51');\nINSERT INTO `user` VALUES ('101', '李四', '2', '35', '17025856329', '234ASD@#$@#$AFSDFRT', '2016-03-30 17:48:34');\nINSERT INTO `user` VALUES ('102', '王五', '1', '48', '15925874536', '#$%SDFSDR@#$%@#$#@', '2016-03-30 17:53:49');\n\n订单信息表\nCREATE TABLE `order` (\n  `order_id` int(11) NOT NULL COMMENT '订单编号',\n  `uid` int(11) DEFAULT NULL COMMENT '用户Id',\n  `amout` mediumtext NOT NULL COMMENT '订单金额(单位为分)',\n  `status` tinyint(2) DEFAULT NULL COMMENT '订单状态',\n  `order_time` datetime DEFAULT NULL COMMENT '订单时间',\n  PRIMARY KEY (`order_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nINSERT INTO `order` VALUES ('200', '100', '5899', '0', '2016-03-30 17:54:20');\nINSERT INTO `order` VALUES ('201', '100', '6799', '0', '2016-03-30 17:54:38');\nINSERT INTO `order` VALUES ('202', '101', '12699', '0', '2016-03-30 17:55:01');\n```\n数据库现在2张表的数据看起来是这样：\nuser表\n\n| uid        | name           | sex  | age | mobile | password | register_time |\n| ------------- |:-------------:| -----:|-----:|-----:|-----:|-----:|\n|100| 张三|  1  | 28|  13547521456| password | 2016-03-30 17:47:51 |\n|101 |李四 | 2 |  35 | 17025856329 | password | 2016-03-30 17:48:34 |\n|102| 王五  |1|   48  |15925874536 | password  | 2016-03-30 17:53:49 |\n\norder表\n\n| order_id        | uid           | amout  | status | order_time |\n| ------------- |:-------------:| -----:|-----:|-----:|-----:|\n|200| 100 | 5899|    0 |  2016-03-30 17:54:20|\n|201 | 100 | 6799 |   0  | 2016-03-30 17:54:38|\n|202 | 101 | 12699 |  0   | 2016-03-30 17:55:01|\n\n## 练习题\n\n查询所有用户的订单信息，订单信息不能为空，要求返回的字段有：用户姓名、手机号码、订单号、订单状态、订单金额。\n\n### left join VS right join\n规律：\n\n* A表 left join B表；则返回A表的所有符合条件(on条件、where条件)的记录。A表的字段不会为null，而B表没有对应记录时,字段值返回null。\n* B表 left join A表；则返回B表的所有符合条件(on条件、where条件)的记录。B表的字段不会为null，而A表没有对应记录时,字段值返回null。\n\n* A表 left join B表 等价于 B表 right join A表.\n* A表 right join B表 等价于 B表 left join A表.\n\n正确的SQL语句：\n```\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `user` RIGHT JOIN `order` ON `user`.uid=`order`.uid\n\n等价于\n\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `order` LEFT JOIN `user` ON `user`.uid=`order`.uid\n```\n结果集是：\n\n| name        | mobile           | order_id  |status|amout|\n| ------------- |:-------------:| -----:|-----:|-----:|\n|张三|  13547521456| 200| 0   |5899|\n|张三 | 13547521456 |201 |0  | 6799|\n|李四  |17025856329 |202 |0 |  12699|\n\n错误的SQL语句：\n```\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `user` LEFT JOIN `order` ON `user`.uid=`order`.uid\n\n等价于\n\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `order` RIGHT JOIN `user` ON `user`.uid=`order`.uid\n```\n结果集是：\n\n| name        | mobile           | order_id  |status|amout|\n| ------------- |:-------------:| -----:|-----:|-----:|\n|张三 | 13547521456| 200| 0   |5899|\n|张三  |13547521456 |201 |0   |6799|\n|李四  |17025856329 |202 |0   |12699|\n|王五  |15925874536 |null |null| null|\n\n可以看出错误的SQL语句中，查出了没有订单的用户“王五”\n\n### inner join\n规律：\n\n* A表 inner join B表；则返回A表和B表同时符合条件(on条件、where条件)的记录。\n\n```\n两种写法，后者使用的居多\n\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `order` INNER JOIN `user` ON `user`.uid=`order`.uid;\n\n等价于\n\nSELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n FROM `order`,`user` WHERE `user`.uid=`order`.uid;\n```\n\n### left outter join VS right outter join\n\nleft join 是left outer join的简写，left join默认是outer属性的。\n\n在某些数据库(如Oracle)中， left join 称为 left outer join；相应的right join 称为 right outter join\n\n### full join\n* 在某些数据库中， FULL JOIN 称为 FULL OUTER JOIN。\n* 只要其中某个表存在匹配，FULL JOIN 关键字就会返回行，意思是只需要有一个以上的表满足条件即可。\n* Oracle 、DB2、SQL Server、PostgreSQL 支持 Full JOIN，但是 MySQL 是不支持的。\n```\nMySQL使用FULL JOIN报错\n[Err] 1054 - Unknown column 'order.uid' in 'on clause'\n```\n* MySQL可以通过 LEFT JOIN + UNION + RIGHT JOIN 的方式 来实现Full JOIN。\n```\nselect `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n from `order` left join `user` on `user`.uid=`order`.uid\n union\nselect `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout\n from `order` right join `user` on `user`.uid=`order`.uid;\n```\n### cross join\n除了在FROM子句中使用逗号间隔连接的表外，SQL还支持另一种被称为交叉连接的操作，它们都返回被连接的两个表所有数据行的笛卡尔积，返回到的数据行数等于第一个表中符合查询条件的数据行数乘以第二个表中符合查询条件的数据行数。惟一的不同在于，交叉连接分开列名时，使用CROSS JOIN关键字而不是逗号。\n\n实际上，下面两个表达式是完全等价的。\n```\nSELECT  *  FROM  table1, table2 WHERE table1.name=table2.name;\nSELECT  *  FROM  table1  CROSS JOIN  table2 WHERE table1.name=table2.name;\n```\n在使用CROSS JOIN关键字交叉连接表时，因为生成的是两个表的笛卡尔积，因而不能使用ON关键字，只能在WHERE子句中定义搜索条件。\n\n事实上，直接使用CROSS JOIN很少得到想要的结果，但是，正如实例所示，作为查询的第一步，DBMS通常在FROM子句中，对连接的表进行CROSS JOIN，然后过滤得到的中间表。\n### union,union all\n在数据库中，union和union all关键字都是将两个结果集合并为一个，但这两者从使用和效率上来说都有所不同。\n\nunion在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。\n\n如：\n select * from test_union1\n   union\n select * from test_union2\n\n这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，如果表数据量大的话可能会导致用磁盘进行排序。而union all只是简单的将两个结果合并后就返回。这样，如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。从效率上说，union all要比union快很多，所以，如果可以确认合并的两个结果集中不包含重复的数据的话，那么就使用union all，\n\n如下：\nselect * from test_union1\nunion all\nselect * from test_union2\n\n使用 union 组合查询的结果集有两个最基本的规则：\n1。所有查询中的列数和列的顺序必须相同。\n2。数据类型必须兼容\n### Apache Hive连接查询\nHive支持连接查询，但有一些条件必须遵守，比如只支持相等查询，其它查询如不等式查询则不支持，还支持外连接，左半连接查询。另外Hive支持多于两个表以上的连接查询。\n* [Hive学习之连接查询](http://blog.csdn.net/skywalker_only/article/details/39205973)\n* [Hive JOIN使用详解](http://shiyanjun.cn/archives/588.html)\n### 结合explain进行执行分析\n* [MySQL EXPLAIN 命令详解学习](http://blog.csdn.net/mchdba/article/details/9190771)","slug":"SQL-improve-elegant-use-join-query","published":1,"updated":"2016-03-31T03:51:42.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimrk7x940002acnn8wfw1rgi","content":"<p>数据库中的表可通过键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。</p>\n<p>而在两个表之间建立关联关系，是不要求任何一个表的关联列(column)是主键的，这个关联列可以是任何类型的列，但是要求，两个表的关联列可以做关联关系的条件计算，为避免转换影响效率，两个关联列最好保持类型、长度一致。</p>\n<p>为方便说明，定义以下2张表：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户信息表</span><br><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">  `uid` int(11) NOT NULL COMMENT &apos;用户id&apos;,</span><br><span class=\"line\">  `name` varchar(10) DEFAULT NULL COMMENT &apos;姓名&apos;,</span><br><span class=\"line\">  `sex` tinyint(1) DEFAULT NULL COMMENT &apos;性别&apos;,</span><br><span class=\"line\">  `age` tinyint(2) DEFAULT NULL COMMENT &apos;年龄&apos;,</span><br><span class=\"line\">  `mobile` varchar(11) DEFAULT NULL COMMENT &apos;手机号码&apos;,</span><br><span class=\"line\">  `password` varchar(64) NOT NULL COMMENT &apos;密码&apos;,</span><br><span class=\"line\">  `register_time` datetime NOT NULL COMMENT &apos;注册时间&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`uid`),</span><br><span class=\"line\">  UNIQUE KEY `index_mobile` (`mobile`) USING BTREE</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO `user` VALUES (&apos;100&apos;, &apos;张三&apos;, &apos;1&apos;, &apos;28&apos;, &apos;13547521456&apos;, &apos;ASDAWQ@!#SDF@#$%XCF&apos;, &apos;2016-03-30 17:47:51&apos;);</span><br><span class=\"line\">INSERT INTO `user` VALUES (&apos;101&apos;, &apos;李四&apos;, &apos;2&apos;, &apos;35&apos;, &apos;17025856329&apos;, &apos;234ASD@#$@#$AFSDFRT&apos;, &apos;2016-03-30 17:48:34&apos;);</span><br><span class=\"line\">INSERT INTO `user` VALUES (&apos;102&apos;, &apos;王五&apos;, &apos;1&apos;, &apos;48&apos;, &apos;15925874536&apos;, &apos;#$%SDFSDR@#$%@#$#@&apos;, &apos;2016-03-30 17:53:49&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">订单信息表</span><br><span class=\"line\">CREATE TABLE `order` (</span><br><span class=\"line\">  `order_id` int(11) NOT NULL COMMENT &apos;订单编号&apos;,</span><br><span class=\"line\">  `uid` int(11) DEFAULT NULL COMMENT &apos;用户Id&apos;,</span><br><span class=\"line\">  `amout` mediumtext NOT NULL COMMENT &apos;订单金额(单位为分)&apos;,</span><br><span class=\"line\">  `status` tinyint(2) DEFAULT NULL COMMENT &apos;订单状态&apos;,</span><br><span class=\"line\">  `order_time` datetime DEFAULT NULL COMMENT &apos;订单时间&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`order_id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO `order` VALUES (&apos;200&apos;, &apos;100&apos;, &apos;5899&apos;, &apos;0&apos;, &apos;2016-03-30 17:54:20&apos;);</span><br><span class=\"line\">INSERT INTO `order` VALUES (&apos;201&apos;, &apos;100&apos;, &apos;6799&apos;, &apos;0&apos;, &apos;2016-03-30 17:54:38&apos;);</span><br><span class=\"line\">INSERT INTO `order` VALUES (&apos;202&apos;, &apos;101&apos;, &apos;12699&apos;, &apos;0&apos;, &apos;2016-03-30 17:55:01&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>数据库现在2张表的数据看起来是这样：<br>user表</p>\n<table>\n<thead>\n<tr>\n<th>uid</th>\n<th style=\"text-align:center\">name</th>\n<th style=\"text-align:right\">sex</th>\n<th style=\"text-align:right\">age</th>\n<th style=\"text-align:right\">mobile</th>\n<th style=\"text-align:right\">password</th>\n<th style=\"text-align:right\">register_time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">28</td>\n<td style=\"text-align:right\">13547521456</td>\n<td style=\"text-align:right\">password</td>\n<td style=\"text-align:right\">2016-03-30 17:47:51</td>\n</tr>\n<tr>\n<td>101</td>\n<td style=\"text-align:center\">李四</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:right\">35</td>\n<td style=\"text-align:right\">17025856329</td>\n<td style=\"text-align:right\">password</td>\n<td style=\"text-align:right\">2016-03-30 17:48:34</td>\n</tr>\n<tr>\n<td>102</td>\n<td style=\"text-align:center\">王五</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">48</td>\n<td style=\"text-align:right\">15925874536</td>\n<td style=\"text-align:right\">password</td>\n<td style=\"text-align:right\">2016-03-30 17:53:49</td>\n</tr>\n</tbody>\n</table>\n<p>order表</p>\n<table>\n<thead>\n<tr>\n<th>order_id</th>\n<th style=\"text-align:center\">uid</th>\n<th style=\"text-align:right\">amout</th>\n<th style=\"text-align:right\">status</th>\n<th style=\"text-align:right\">order_time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:right\">5899</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">2016-03-30 17:54:20</td>\n</tr>\n<tr>\n<td>201</td>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:right\">6799</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">2016-03-30 17:54:38</td>\n</tr>\n<tr>\n<td>202</td>\n<td style=\"text-align:center\">101</td>\n<td style=\"text-align:right\">12699</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">2016-03-30 17:55:01</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h2><p>查询所有用户的订单信息，订单信息不能为空，要求返回的字段有：用户姓名、手机号码、订单号、订单状态、订单金额。</p>\n<h3 id=\"left-join-VS-right-join\"><a href=\"#left-join-VS-right-join\" class=\"headerlink\" title=\"left join VS right join\"></a>left join VS right join</h3><p>规律：</p>\n<ul>\n<li>A表 left join B表；则返回A表的所有符合条件(on条件、where条件)的记录。A表的字段不会为null，而B表没有对应记录时,字段值返回null。</li>\n<li><p>B表 left join A表；则返回B表的所有符合条件(on条件、where条件)的记录。B表的字段不会为null，而A表没有对应记录时,字段值返回null。</p>\n</li>\n<li><p>A表 left join B表 等价于 B表 right join A表.</p>\n</li>\n<li>A表 right join B表 等价于 B表 left join A表.</li>\n</ul>\n<p>正确的SQL语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `user` RIGHT JOIN `order` ON `user`.uid=`order`.uid</span><br><span class=\"line\"></span><br><span class=\"line\">等价于</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `order` LEFT JOIN `user` ON `user`.uid=`order`.uid</span><br></pre></td></tr></table></figure></p>\n<p>结果集是：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th style=\"text-align:center\">mobile</th>\n<th style=\"text-align:right\">order_id</th>\n<th style=\"text-align:right\">status</th>\n<th style=\"text-align:right\">amout</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>张三</td>\n<td style=\"text-align:center\">13547521456</td>\n<td style=\"text-align:right\">200</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">5899</td>\n</tr>\n<tr>\n<td>张三</td>\n<td style=\"text-align:center\">13547521456</td>\n<td style=\"text-align:right\">201</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">6799</td>\n</tr>\n<tr>\n<td>李四</td>\n<td style=\"text-align:center\">17025856329</td>\n<td style=\"text-align:right\">202</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">12699</td>\n</tr>\n</tbody>\n</table>\n<p>错误的SQL语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `user` LEFT JOIN `order` ON `user`.uid=`order`.uid</span><br><span class=\"line\"></span><br><span class=\"line\">等价于</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `order` RIGHT JOIN `user` ON `user`.uid=`order`.uid</span><br></pre></td></tr></table></figure></p>\n<p>结果集是：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th style=\"text-align:center\">mobile</th>\n<th style=\"text-align:right\">order_id</th>\n<th style=\"text-align:right\">status</th>\n<th style=\"text-align:right\">amout</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>张三</td>\n<td style=\"text-align:center\">13547521456</td>\n<td style=\"text-align:right\">200</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">5899</td>\n</tr>\n<tr>\n<td>张三</td>\n<td style=\"text-align:center\">13547521456</td>\n<td style=\"text-align:right\">201</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">6799</td>\n</tr>\n<tr>\n<td>李四</td>\n<td style=\"text-align:center\">17025856329</td>\n<td style=\"text-align:right\">202</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">12699</td>\n</tr>\n<tr>\n<td>王五</td>\n<td style=\"text-align:center\">15925874536</td>\n<td style=\"text-align:right\">null</td>\n<td style=\"text-align:right\">null</td>\n<td style=\"text-align:right\">null</td>\n</tr>\n</tbody>\n</table>\n<p>可以看出错误的SQL语句中，查出了没有订单的用户“王五”</p>\n<h3 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h3><p>规律：</p>\n<ul>\n<li>A表 inner join B表；则返回A表和B表同时符合条件(on条件、where条件)的记录。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两种写法，后者使用的居多</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `order` INNER JOIN `user` ON `user`.uid=`order`.uid;</span><br><span class=\"line\"></span><br><span class=\"line\">等价于</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `order`,`user` WHERE `user`.uid=`order`.uid;</span><br></pre></td></tr></table></figure>\n<h3 id=\"left-outter-join-VS-right-outter-join\"><a href=\"#left-outter-join-VS-right-outter-join\" class=\"headerlink\" title=\"left outter join VS right outter join\"></a>left outter join VS right outter join</h3><p>left join 是left outer join的简写，left join默认是outer属性的。</p>\n<p>在某些数据库(如Oracle)中， left join 称为 left outer join；相应的right join 称为 right outter join</p>\n<h3 id=\"full-join\"><a href=\"#full-join\" class=\"headerlink\" title=\"full join\"></a>full join</h3><ul>\n<li>在某些数据库中， FULL JOIN 称为 FULL OUTER JOIN。</li>\n<li>只要其中某个表存在匹配，FULL JOIN 关键字就会返回行，意思是只需要有一个以上的表满足条件即可。</li>\n<li><p>Oracle 、DB2、SQL Server、PostgreSQL 支持 Full JOIN，但是 MySQL 是不支持的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MySQL使用FULL JOIN报错</span><br><span class=\"line\">[Err] 1054 - Unknown column &apos;order.uid&apos; in &apos;on clause&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MySQL可以通过 LEFT JOIN + UNION + RIGHT JOIN 的方式 来实现Full JOIN。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> from `order` left join `user` on `user`.uid=`order`.uid</span><br><span class=\"line\"> union</span><br><span class=\"line\">select `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> from `order` right join `user` on `user`.uid=`order`.uid;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"cross-join\"><a href=\"#cross-join\" class=\"headerlink\" title=\"cross join\"></a>cross join</h3><p>除了在FROM子句中使用逗号间隔连接的表外，SQL还支持另一种被称为交叉连接的操作，它们都返回被连接的两个表所有数据行的笛卡尔积，返回到的数据行数等于第一个表中符合查询条件的数据行数乘以第二个表中符合查询条件的数据行数。惟一的不同在于，交叉连接分开列名时，使用CROSS JOIN关键字而不是逗号。</p>\n<p>实际上，下面两个表达式是完全等价的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT  *  FROM  table1, table2 WHERE table1.name=table2.name;</span><br><span class=\"line\">SELECT  *  FROM  table1  CROSS JOIN  table2 WHERE table1.name=table2.name;</span><br></pre></td></tr></table></figure></p>\n<p>在使用CROSS JOIN关键字交叉连接表时，因为生成的是两个表的笛卡尔积，因而不能使用ON关键字，只能在WHERE子句中定义搜索条件。</p>\n<p>事实上，直接使用CROSS JOIN很少得到想要的结果，但是，正如实例所示，作为查询的第一步，DBMS通常在FROM子句中，对连接的表进行CROSS JOIN，然后过滤得到的中间表。</p>\n<h3 id=\"union-union-all\"><a href=\"#union-union-all\" class=\"headerlink\" title=\"union,union all\"></a>union,union all</h3><p>在数据库中，union和union all关键字都是将两个结果集合并为一个，但这两者从使用和效率上来说都有所不同。</p>\n<p>union在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。</p>\n<p>如：<br> select <em> from test_union1<br>   union<br> select </em> from test_union2</p>\n<p>这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，如果表数据量大的话可能会导致用磁盘进行排序。而union all只是简单的将两个结果合并后就返回。这样，如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。从效率上说，union all要比union快很多，所以，如果可以确认合并的两个结果集中不包含重复的数据的话，那么就使用union all，</p>\n<p>如下：<br>select <em> from test_union1<br>union all<br>select </em> from test_union2</p>\n<p>使用 union 组合查询的结果集有两个最基本的规则：<br>1。所有查询中的列数和列的顺序必须相同。<br>2。数据类型必须兼容</p>\n<h3 id=\"Apache-Hive连接查询\"><a href=\"#Apache-Hive连接查询\" class=\"headerlink\" title=\"Apache Hive连接查询\"></a>Apache Hive连接查询</h3><p>Hive支持连接查询，但有一些条件必须遵守，比如只支持相等查询，其它查询如不等式查询则不支持，还支持外连接，左半连接查询。另外Hive支持多于两个表以上的连接查询。</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/skywalker_only/article/details/39205973\" target=\"_blank\" rel=\"external\">Hive学习之连接查询</a></li>\n<li><a href=\"http://shiyanjun.cn/archives/588.html\" target=\"_blank\" rel=\"external\">Hive JOIN使用详解</a><h3 id=\"结合explain进行执行分析\"><a href=\"#结合explain进行执行分析\" class=\"headerlink\" title=\"结合explain进行执行分析\"></a>结合explain进行执行分析</h3></li>\n<li><a href=\"http://blog.csdn.net/mchdba/article/details/9190771\" target=\"_blank\" rel=\"external\">MySQL EXPLAIN 命令详解学习</a></li>\n</ul>\n","excerpt":"","more":"<p>数据库中的表可通过键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。</p>\n<p>而在两个表之间建立关联关系，是不要求任何一个表的关联列(column)是主键的，这个关联列可以是任何类型的列，但是要求，两个表的关联列可以做关联关系的条件计算，为避免转换影响效率，两个关联列最好保持类型、长度一致。</p>\n<p>为方便说明，定义以下2张表：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户信息表</span><br><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">  `uid` int(11) NOT NULL COMMENT &apos;用户id&apos;,</span><br><span class=\"line\">  `name` varchar(10) DEFAULT NULL COMMENT &apos;姓名&apos;,</span><br><span class=\"line\">  `sex` tinyint(1) DEFAULT NULL COMMENT &apos;性别&apos;,</span><br><span class=\"line\">  `age` tinyint(2) DEFAULT NULL COMMENT &apos;年龄&apos;,</span><br><span class=\"line\">  `mobile` varchar(11) DEFAULT NULL COMMENT &apos;手机号码&apos;,</span><br><span class=\"line\">  `password` varchar(64) NOT NULL COMMENT &apos;密码&apos;,</span><br><span class=\"line\">  `register_time` datetime NOT NULL COMMENT &apos;注册时间&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`uid`),</span><br><span class=\"line\">  UNIQUE KEY `index_mobile` (`mobile`) USING BTREE</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO `user` VALUES (&apos;100&apos;, &apos;张三&apos;, &apos;1&apos;, &apos;28&apos;, &apos;13547521456&apos;, &apos;ASDAWQ@!#SDF@#$%XCF&apos;, &apos;2016-03-30 17:47:51&apos;);</span><br><span class=\"line\">INSERT INTO `user` VALUES (&apos;101&apos;, &apos;李四&apos;, &apos;2&apos;, &apos;35&apos;, &apos;17025856329&apos;, &apos;234ASD@#$@#$AFSDFRT&apos;, &apos;2016-03-30 17:48:34&apos;);</span><br><span class=\"line\">INSERT INTO `user` VALUES (&apos;102&apos;, &apos;王五&apos;, &apos;1&apos;, &apos;48&apos;, &apos;15925874536&apos;, &apos;#$%SDFSDR@#$%@#$#@&apos;, &apos;2016-03-30 17:53:49&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">订单信息表</span><br><span class=\"line\">CREATE TABLE `order` (</span><br><span class=\"line\">  `order_id` int(11) NOT NULL COMMENT &apos;订单编号&apos;,</span><br><span class=\"line\">  `uid` int(11) DEFAULT NULL COMMENT &apos;用户Id&apos;,</span><br><span class=\"line\">  `amout` mediumtext NOT NULL COMMENT &apos;订单金额(单位为分)&apos;,</span><br><span class=\"line\">  `status` tinyint(2) DEFAULT NULL COMMENT &apos;订单状态&apos;,</span><br><span class=\"line\">  `order_time` datetime DEFAULT NULL COMMENT &apos;订单时间&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`order_id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO `order` VALUES (&apos;200&apos;, &apos;100&apos;, &apos;5899&apos;, &apos;0&apos;, &apos;2016-03-30 17:54:20&apos;);</span><br><span class=\"line\">INSERT INTO `order` VALUES (&apos;201&apos;, &apos;100&apos;, &apos;6799&apos;, &apos;0&apos;, &apos;2016-03-30 17:54:38&apos;);</span><br><span class=\"line\">INSERT INTO `order` VALUES (&apos;202&apos;, &apos;101&apos;, &apos;12699&apos;, &apos;0&apos;, &apos;2016-03-30 17:55:01&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>数据库现在2张表的数据看起来是这样：<br>user表</p>\n<table>\n<thead>\n<tr>\n<th>uid</th>\n<th style=\"text-align:center\">name</th>\n<th style=\"text-align:right\">sex</th>\n<th style=\"text-align:right\">age</th>\n<th style=\"text-align:right\">mobile</th>\n<th style=\"text-align:right\">password</th>\n<th style=\"text-align:right\">register_time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">28</td>\n<td style=\"text-align:right\">13547521456</td>\n<td style=\"text-align:right\">password</td>\n<td style=\"text-align:right\">2016-03-30 17:47:51</td>\n</tr>\n<tr>\n<td>101</td>\n<td style=\"text-align:center\">李四</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:right\">35</td>\n<td style=\"text-align:right\">17025856329</td>\n<td style=\"text-align:right\">password</td>\n<td style=\"text-align:right\">2016-03-30 17:48:34</td>\n</tr>\n<tr>\n<td>102</td>\n<td style=\"text-align:center\">王五</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">48</td>\n<td style=\"text-align:right\">15925874536</td>\n<td style=\"text-align:right\">password</td>\n<td style=\"text-align:right\">2016-03-30 17:53:49</td>\n</tr>\n</tbody>\n</table>\n<p>order表</p>\n<table>\n<thead>\n<tr>\n<th>order_id</th>\n<th style=\"text-align:center\">uid</th>\n<th style=\"text-align:right\">amout</th>\n<th style=\"text-align:right\">status</th>\n<th style=\"text-align:right\">order_time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:right\">5899</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">2016-03-30 17:54:20</td>\n</tr>\n<tr>\n<td>201</td>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:right\">6799</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">2016-03-30 17:54:38</td>\n</tr>\n<tr>\n<td>202</td>\n<td style=\"text-align:center\">101</td>\n<td style=\"text-align:right\">12699</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">2016-03-30 17:55:01</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h2><p>查询所有用户的订单信息，订单信息不能为空，要求返回的字段有：用户姓名、手机号码、订单号、订单状态、订单金额。</p>\n<h3 id=\"left-join-VS-right-join\"><a href=\"#left-join-VS-right-join\" class=\"headerlink\" title=\"left join VS right join\"></a>left join VS right join</h3><p>规律：</p>\n<ul>\n<li>A表 left join B表；则返回A表的所有符合条件(on条件、where条件)的记录。A表的字段不会为null，而B表没有对应记录时,字段值返回null。</li>\n<li><p>B表 left join A表；则返回B表的所有符合条件(on条件、where条件)的记录。B表的字段不会为null，而A表没有对应记录时,字段值返回null。</p>\n</li>\n<li><p>A表 left join B表 等价于 B表 right join A表.</p>\n</li>\n<li>A表 right join B表 等价于 B表 left join A表.</li>\n</ul>\n<p>正确的SQL语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `user` RIGHT JOIN `order` ON `user`.uid=`order`.uid</span><br><span class=\"line\"></span><br><span class=\"line\">等价于</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `order` LEFT JOIN `user` ON `user`.uid=`order`.uid</span><br></pre></td></tr></table></figure></p>\n<p>结果集是：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th style=\"text-align:center\">mobile</th>\n<th style=\"text-align:right\">order_id</th>\n<th style=\"text-align:right\">status</th>\n<th style=\"text-align:right\">amout</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>张三</td>\n<td style=\"text-align:center\">13547521456</td>\n<td style=\"text-align:right\">200</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">5899</td>\n</tr>\n<tr>\n<td>张三</td>\n<td style=\"text-align:center\">13547521456</td>\n<td style=\"text-align:right\">201</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">6799</td>\n</tr>\n<tr>\n<td>李四</td>\n<td style=\"text-align:center\">17025856329</td>\n<td style=\"text-align:right\">202</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">12699</td>\n</tr>\n</tbody>\n</table>\n<p>错误的SQL语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `user` LEFT JOIN `order` ON `user`.uid=`order`.uid</span><br><span class=\"line\"></span><br><span class=\"line\">等价于</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `order` RIGHT JOIN `user` ON `user`.uid=`order`.uid</span><br></pre></td></tr></table></figure></p>\n<p>结果集是：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th style=\"text-align:center\">mobile</th>\n<th style=\"text-align:right\">order_id</th>\n<th style=\"text-align:right\">status</th>\n<th style=\"text-align:right\">amout</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>张三</td>\n<td style=\"text-align:center\">13547521456</td>\n<td style=\"text-align:right\">200</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">5899</td>\n</tr>\n<tr>\n<td>张三</td>\n<td style=\"text-align:center\">13547521456</td>\n<td style=\"text-align:right\">201</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">6799</td>\n</tr>\n<tr>\n<td>李四</td>\n<td style=\"text-align:center\">17025856329</td>\n<td style=\"text-align:right\">202</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">12699</td>\n</tr>\n<tr>\n<td>王五</td>\n<td style=\"text-align:center\">15925874536</td>\n<td style=\"text-align:right\">null</td>\n<td style=\"text-align:right\">null</td>\n<td style=\"text-align:right\">null</td>\n</tr>\n</tbody>\n</table>\n<p>可以看出错误的SQL语句中，查出了没有订单的用户“王五”</p>\n<h3 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h3><p>规律：</p>\n<ul>\n<li>A表 inner join B表；则返回A表和B表同时符合条件(on条件、where条件)的记录。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两种写法，后者使用的居多</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `order` INNER JOIN `user` ON `user`.uid=`order`.uid;</span><br><span class=\"line\"></span><br><span class=\"line\">等价于</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> FROM `order`,`user` WHERE `user`.uid=`order`.uid;</span><br></pre></td></tr></table></figure>\n<h3 id=\"left-outter-join-VS-right-outter-join\"><a href=\"#left-outter-join-VS-right-outter-join\" class=\"headerlink\" title=\"left outter join VS right outter join\"></a>left outter join VS right outter join</h3><p>left join 是left outer join的简写，left join默认是outer属性的。</p>\n<p>在某些数据库(如Oracle)中， left join 称为 left outer join；相应的right join 称为 right outter join</p>\n<h3 id=\"full-join\"><a href=\"#full-join\" class=\"headerlink\" title=\"full join\"></a>full join</h3><ul>\n<li>在某些数据库中， FULL JOIN 称为 FULL OUTER JOIN。</li>\n<li>只要其中某个表存在匹配，FULL JOIN 关键字就会返回行，意思是只需要有一个以上的表满足条件即可。</li>\n<li><p>Oracle 、DB2、SQL Server、PostgreSQL 支持 Full JOIN，但是 MySQL 是不支持的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MySQL使用FULL JOIN报错</span><br><span class=\"line\">[Err] 1054 - Unknown column &apos;order.uid&apos; in &apos;on clause&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MySQL可以通过 LEFT JOIN + UNION + RIGHT JOIN 的方式 来实现Full JOIN。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> from `order` left join `user` on `user`.uid=`order`.uid</span><br><span class=\"line\"> union</span><br><span class=\"line\">select `user`.`name`,`user`.mobile,`order`.order_id,`order`.`status`,`order`.amout</span><br><span class=\"line\"> from `order` right join `user` on `user`.uid=`order`.uid;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"cross-join\"><a href=\"#cross-join\" class=\"headerlink\" title=\"cross join\"></a>cross join</h3><p>除了在FROM子句中使用逗号间隔连接的表外，SQL还支持另一种被称为交叉连接的操作，它们都返回被连接的两个表所有数据行的笛卡尔积，返回到的数据行数等于第一个表中符合查询条件的数据行数乘以第二个表中符合查询条件的数据行数。惟一的不同在于，交叉连接分开列名时，使用CROSS JOIN关键字而不是逗号。</p>\n<p>实际上，下面两个表达式是完全等价的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT  *  FROM  table1, table2 WHERE table1.name=table2.name;</span><br><span class=\"line\">SELECT  *  FROM  table1  CROSS JOIN  table2 WHERE table1.name=table2.name;</span><br></pre></td></tr></table></figure></p>\n<p>在使用CROSS JOIN关键字交叉连接表时，因为生成的是两个表的笛卡尔积，因而不能使用ON关键字，只能在WHERE子句中定义搜索条件。</p>\n<p>事实上，直接使用CROSS JOIN很少得到想要的结果，但是，正如实例所示，作为查询的第一步，DBMS通常在FROM子句中，对连接的表进行CROSS JOIN，然后过滤得到的中间表。</p>\n<h3 id=\"union-union-all\"><a href=\"#union-union-all\" class=\"headerlink\" title=\"union,union all\"></a>union,union all</h3><p>在数据库中，union和union all关键字都是将两个结果集合并为一个，但这两者从使用和效率上来说都有所不同。</p>\n<p>union在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。</p>\n<p>如：<br> select <em> from test_union1<br>   union<br> select </em> from test_union2</p>\n<p>这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，如果表数据量大的话可能会导致用磁盘进行排序。而union all只是简单的将两个结果合并后就返回。这样，如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。从效率上说，union all要比union快很多，所以，如果可以确认合并的两个结果集中不包含重复的数据的话，那么就使用union all，</p>\n<p>如下：<br>select <em> from test_union1<br>union all<br>select </em> from test_union2</p>\n<p>使用 union 组合查询的结果集有两个最基本的规则：<br>1。所有查询中的列数和列的顺序必须相同。<br>2。数据类型必须兼容</p>\n<h3 id=\"Apache-Hive连接查询\"><a href=\"#Apache-Hive连接查询\" class=\"headerlink\" title=\"Apache Hive连接查询\"></a>Apache Hive连接查询</h3><p>Hive支持连接查询，但有一些条件必须遵守，比如只支持相等查询，其它查询如不等式查询则不支持，还支持外连接，左半连接查询。另外Hive支持多于两个表以上的连接查询。</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/skywalker_only/article/details/39205973\">Hive学习之连接查询</a></li>\n<li><a href=\"http://shiyanjun.cn/archives/588.html\">Hive JOIN使用详解</a><h3 id=\"结合explain进行执行分析\"><a href=\"#结合explain进行执行分析\" class=\"headerlink\" title=\"结合explain进行执行分析\"></a>结合explain进行执行分析</h3></li>\n<li><a href=\"http://blog.csdn.net/mchdba/article/details/9190771\">MySQL EXPLAIN 命令详解学习</a></li>\n</ul>\n"},{"title":"JOOQ 3.6.1 使用总结：从入门到提高","date":"2016-04-01T09:38:14.463Z","description":null,"_content":"2016年后换了一家公司干，后台ORM层用的是JOOQ，完全陌生的东西。干这一行越久，越觉得有更多有趣的新事物需要去探索。想起小说[《火星救援》](https://book.douban.com/subject/26586492/)，主人Mark侥幸在风暴中幸存后，一步步的将自己救出困境，遇到的难题或大或小，皆有优雅解决之法。<!--more-->一切看似偶然蹊跷，其实与Mark的长期相关储备分不开。所谓艺多不压身，应该在有限的时间里，得到更多的成长，以期待机会来时接得住。\n\n下文中的学习示例代码，已经整理完毕：[https://github.com/amao12580/JOOQ](https://github.com/amao12580/JOOQ)\n\n## 什么是JOOQ？\n[JOOQ](http://www.jooq.org/)，全称Java Object Oriented Querying，即面向Java对象查询。它是[Data Geekery](http://www.datageekery.com/)公司研发的DA方案(Data Access Layer)，主要解决两个问题：\n\n1. Hibernate的抽象使得我们离SQL太远，对SQL的掌控力度弱\n2. JDBC又过于嘈杂，需要干的事情太多\n\nJOOQ希望干的就是在上述两者中寻找一个最佳的平衡。它依据数据库中的表生成DA相关的代码，开发者将生成的代码引入项目中即可使用。\n\n有好几个版本\n\n* OpenSource\n* Express\n* Professional\n* Enterprise\n\nOpenSource版本针对开源数据库，已经够用了。其它的几个版本针对非开源数据库，差异在于不同的后续支持。\n\nJOOQ应用在DAO层中，原理是：在DAO层使用Java语言编写SQL语句，内部转换成数据库可执行的SQL语句，通过数据库驱动，提交SQL语句到RDBMS执行，接受处理结果，转换为POJO，返回到应用层。\n\n它与Hibernate不同，不依赖使用字符串变量在Java代码中拼接SQL语句。在复杂SQL语句中，与变量的组合拼接时，SQL被割裂成多个部分，失去了宝贵的可读性，这简直是噩梦。而且Hibernate饱受诟病的连接查询配置复杂以及HQL语法的问题，在JOOQ中不复存在。\n\n它与Mybatis不同，不依赖繁琐分散的XML进行SQL预定义。代码与SQL语句的分离，初衷是为了解决SQL嵌入代码时带来不直观的复杂性，但是分离的代价是维护工作倍增以及类型转换问题，经常遭遇到应用层代码变更，而XML定义未同步变更，IDE几乎无法解决。又或者开发人员改动一个XML文件，却意外影响多处上层代码，而这个问题很难避免。\n\n更进一步的，JOOQ提供原生的类型安全转换，以及POJO维护，免去大量一次性代码的编写。当然，你也可以使用Eclipse[代码生成插件](http://my.oschina.net/lujianing/blog/200135)解决这个问题，但是如果ORM能自动解决(结合Maven Plugin)，为什么拒绝呢？\n\n使用这种DAO模式，可以通过类的方式来进行数据库访问了。而且对SQL控制粒度加大的同时，维护工作并没有因此倍增，这对于开发人员是更好的解决方案，也是未来的趋势。\n\n```\n使用JOOQ进行2张表内连接查询示例\n\n// Typesafely execute the SQL statement directly with jOOQ\nResult<Record3<String, String, String>> result =\ncreate.select(BOOK.TITLE, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)\n    .from(BOOK)\n    .join(AUTHOR)\n    .on(BOOK.AUTHOR_ID.equal(AUTHOR.ID))\n    .where(BOOK.PUBLISHED_IN.equal(1948))\n    .fetch();\n```\n\n### VS 主流ORM框架\n* [JOOQ vs. Hibernate: When to Choose Which](http://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/)\n* [SQL Templating with jOOQ or MyBatis](http://blog.jooq.org/2013/07/13/sql-templating-with-jooq-or-mybatis/)\n### 优势和局限性\n\n优势\n\n* JOOQ 高效的合并了复杂SQL、[类型安全](http://blog.jooq.org/2015/05/26/type-safe-queries-for-jpas-native-query-api/)、[源码生成](#Code-Generation)、Active Records、存储过程以及高级数据类型的 Java 类库。支持DB2, Derby, Ingres, H2, HSQLDB, MySQL, Oracle, Postgres, SQLite, SQL Server, Sybase。\n\n局限性\n\n* 开发人员需要转换思维，接受新事物，May be better？\n\n## 入门篇\n### With Maven\n```\n<!--MySQL JDBC driver, 数据库迁移等情况下需要. -->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.36</version>\n</dependency>\n\n<!--如果不将该包导入, 编译会报错, 有人遇到了同样的问题.\nhttps://code.google.com/p/jsonrpc4j/issues/detail?id=21-->\n<dependency>\n    <groupId>javax.portlet</groupId>\n    <artifactId>portlet-api</artifactId>\n    <version>2.0</version>\n    <scope>provided</scope>\n</dependency>\n```\n### Code Generation\n\n```\n<!--数据库schema代码生成器 -->\n<dependency>\n    <groupId>org.jooq</groupId>\n    <artifactId>jooq-codegen</artifactId>\n    <version>3.6.1</version>\n</dependency>\n\n<!--数据库代码生成的插件 -->\n<plugin>\n    <!-- Specify the maven code generator plugin -->\n    <groupId>org.jooq</groupId>\n    <artifactId>jooq-codegen-maven</artifactId>\n    <version>3.6.1</version>\n    <!-- The plugin should hook into the generate goal -->\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <!-- JDBC connection parameters -->\n        <jdbc>\n            <driver>com.mysql.jdbc.Driver</driver>\n            <url>${db.url}</url>\n            <user>${db.username}</user>\n            <password>${db.password}</password>\n        </jdbc>\n        <!-- Generator parameters -->\n        <generator>\n            <database>\n                <name>org.jooq.util.mysql.MySQLDatabase</name>\n                <includes>.*</includes>\n                <inputSchema>${db.schema}</inputSchema>\n                <forcedTypes>\n                    <forcedType>\n                        <name>BOOLEAN</name>\n                        <expression>.*\\.HANDMADE</expression>\n                        <types>.*</types>\n                    </forcedType>\n                </forcedTypes>\n            </database>\n            <target>\n                <packageName>com.study.jooq.common.generated</packageName>\n                <directory>src/main/java</directory>\n            </target>\n        </generator>\n    </configuration>\n</plugin>\n```\n### With Flyway\n\nFlyway 是独立于数据库的应用、管理并跟踪数据库变更的数据库版本管理工具。\n\n[Flyway， 数据库Schema管理利器](http://www.cnblogs.com/huang0925/p/4409506.html)\n\n在pom.xml的配置\n```\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\n    <!--防止maven改动IDE的language level -->\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n\n    <!--数据库迁移所用的参数 -->\n    <db.url>jdbc:mysql://localhost:3306</db.url>\n    <db.username>root</db.username>\n    <db.password>zhilaiadmin</db.password>\n    <db.schema>study</db.schema>\n</properties>\n\n<!--数据库迁移, 同步的插件 -->\n<plugin>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-maven-plugin</artifactId>\n    <version>3.0</version>\n    <!-- Note that we're executing the Flyway plugin in the \"generate-sources\" phase -->\n    <executions>\n        <execution>\n            <phase>generate-sources</phase>\n            <goals>\n                <goal>migrate</goal>\n            </goals>\n        </execution>\n    </executions>\n    <!-- Note that we need to prefix the db/migration path with filesystem:\n    to prevent Flyway from looking for our migration scripts only on the classpath -->\n    <configuration>\n        <url>${db.url}</url>\n        <user>${db.username}</user>\n        <password>${db.password}</password>\n        <encoding>${project.build.sourceEncoding}</encoding>\n        <schemas>\n            <schema>${db.schema}</schema>\n        </schemas>\n        <locations>\n            <location>filesystem:src/main/resources/db/migration</location>\n        </locations>\n    </configuration>\n</plugin>\n```\n在工程：src/main/resources/db/migration目录下，没有目录文件夹时需要先创建文件夹。放入数据库初始化SQL脚本：V1__init_database.sql。注意在maven中配置的db.schema=study，表明需要使用的数据库名称是study，study需要事先不存在。\n\n执行maven -clean、maven -install成功后，发现数据库有了新的数据库study，并且该数据库有了order、user、schema_version三张表，user、order是我们在脚本中定义需要生成的表，而schema_version是flyway生成的，维护数据库版本升级时的信息。对应的在代码中，生成了三个POJO。\n\n代码生成示例：\n![IDEA使用JOOQ自动生成代码](/img/jooq-flyway.png)\n\n### With HikariCp\nHikariCP号称是现在性能最好的JDBC连接池组件，具体的性能到底如何，我也没有仔细的测试过，不过从它现在的发展来看，其可能确实如它宣传的那样其性能高过目前所有的连接池组件。之前对连接池的记忆一直都是C3P0、DBCP、BoneCP，这三者中BoneCP的性能是最好的，C3P0的性能在现在来说确实是非常差的了，好像C3P0很久都没有更新了，所以我们应该杜绝在项目中使用C3P0，至于是否要使用HikariCP，我觉得可以尝试。HikariCP毕竟是才出来不久，其性能到底如何，也需要实践的检验，若是担心新东西有坑，我推荐使用BoneCP。Spring现在也集成了HikariCP，所以我觉得很有尝试它的必要。前不久我在项目中使用了HikariCP，也没出现什么问题，运行比较稳定。\n\nHikariCP在github上的地址：[https://github.com/brettwooldridge/HikariCP](https://github.com/brettwooldridge/HikariCP)\n\n[为什么HikariCP被号称为性能最好的Java数据库连接池，如何配置使用?](http://blog.csdn.net/clementad/article/details/46928621)\n\n\n```\n<!--JDBC连接池 -->\n<dependency>\n    <groupId>com.zaxxer</groupId>\n    <artifactId>HikariCP</artifactId>\n    <version>2.4.0</version>\n</dependency>\n```\n### 简单的CRUD\n为保持example的干净与轻便，不使用Spring进行ORM层的管理，我采用[ARM](http://www.oschina.net/question/12_10706)的方式来管理SQL链接，在try with resource块结束后自动释放SQL链接。\n\n有需要与Spring进行整合的，Follow这篇文章吧！\n[Using JOOQ with Spring and Apache DBCP](http://www.jooq.org/doc/3.7/manual/getting-started/tutorials/jooq-with-spring/)\n\n```\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    int uid =180;\n\n    //add\n    UserRecord userRecord=create.newRecord(USER);\n    userRecord.setAge((byte) 18);\n    userRecord.setMobile(\"15985236985\");\n    userRecord.setName(\"赵六\");\n    userRecord.setUid(uid);\n    userRecord.setSex((byte) 1);\n    userRecord.setPassword(String.valueOf(System.nanoTime()));\n    userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));\n    int insertRet=userRecord.insert();//执行insert sql\n    //userRecord.store();//可能会执行insert，也有可能执行update，文档说明的很清晰\n    //userRecord.refresh();//从数据库重新加载该记录\n    log.info(\"insertRet:{}\", insertRet);\n\n    //index\n    int createIndexRet=create.createIndex(\"user_index_mobile_unique\")\n            .on(USER, USER.MOBILE)\n            .execute();//为手机号码字段创建唯一索引\n    int dropIndexRet=create.dropIndex(\"user_index_mobile_unique\")\n            .on(USER)\n            .execute();//删除索引\n    log.info(\"dropIndexRet:{},createIndexRet:{}\", dropIndexRet, createIndexRet);\n\n    //select\n    Record record=create.select(USER.NAME,USER.UID)\n            .from(USER)\n            .where(USER.MOBILE.eq(\"15985236985\"))\n            .limit(1)\n            .fetchOne();\n    log.info(\"姓名:{}，uid:{}\", record.getValue(USER.NAME), record.getValue(USER.UID));\n\n    Result<UserRecord> userRecords=create.selectFrom(USER)\n            .where(USER.SEX.eq((byte) 1).and(USER.MOBILE.like(\"159%\")))\n            .orderBy(USER.MOBILE.asc()).limit(0, 20).fetch();\n\n    for (UserRecord ur:userRecords){\n        log.info(\"mobile:{},uid:{},registerTime:{}\", ur.getMobile(), ur.getUid(), ur.getRegisterTime().getTime());\n    }\n\n    //delete\n    int deleteRecordRet=create.deleteFrom(USER).where(USER.UID.eq(uid)).execute();\n    log.info(\"deleteRecordRet:{}\", deleteRecordRet);\n}\n\n日志打印信息：\n21:01:20.009 INFO  com.zaxxer.hikari.HikariDataSource 72 <init> - Hikari pool HikariPool-0 is starting.\n21:01:20.561 INFO  org.jooq.tools.JooqLogger 331 info -\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@  @@        @@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@\n@@@@@@@@@@@@@@@@  @@  @@    @@@@@@@@@@\n@@@@@@@@@@  @@@@  @@  @@    @@@@@@@@@@\n@@@@@@@@@@        @@        @@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@        @@        @@@@@@@@@@\n@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@\n@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@\n@@@@@@@@@@        @@  @  @  @@@@@@@@@@\n@@@@@@@@@@        @@        @@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  Thank you for using jOOQ 3.6.1\n\n21:01:20.593 INFO  com.study.jooq.model.Example 42 base - insertRet:1\n21:01:21.197 INFO  com.study.jooq.model.Example 51 base - dropIndexRet:0,createIndexRet:0\n21:01:21.278 INFO  com.study.jooq.model.Example 59 base - 姓名:赵六，uid:180\n21:01:21.282 INFO  com.study.jooq.model.Example 66 base - mobile:15925874536,uid:102,registerTime:1459331629000\n21:01:21.282 INFO  com.study.jooq.model.Example 66 base - mobile:15985236985,uid:180,registerTime:1459429281000\n21:01:21.285 INFO  com.study.jooq.model.Example 71 base - deleteRecordRet:1\n21:01:21.285 INFO  com.zaxxer.hikari.pool.HikariPool 242 shutdown - Hikari pool HikariPool-0 is shutting down.\n21:01:21.331 INFO  com.zaxxer.hikari.util.ConcurrentBag 197 add - ConcurrentBag has been closed, ignoring add()\n```\n## 进阶篇\n### 事务\n```\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    final int[] uid = new int[1];\n\n    //transaction\n\n    create.transaction(configuration -> {\n        //add\n        UserRecord userRecord=create.newRecord(USER);\n        userRecord.setAge((byte) 18);\n        userRecord.setMobile(\"18525874539\");\n        userRecord.setName(\"赵六\");\n        userRecord.setSex((byte) 1);\n        userRecord.setPassword(String.valueOf(System.nanoTime()));\n        userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));\n        int insertUserRet=userRecord.insert();//执行insert sql\n        uid[0] =userRecord.getUid();\n        log.info(\"insertUserRet:{}\", insertUserRet);\n        //add\n        OrderRecord orderRecord=create.newRecord(ORDER);\n        orderRecord.setUid(userRecord.getUid());\n        orderRecord.setAmout(25000l);\n        orderRecord.setOrderId(new BigDecimal(System.nanoTime()).intValue());\n        orderRecord.setOrderTime(new Timestamp(System.currentTimeMillis()));\n        orderRecord.setStatus((byte)0);\n        int insertOrderRet=orderRecord.insert();//执行insert sql\n        log.info(\"insertOrderRet:{}\", insertOrderRet);\n    });\n}\n\n12:51:14.724 INFO  com.study.jooq.model.Example 90 lambda$advance$0 - insertUserRet:1\n12:51:14.743 INFO  com.study.jooq.model.Example 99 lambda$advance$0 - insertOrderRet:1\n```\n### 连接查询\n在处理复杂SQL时，JOOQ的思路是由Java代码以[链式编程](http://www.jianshu.com/p/540711c1a507)的方式来解决可读性的问题。\n\n下文中的查询语句，等价于：\nselect `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time`\n    from `study`.`user` left outer join `study`.`order`\n    on `study`.`user`.`uid` = `study`.`order`.`uid`\n    where (`study`.`user`.`uid` = ? and `study`.`order`.`amout` >= ?)\n    limit ?\n可以发现SQL语句与代码保持了很高的相似性，可读性几乎没有损失。\n\n其他的特性：group by与having、union、union all也都是在api级别支持的。\n```\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    int uid=15874523;\n\n    //join select\n\n    Result<Record6<String,String,Byte,Integer,Long,Timestamp>> results=create\n            .select(USER.MOBILE,USER.NAME,USER.AGE,ORDER.ORDER_ID,ORDER.AMOUT,ORDER.ORDER_TIME)\n            .from(USER).leftOuterJoin(ORDER)\n            .on(USER.UID.eq(ORDER.UID))\n            .where(USER.UID.eq(uid[0]).and(ORDER.AMOUT.ge(100l)))\n            .limit(0,10).fetch();\n    for (Record6<String,String,Byte,Integer,Long,Timestamp> record:results){\n        log.info(\"姓名:{}，手机号码:{}，年龄:{}，订单号:{}，订单金额:{}，订单时间:{}\",\n                record.getValue(USER.NAME),record.getValue(USER.MOBILE),record.getValue(USER.AGE),\n                record.getValue(ORDER.ORDER_ID),record.getValue(ORDER.AMOUT),\n                record.getValue(ORDER.ORDER_TIME));\n    }\n}\n\n12:51:14.898 INFO  com.study.jooq.model.Example 110 advance - 姓名:赵六，手机号码:18525874539，年龄:18，订单号:-1725080559，订单金额:25000，订单时间:1459486275000\n```\n### 批处理\n```\n//batchInsert\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    List<UserRecord> list=new ArrayList<>();\n\n     //batchInsert\n    UserRecord userRecord=create.newRecord(USER);\n    userRecord.setAge((byte) 18);\n    userRecord.setMobile(\"17058963215\");\n    userRecord.setName(\"赵六\");\n    userRecord.setSex((byte) 1);\n    userRecord.setPassword(String.valueOf(System.nanoTime()));\n    userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));\n    list.add(userRecord);\n\n    UserRecord userRecord2=create.newRecord(USER);\n    userRecord2.setAge((byte) 29);\n    userRecord2.setMobile(\"17058963216\");\n    userRecord2.setName(\"马七\");\n    userRecord2.setSex((byte) 1);\n    userRecord2.setPassword(String.valueOf(System.nanoTime()));\n    userRecord2.setRegisterTime(new Timestamp(System.currentTimeMillis()));\n    list.add(userRecord2);\n    //使用batchInsert时，无法获取SQL语句\n    int insertRetArr[]=create.batchInsert(list).execute();//返回值是一个int数组，长度与输入的集合size有关。\n\n    log.info(\"insertRetArr:{}\", Arrays.toString(insertRetArr));//数组每个元素为1时，执行成功\n    //使用batchInsert时，无法获取数据自增长的主键值\n    log.info(\"userRecord:uid:{}\", userRecord.getUid());\n    log.info(\"userRecord2:uid:{}\", userRecord2.getUid());\n\n    userRecord.refresh();\n    userRecord2.refresh();\n    log.info(\"userRecord:uid:{}\", userRecord.getUid());\n    log.info(\"userRecord2:uid:{}\", userRecord2.getUid());\n\n    //batchUpdate\n    userRecord.setAge((byte) 38);\n    userRecord2.setAge((byte) 78);\n    list.clear();\n    list.add(userRecord);\n    list.add(userRecord2);\n    //使用batchUpdate时，无法获取SQL语句\n    int updateRetArr[]=create.batchUpdate(list).execute();//返回值是一个int数组，长度与输入的集合size有关。\n    log.info(\"updateRetArr:{}\", Arrays.toString(updateRetArr));//数组每个元素为1时，执行成功\n\n    //batchDelete\n    //使用batchDelete时，无法获取SQL语句\n    int deleteRetArr[]=create.batchDelete(list).execute();//返回值是一个int数组，长度与输入的集合size有关。\n    log.info(\"deleteRetArr:{}\", Arrays.toString(deleteRetArr));//数组每个元素为1时，执行成功\n}\n\n15:06:46.281 INFO  com.study.jooq.model.Example 163 batch - insertRetArr:[1, 1]\n15:06:46.281 INFO  com.study.jooq.model.Example 165 batch - userRecord:uid:null\n15:06:46.281 INFO  com.study.jooq.model.Example 166 batch - userRecord2:uid:null\n15:06:46.287 INFO  com.study.jooq.model.Example 176 batch - updateRetArr:[0, 0]\n15:06:46.291 INFO  com.study.jooq.model.Example 182 batch - deleteRetArr:[0, 0]\n```\n### 函数\nJOOQ没有提供API对函数进行显式的支持，这意味着不能通过JOOQ进行函数的create/execute/drop。但是JOOQ支持直接执行拼接好的字符串SQL语句，这为我们进行函数execute提供了可行性。实际使用中，使用ORM层对数据库函数进行create/drop的需求几乎不存在。\n```\n1. 先在Mysql中添加自定义函数，你也可以使用Flyway的方式来做，在migration文件夹下加一个V2 sql文件。重新执行maven -install即可生效，实际上我更推荐使用这种方式来进行数据库历史SQL执行管理。\n\nUSE study;\nDROP FUNCTION IF EXISTS formatDate;\n\nDELIMITER //\nCREATE FUNCTION formatDate(fdate datetime)\nRETURNS VARCHAR(255)\nRETURN date_format(fdate,'%Y年%m月%d日%h时%i分%s秒');\n//\nDELIMITER ;\n\nSELECT formatDate(NOW()) AS '时间';\n\n2. 使用JOOQ进行函数execute\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    //formatDate是我们在mysql里自定义的函数\n    Result<Record> results=create.fetch(\"SELECT formatDate(NOW()) AS '时间';\");\n    for (Record record:results){\n        log.info(\"执行结果:{}\",record.getValue(0));\n    }\n}\n\n15:54:28.815 INFO  com.study.jooq.model.Example 199 function - 执行结果:2016年04月01日03时54分28秒\n```\n### 存储过程\n存储过程同函数一样，没有进行显式的create/drop支持。\n```\n1. 先在Mysql中添加存储过程\nUSE study;\nDROP PROCEDURE IF EXISTS getAllUid;\n\nDELIMITER //\nCREATE PROCEDURE getAllUid()\nBEGIN\n  SELECT uid FROM user;\nEND//\nDELIMITER ;\n\nCALL getAllUid();\n\n2. 使用JOOQ进行存储过程execute\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    //getAllUid是我们在mysql里定义的存储过程\n    Result<Record> results=create.fetch(\"CALL getAllUid()\");\n    for (Record record:results){\n        log.info(\"执行结果:{}\",record.getValue(0));\n    }\n}\n\n16:08:19.333 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:100\n16:08:19.333 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:102\n16:08:19.334 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:101\n```\n### 视图\n通过代码构建视图后，JOOQ不能自动生成视图对应的实体类，需要手工做一次maven -install。以下示例中会生成类文件：Userwithorder.java\n```\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    //创建视图\n\n    //定义视图名称为：userwithorder\n    CreateViewFinalStep step=create.createView(\"userwithorder\",USER.UID.getName(),USER.NAME.getName(),ORDER.ORDER_ID.getName(),ORDER.STATUS.getName(),ORDER.AMOUT.getName())\n            .as(\n                    create.select(USER.UID, USER.NAME, ORDER.ORDER_ID, ORDER.STATUS, ORDER.AMOUT)\n                            .from(USER)\n                            .leftOuterJoin(ORDER)\n                            .on(USER.UID.eq(ORDER.UID))\n            );\n    log.info(\"SQL:{}\",step.getSQL());\n    int ret=step.execute();\n    log.info(\"创建视图,执行结果:{}\",ret);\n\n    //查询视图\n    Result<Record3<Integer,String,Integer>> results=create.select(USERWITHORDER.UID,USERWITHORDER.NAME,USERWITHORDER.ORDER_ID)\n            .from(USERWITHORDER).where(USERWITHORDER.AMOUT.ge(200l)).fetch();\n    for (Record3<Integer,String,Integer> record:results){\n        log.info(\"uid:{}，姓名:{}，订单号:{}\",\n                record.getValue(USERWITHORDER.UID),record.getValue(USERWITHORDER.NAME),record.getValue(USERWITHORDER.ORDER_ID));\n    }\n    //删除视图\n    int dropRet=create.dropView(\"userwithorder\").execute();\n    log.info(\"删除视图,执行结果:{}\",dropRet);\n}\n\n\n16:54:10.597 INFO  com.study.jooq.model.Example 231 view - SQL:create view `userwithorder`(`uid`, `name`, `order_id`, `status`, `amout`) as select `study`.`user`.`uid`, `study`.`user`.`name`, `study`.`order`.`order_id`, `study`.`order`.`status`, `study`.`order`.`amout` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid`\n16:54:10.712 INFO  com.study.jooq.model.Example 233 view - 创建视图,执行结果:0\n16:54:10.760 INFO  com.study.jooq.model.Example 239 view - uid:100，姓名:张三，订单号:200\n16:54:10.761 INFO  com.study.jooq.model.Example 239 view - uid:100，姓名:张三，订单号:201\n16:54:10.761 INFO  com.study.jooq.model.Example 239 view - uid:101，姓名:李四，订单号:202\n16:54:10.765 INFO  com.study.jooq.model.Example 244 view - 删除视图,执行结果:0\n```\n\n## 小技巧\n### 获取SQL语句\nJOOQ允许在执行(fetch*、excute)前的SQL构建阶段，获取任一阶段的文本SQL语句。\n```\n//2张表完成左外连接构建阶段后的Step\nSelectForUpdateStep sfus=create\n        .select(USER.MOBILE, USER.NAME, USER.AGE, ORDER.ORDER_ID, ORDER.AMOUT, ORDER.ORDER_TIME)\n        .from(USER).leftOuterJoin(ORDER)\n        .on(USER.UID.eq(ORDER.UID));\n\n//2张表查询语句构建结束后的Step\nSelectForUpdateStep sfus1=create\n        .select(USER.MOBILE,USER.NAME,USER.AGE,ORDER.ORDER_ID,ORDER.AMOUT,ORDER.ORDER_TIME)\n        .from(USER).leftOuterJoin(ORDER)\n        .on(USER.UID.eq(ORDER.UID))\n        .where(USER.UID.eq(uid[0]).and(ORDER.AMOUT.ge(100l)))\n        .limit(0, 10);\nlog.info(\"s:\" + sfus.getSQL());\nlog.info(\"s1:\" + sfus.getSQL());\n\n14:23:05.305 INFO  com.study.jooq.model.Example 123 advance - s:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid`\n\n14:23:05.306 INFO  com.study.jooq.model.Example 124 advance - s1:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid\n```\n## Some else\n### JPA与JDBC有什么区别？\n\n* JDBC：Java Data Base Connectivity，java数据库连接，用于直接调用SQL 命令，也就是用于执行SQL语句的Java API，是面向数据库的。\n* JPA：Java Persistence API，Java持久性API，用来操作实体对象，持久性提供了很多实现，编程人员只需要编写实体类，实体类中的主要信息为实体与数据库中表、字段、主键的对应，可以免除编写繁琐的SQL。","source":"_posts/JOOQ-from-entry-to-improve.md","raw":"---\ntitle: JOOQ 3.6.1 使用总结：从入门到提高\ndate: 2016年3月31日14:00:22\ntags:\n    - JOOQ\n    - SQL\n    - ARM\n    - ORM\ncategories:\n    - Learning\ndescription:\n---\n2016年后换了一家公司干，后台ORM层用的是JOOQ，完全陌生的东西。干这一行越久，越觉得有更多有趣的新事物需要去探索。想起小说[《火星救援》](https://book.douban.com/subject/26586492/)，主人Mark侥幸在风暴中幸存后，一步步的将自己救出困境，遇到的难题或大或小，皆有优雅解决之法。<!--more-->一切看似偶然蹊跷，其实与Mark的长期相关储备分不开。所谓艺多不压身，应该在有限的时间里，得到更多的成长，以期待机会来时接得住。\n\n下文中的学习示例代码，已经整理完毕：[https://github.com/amao12580/JOOQ](https://github.com/amao12580/JOOQ)\n\n## 什么是JOOQ？\n[JOOQ](http://www.jooq.org/)，全称Java Object Oriented Querying，即面向Java对象查询。它是[Data Geekery](http://www.datageekery.com/)公司研发的DA方案(Data Access Layer)，主要解决两个问题：\n\n1. Hibernate的抽象使得我们离SQL太远，对SQL的掌控力度弱\n2. JDBC又过于嘈杂，需要干的事情太多\n\nJOOQ希望干的就是在上述两者中寻找一个最佳的平衡。它依据数据库中的表生成DA相关的代码，开发者将生成的代码引入项目中即可使用。\n\n有好几个版本\n\n* OpenSource\n* Express\n* Professional\n* Enterprise\n\nOpenSource版本针对开源数据库，已经够用了。其它的几个版本针对非开源数据库，差异在于不同的后续支持。\n\nJOOQ应用在DAO层中，原理是：在DAO层使用Java语言编写SQL语句，内部转换成数据库可执行的SQL语句，通过数据库驱动，提交SQL语句到RDBMS执行，接受处理结果，转换为POJO，返回到应用层。\n\n它与Hibernate不同，不依赖使用字符串变量在Java代码中拼接SQL语句。在复杂SQL语句中，与变量的组合拼接时，SQL被割裂成多个部分，失去了宝贵的可读性，这简直是噩梦。而且Hibernate饱受诟病的连接查询配置复杂以及HQL语法的问题，在JOOQ中不复存在。\n\n它与Mybatis不同，不依赖繁琐分散的XML进行SQL预定义。代码与SQL语句的分离，初衷是为了解决SQL嵌入代码时带来不直观的复杂性，但是分离的代价是维护工作倍增以及类型转换问题，经常遭遇到应用层代码变更，而XML定义未同步变更，IDE几乎无法解决。又或者开发人员改动一个XML文件，却意外影响多处上层代码，而这个问题很难避免。\n\n更进一步的，JOOQ提供原生的类型安全转换，以及POJO维护，免去大量一次性代码的编写。当然，你也可以使用Eclipse[代码生成插件](http://my.oschina.net/lujianing/blog/200135)解决这个问题，但是如果ORM能自动解决(结合Maven Plugin)，为什么拒绝呢？\n\n使用这种DAO模式，可以通过类的方式来进行数据库访问了。而且对SQL控制粒度加大的同时，维护工作并没有因此倍增，这对于开发人员是更好的解决方案，也是未来的趋势。\n\n```\n使用JOOQ进行2张表内连接查询示例\n\n// Typesafely execute the SQL statement directly with jOOQ\nResult<Record3<String, String, String>> result =\ncreate.select(BOOK.TITLE, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)\n    .from(BOOK)\n    .join(AUTHOR)\n    .on(BOOK.AUTHOR_ID.equal(AUTHOR.ID))\n    .where(BOOK.PUBLISHED_IN.equal(1948))\n    .fetch();\n```\n\n### VS 主流ORM框架\n* [JOOQ vs. Hibernate: When to Choose Which](http://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/)\n* [SQL Templating with jOOQ or MyBatis](http://blog.jooq.org/2013/07/13/sql-templating-with-jooq-or-mybatis/)\n### 优势和局限性\n\n优势\n\n* JOOQ 高效的合并了复杂SQL、[类型安全](http://blog.jooq.org/2015/05/26/type-safe-queries-for-jpas-native-query-api/)、[源码生成](#Code-Generation)、Active Records、存储过程以及高级数据类型的 Java 类库。支持DB2, Derby, Ingres, H2, HSQLDB, MySQL, Oracle, Postgres, SQLite, SQL Server, Sybase。\n\n局限性\n\n* 开发人员需要转换思维，接受新事物，May be better？\n\n## 入门篇\n### With Maven\n```\n<!--MySQL JDBC driver, 数据库迁移等情况下需要. -->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.36</version>\n</dependency>\n\n<!--如果不将该包导入, 编译会报错, 有人遇到了同样的问题.\nhttps://code.google.com/p/jsonrpc4j/issues/detail?id=21-->\n<dependency>\n    <groupId>javax.portlet</groupId>\n    <artifactId>portlet-api</artifactId>\n    <version>2.0</version>\n    <scope>provided</scope>\n</dependency>\n```\n### Code Generation\n\n```\n<!--数据库schema代码生成器 -->\n<dependency>\n    <groupId>org.jooq</groupId>\n    <artifactId>jooq-codegen</artifactId>\n    <version>3.6.1</version>\n</dependency>\n\n<!--数据库代码生成的插件 -->\n<plugin>\n    <!-- Specify the maven code generator plugin -->\n    <groupId>org.jooq</groupId>\n    <artifactId>jooq-codegen-maven</artifactId>\n    <version>3.6.1</version>\n    <!-- The plugin should hook into the generate goal -->\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <!-- JDBC connection parameters -->\n        <jdbc>\n            <driver>com.mysql.jdbc.Driver</driver>\n            <url>${db.url}</url>\n            <user>${db.username}</user>\n            <password>${db.password}</password>\n        </jdbc>\n        <!-- Generator parameters -->\n        <generator>\n            <database>\n                <name>org.jooq.util.mysql.MySQLDatabase</name>\n                <includes>.*</includes>\n                <inputSchema>${db.schema}</inputSchema>\n                <forcedTypes>\n                    <forcedType>\n                        <name>BOOLEAN</name>\n                        <expression>.*\\.HANDMADE</expression>\n                        <types>.*</types>\n                    </forcedType>\n                </forcedTypes>\n            </database>\n            <target>\n                <packageName>com.study.jooq.common.generated</packageName>\n                <directory>src/main/java</directory>\n            </target>\n        </generator>\n    </configuration>\n</plugin>\n```\n### With Flyway\n\nFlyway 是独立于数据库的应用、管理并跟踪数据库变更的数据库版本管理工具。\n\n[Flyway， 数据库Schema管理利器](http://www.cnblogs.com/huang0925/p/4409506.html)\n\n在pom.xml的配置\n```\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\n    <!--防止maven改动IDE的language level -->\n    <maven.compiler.source>1.8</maven.compiler.source>\n    <maven.compiler.target>1.8</maven.compiler.target>\n\n    <!--数据库迁移所用的参数 -->\n    <db.url>jdbc:mysql://localhost:3306</db.url>\n    <db.username>root</db.username>\n    <db.password>zhilaiadmin</db.password>\n    <db.schema>study</db.schema>\n</properties>\n\n<!--数据库迁移, 同步的插件 -->\n<plugin>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-maven-plugin</artifactId>\n    <version>3.0</version>\n    <!-- Note that we're executing the Flyway plugin in the \"generate-sources\" phase -->\n    <executions>\n        <execution>\n            <phase>generate-sources</phase>\n            <goals>\n                <goal>migrate</goal>\n            </goals>\n        </execution>\n    </executions>\n    <!-- Note that we need to prefix the db/migration path with filesystem:\n    to prevent Flyway from looking for our migration scripts only on the classpath -->\n    <configuration>\n        <url>${db.url}</url>\n        <user>${db.username}</user>\n        <password>${db.password}</password>\n        <encoding>${project.build.sourceEncoding}</encoding>\n        <schemas>\n            <schema>${db.schema}</schema>\n        </schemas>\n        <locations>\n            <location>filesystem:src/main/resources/db/migration</location>\n        </locations>\n    </configuration>\n</plugin>\n```\n在工程：src/main/resources/db/migration目录下，没有目录文件夹时需要先创建文件夹。放入数据库初始化SQL脚本：V1__init_database.sql。注意在maven中配置的db.schema=study，表明需要使用的数据库名称是study，study需要事先不存在。\n\n执行maven -clean、maven -install成功后，发现数据库有了新的数据库study，并且该数据库有了order、user、schema_version三张表，user、order是我们在脚本中定义需要生成的表，而schema_version是flyway生成的，维护数据库版本升级时的信息。对应的在代码中，生成了三个POJO。\n\n代码生成示例：\n![IDEA使用JOOQ自动生成代码](/img/jooq-flyway.png)\n\n### With HikariCp\nHikariCP号称是现在性能最好的JDBC连接池组件，具体的性能到底如何，我也没有仔细的测试过，不过从它现在的发展来看，其可能确实如它宣传的那样其性能高过目前所有的连接池组件。之前对连接池的记忆一直都是C3P0、DBCP、BoneCP，这三者中BoneCP的性能是最好的，C3P0的性能在现在来说确实是非常差的了，好像C3P0很久都没有更新了，所以我们应该杜绝在项目中使用C3P0，至于是否要使用HikariCP，我觉得可以尝试。HikariCP毕竟是才出来不久，其性能到底如何，也需要实践的检验，若是担心新东西有坑，我推荐使用BoneCP。Spring现在也集成了HikariCP，所以我觉得很有尝试它的必要。前不久我在项目中使用了HikariCP，也没出现什么问题，运行比较稳定。\n\nHikariCP在github上的地址：[https://github.com/brettwooldridge/HikariCP](https://github.com/brettwooldridge/HikariCP)\n\n[为什么HikariCP被号称为性能最好的Java数据库连接池，如何配置使用?](http://blog.csdn.net/clementad/article/details/46928621)\n\n\n```\n<!--JDBC连接池 -->\n<dependency>\n    <groupId>com.zaxxer</groupId>\n    <artifactId>HikariCP</artifactId>\n    <version>2.4.0</version>\n</dependency>\n```\n### 简单的CRUD\n为保持example的干净与轻便，不使用Spring进行ORM层的管理，我采用[ARM](http://www.oschina.net/question/12_10706)的方式来管理SQL链接，在try with resource块结束后自动释放SQL链接。\n\n有需要与Spring进行整合的，Follow这篇文章吧！\n[Using JOOQ with Spring and Apache DBCP](http://www.jooq.org/doc/3.7/manual/getting-started/tutorials/jooq-with-spring/)\n\n```\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    int uid =180;\n\n    //add\n    UserRecord userRecord=create.newRecord(USER);\n    userRecord.setAge((byte) 18);\n    userRecord.setMobile(\"15985236985\");\n    userRecord.setName(\"赵六\");\n    userRecord.setUid(uid);\n    userRecord.setSex((byte) 1);\n    userRecord.setPassword(String.valueOf(System.nanoTime()));\n    userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));\n    int insertRet=userRecord.insert();//执行insert sql\n    //userRecord.store();//可能会执行insert，也有可能执行update，文档说明的很清晰\n    //userRecord.refresh();//从数据库重新加载该记录\n    log.info(\"insertRet:{}\", insertRet);\n\n    //index\n    int createIndexRet=create.createIndex(\"user_index_mobile_unique\")\n            .on(USER, USER.MOBILE)\n            .execute();//为手机号码字段创建唯一索引\n    int dropIndexRet=create.dropIndex(\"user_index_mobile_unique\")\n            .on(USER)\n            .execute();//删除索引\n    log.info(\"dropIndexRet:{},createIndexRet:{}\", dropIndexRet, createIndexRet);\n\n    //select\n    Record record=create.select(USER.NAME,USER.UID)\n            .from(USER)\n            .where(USER.MOBILE.eq(\"15985236985\"))\n            .limit(1)\n            .fetchOne();\n    log.info(\"姓名:{}，uid:{}\", record.getValue(USER.NAME), record.getValue(USER.UID));\n\n    Result<UserRecord> userRecords=create.selectFrom(USER)\n            .where(USER.SEX.eq((byte) 1).and(USER.MOBILE.like(\"159%\")))\n            .orderBy(USER.MOBILE.asc()).limit(0, 20).fetch();\n\n    for (UserRecord ur:userRecords){\n        log.info(\"mobile:{},uid:{},registerTime:{}\", ur.getMobile(), ur.getUid(), ur.getRegisterTime().getTime());\n    }\n\n    //delete\n    int deleteRecordRet=create.deleteFrom(USER).where(USER.UID.eq(uid)).execute();\n    log.info(\"deleteRecordRet:{}\", deleteRecordRet);\n}\n\n日志打印信息：\n21:01:20.009 INFO  com.zaxxer.hikari.HikariDataSource 72 <init> - Hikari pool HikariPool-0 is starting.\n21:01:20.561 INFO  org.jooq.tools.JooqLogger 331 info -\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@  @@        @@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@\n@@@@@@@@@@@@@@@@  @@  @@    @@@@@@@@@@\n@@@@@@@@@@  @@@@  @@  @@    @@@@@@@@@@\n@@@@@@@@@@        @@        @@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@        @@        @@@@@@@@@@\n@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@\n@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@\n@@@@@@@@@@        @@  @  @  @@@@@@@@@@\n@@@@@@@@@@        @@        @@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  Thank you for using jOOQ 3.6.1\n\n21:01:20.593 INFO  com.study.jooq.model.Example 42 base - insertRet:1\n21:01:21.197 INFO  com.study.jooq.model.Example 51 base - dropIndexRet:0,createIndexRet:0\n21:01:21.278 INFO  com.study.jooq.model.Example 59 base - 姓名:赵六，uid:180\n21:01:21.282 INFO  com.study.jooq.model.Example 66 base - mobile:15925874536,uid:102,registerTime:1459331629000\n21:01:21.282 INFO  com.study.jooq.model.Example 66 base - mobile:15985236985,uid:180,registerTime:1459429281000\n21:01:21.285 INFO  com.study.jooq.model.Example 71 base - deleteRecordRet:1\n21:01:21.285 INFO  com.zaxxer.hikari.pool.HikariPool 242 shutdown - Hikari pool HikariPool-0 is shutting down.\n21:01:21.331 INFO  com.zaxxer.hikari.util.ConcurrentBag 197 add - ConcurrentBag has been closed, ignoring add()\n```\n## 进阶篇\n### 事务\n```\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    final int[] uid = new int[1];\n\n    //transaction\n\n    create.transaction(configuration -> {\n        //add\n        UserRecord userRecord=create.newRecord(USER);\n        userRecord.setAge((byte) 18);\n        userRecord.setMobile(\"18525874539\");\n        userRecord.setName(\"赵六\");\n        userRecord.setSex((byte) 1);\n        userRecord.setPassword(String.valueOf(System.nanoTime()));\n        userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));\n        int insertUserRet=userRecord.insert();//执行insert sql\n        uid[0] =userRecord.getUid();\n        log.info(\"insertUserRet:{}\", insertUserRet);\n        //add\n        OrderRecord orderRecord=create.newRecord(ORDER);\n        orderRecord.setUid(userRecord.getUid());\n        orderRecord.setAmout(25000l);\n        orderRecord.setOrderId(new BigDecimal(System.nanoTime()).intValue());\n        orderRecord.setOrderTime(new Timestamp(System.currentTimeMillis()));\n        orderRecord.setStatus((byte)0);\n        int insertOrderRet=orderRecord.insert();//执行insert sql\n        log.info(\"insertOrderRet:{}\", insertOrderRet);\n    });\n}\n\n12:51:14.724 INFO  com.study.jooq.model.Example 90 lambda$advance$0 - insertUserRet:1\n12:51:14.743 INFO  com.study.jooq.model.Example 99 lambda$advance$0 - insertOrderRet:1\n```\n### 连接查询\n在处理复杂SQL时，JOOQ的思路是由Java代码以[链式编程](http://www.jianshu.com/p/540711c1a507)的方式来解决可读性的问题。\n\n下文中的查询语句，等价于：\nselect `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time`\n    from `study`.`user` left outer join `study`.`order`\n    on `study`.`user`.`uid` = `study`.`order`.`uid`\n    where (`study`.`user`.`uid` = ? and `study`.`order`.`amout` >= ?)\n    limit ?\n可以发现SQL语句与代码保持了很高的相似性，可读性几乎没有损失。\n\n其他的特性：group by与having、union、union all也都是在api级别支持的。\n```\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    int uid=15874523;\n\n    //join select\n\n    Result<Record6<String,String,Byte,Integer,Long,Timestamp>> results=create\n            .select(USER.MOBILE,USER.NAME,USER.AGE,ORDER.ORDER_ID,ORDER.AMOUT,ORDER.ORDER_TIME)\n            .from(USER).leftOuterJoin(ORDER)\n            .on(USER.UID.eq(ORDER.UID))\n            .where(USER.UID.eq(uid[0]).and(ORDER.AMOUT.ge(100l)))\n            .limit(0,10).fetch();\n    for (Record6<String,String,Byte,Integer,Long,Timestamp> record:results){\n        log.info(\"姓名:{}，手机号码:{}，年龄:{}，订单号:{}，订单金额:{}，订单时间:{}\",\n                record.getValue(USER.NAME),record.getValue(USER.MOBILE),record.getValue(USER.AGE),\n                record.getValue(ORDER.ORDER_ID),record.getValue(ORDER.AMOUT),\n                record.getValue(ORDER.ORDER_TIME));\n    }\n}\n\n12:51:14.898 INFO  com.study.jooq.model.Example 110 advance - 姓名:赵六，手机号码:18525874539，年龄:18，订单号:-1725080559，订单金额:25000，订单时间:1459486275000\n```\n### 批处理\n```\n//batchInsert\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    List<UserRecord> list=new ArrayList<>();\n\n     //batchInsert\n    UserRecord userRecord=create.newRecord(USER);\n    userRecord.setAge((byte) 18);\n    userRecord.setMobile(\"17058963215\");\n    userRecord.setName(\"赵六\");\n    userRecord.setSex((byte) 1);\n    userRecord.setPassword(String.valueOf(System.nanoTime()));\n    userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));\n    list.add(userRecord);\n\n    UserRecord userRecord2=create.newRecord(USER);\n    userRecord2.setAge((byte) 29);\n    userRecord2.setMobile(\"17058963216\");\n    userRecord2.setName(\"马七\");\n    userRecord2.setSex((byte) 1);\n    userRecord2.setPassword(String.valueOf(System.nanoTime()));\n    userRecord2.setRegisterTime(new Timestamp(System.currentTimeMillis()));\n    list.add(userRecord2);\n    //使用batchInsert时，无法获取SQL语句\n    int insertRetArr[]=create.batchInsert(list).execute();//返回值是一个int数组，长度与输入的集合size有关。\n\n    log.info(\"insertRetArr:{}\", Arrays.toString(insertRetArr));//数组每个元素为1时，执行成功\n    //使用batchInsert时，无法获取数据自增长的主键值\n    log.info(\"userRecord:uid:{}\", userRecord.getUid());\n    log.info(\"userRecord2:uid:{}\", userRecord2.getUid());\n\n    userRecord.refresh();\n    userRecord2.refresh();\n    log.info(\"userRecord:uid:{}\", userRecord.getUid());\n    log.info(\"userRecord2:uid:{}\", userRecord2.getUid());\n\n    //batchUpdate\n    userRecord.setAge((byte) 38);\n    userRecord2.setAge((byte) 78);\n    list.clear();\n    list.add(userRecord);\n    list.add(userRecord2);\n    //使用batchUpdate时，无法获取SQL语句\n    int updateRetArr[]=create.batchUpdate(list).execute();//返回值是一个int数组，长度与输入的集合size有关。\n    log.info(\"updateRetArr:{}\", Arrays.toString(updateRetArr));//数组每个元素为1时，执行成功\n\n    //batchDelete\n    //使用batchDelete时，无法获取SQL语句\n    int deleteRetArr[]=create.batchDelete(list).execute();//返回值是一个int数组，长度与输入的集合size有关。\n    log.info(\"deleteRetArr:{}\", Arrays.toString(deleteRetArr));//数组每个元素为1时，执行成功\n}\n\n15:06:46.281 INFO  com.study.jooq.model.Example 163 batch - insertRetArr:[1, 1]\n15:06:46.281 INFO  com.study.jooq.model.Example 165 batch - userRecord:uid:null\n15:06:46.281 INFO  com.study.jooq.model.Example 166 batch - userRecord2:uid:null\n15:06:46.287 INFO  com.study.jooq.model.Example 176 batch - updateRetArr:[0, 0]\n15:06:46.291 INFO  com.study.jooq.model.Example 182 batch - deleteRetArr:[0, 0]\n```\n### 函数\nJOOQ没有提供API对函数进行显式的支持，这意味着不能通过JOOQ进行函数的create/execute/drop。但是JOOQ支持直接执行拼接好的字符串SQL语句，这为我们进行函数execute提供了可行性。实际使用中，使用ORM层对数据库函数进行create/drop的需求几乎不存在。\n```\n1. 先在Mysql中添加自定义函数，你也可以使用Flyway的方式来做，在migration文件夹下加一个V2 sql文件。重新执行maven -install即可生效，实际上我更推荐使用这种方式来进行数据库历史SQL执行管理。\n\nUSE study;\nDROP FUNCTION IF EXISTS formatDate;\n\nDELIMITER //\nCREATE FUNCTION formatDate(fdate datetime)\nRETURNS VARCHAR(255)\nRETURN date_format(fdate,'%Y年%m月%d日%h时%i分%s秒');\n//\nDELIMITER ;\n\nSELECT formatDate(NOW()) AS '时间';\n\n2. 使用JOOQ进行函数execute\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    //formatDate是我们在mysql里自定义的函数\n    Result<Record> results=create.fetch(\"SELECT formatDate(NOW()) AS '时间';\");\n    for (Record record:results){\n        log.info(\"执行结果:{}\",record.getValue(0));\n    }\n}\n\n15:54:28.815 INFO  com.study.jooq.model.Example 199 function - 执行结果:2016年04月01日03时54分28秒\n```\n### 存储过程\n存储过程同函数一样，没有进行显式的create/drop支持。\n```\n1. 先在Mysql中添加存储过程\nUSE study;\nDROP PROCEDURE IF EXISTS getAllUid;\n\nDELIMITER //\nCREATE PROCEDURE getAllUid()\nBEGIN\n  SELECT uid FROM user;\nEND//\nDELIMITER ;\n\nCALL getAllUid();\n\n2. 使用JOOQ进行存储过程execute\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    //getAllUid是我们在mysql里定义的存储过程\n    Result<Record> results=create.fetch(\"CALL getAllUid()\");\n    for (Record record:results){\n        log.info(\"执行结果:{}\",record.getValue(0));\n    }\n}\n\n16:08:19.333 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:100\n16:08:19.333 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:102\n16:08:19.334 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:101\n```\n### 视图\n通过代码构建视图后，JOOQ不能自动生成视图对应的实体类，需要手工做一次maven -install。以下示例中会生成类文件：Userwithorder.java\n```\ntry(ScopedContext scopedContext=new ScopedContext()){//try with resource\n    DSLContext create=scopedContext.getDSLContext();\n    //创建视图\n\n    //定义视图名称为：userwithorder\n    CreateViewFinalStep step=create.createView(\"userwithorder\",USER.UID.getName(),USER.NAME.getName(),ORDER.ORDER_ID.getName(),ORDER.STATUS.getName(),ORDER.AMOUT.getName())\n            .as(\n                    create.select(USER.UID, USER.NAME, ORDER.ORDER_ID, ORDER.STATUS, ORDER.AMOUT)\n                            .from(USER)\n                            .leftOuterJoin(ORDER)\n                            .on(USER.UID.eq(ORDER.UID))\n            );\n    log.info(\"SQL:{}\",step.getSQL());\n    int ret=step.execute();\n    log.info(\"创建视图,执行结果:{}\",ret);\n\n    //查询视图\n    Result<Record3<Integer,String,Integer>> results=create.select(USERWITHORDER.UID,USERWITHORDER.NAME,USERWITHORDER.ORDER_ID)\n            .from(USERWITHORDER).where(USERWITHORDER.AMOUT.ge(200l)).fetch();\n    for (Record3<Integer,String,Integer> record:results){\n        log.info(\"uid:{}，姓名:{}，订单号:{}\",\n                record.getValue(USERWITHORDER.UID),record.getValue(USERWITHORDER.NAME),record.getValue(USERWITHORDER.ORDER_ID));\n    }\n    //删除视图\n    int dropRet=create.dropView(\"userwithorder\").execute();\n    log.info(\"删除视图,执行结果:{}\",dropRet);\n}\n\n\n16:54:10.597 INFO  com.study.jooq.model.Example 231 view - SQL:create view `userwithorder`(`uid`, `name`, `order_id`, `status`, `amout`) as select `study`.`user`.`uid`, `study`.`user`.`name`, `study`.`order`.`order_id`, `study`.`order`.`status`, `study`.`order`.`amout` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid`\n16:54:10.712 INFO  com.study.jooq.model.Example 233 view - 创建视图,执行结果:0\n16:54:10.760 INFO  com.study.jooq.model.Example 239 view - uid:100，姓名:张三，订单号:200\n16:54:10.761 INFO  com.study.jooq.model.Example 239 view - uid:100，姓名:张三，订单号:201\n16:54:10.761 INFO  com.study.jooq.model.Example 239 view - uid:101，姓名:李四，订单号:202\n16:54:10.765 INFO  com.study.jooq.model.Example 244 view - 删除视图,执行结果:0\n```\n\n## 小技巧\n### 获取SQL语句\nJOOQ允许在执行(fetch*、excute)前的SQL构建阶段，获取任一阶段的文本SQL语句。\n```\n//2张表完成左外连接构建阶段后的Step\nSelectForUpdateStep sfus=create\n        .select(USER.MOBILE, USER.NAME, USER.AGE, ORDER.ORDER_ID, ORDER.AMOUT, ORDER.ORDER_TIME)\n        .from(USER).leftOuterJoin(ORDER)\n        .on(USER.UID.eq(ORDER.UID));\n\n//2张表查询语句构建结束后的Step\nSelectForUpdateStep sfus1=create\n        .select(USER.MOBILE,USER.NAME,USER.AGE,ORDER.ORDER_ID,ORDER.AMOUT,ORDER.ORDER_TIME)\n        .from(USER).leftOuterJoin(ORDER)\n        .on(USER.UID.eq(ORDER.UID))\n        .where(USER.UID.eq(uid[0]).and(ORDER.AMOUT.ge(100l)))\n        .limit(0, 10);\nlog.info(\"s:\" + sfus.getSQL());\nlog.info(\"s1:\" + sfus.getSQL());\n\n14:23:05.305 INFO  com.study.jooq.model.Example 123 advance - s:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid`\n\n14:23:05.306 INFO  com.study.jooq.model.Example 124 advance - s1:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid\n```\n## Some else\n### JPA与JDBC有什么区别？\n\n* JDBC：Java Data Base Connectivity，java数据库连接，用于直接调用SQL 命令，也就是用于执行SQL语句的Java API，是面向数据库的。\n* JPA：Java Persistence API，Java持久性API，用来操作实体对象，持久性提供了很多实现，编程人员只需要编写实体类，实体类中的主要信息为实体与数据库中表、字段、主键的对应，可以免除编写繁琐的SQL。","slug":"JOOQ-from-entry-to-improve","published":1,"updated":"2016-04-01T09:10:57.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimrk7x9a0005acnnz5ds3nse","content":"<p>2016年后换了一家公司干，后台ORM层用的是JOOQ，完全陌生的东西。干这一行越久，越觉得有更多有趣的新事物需要去探索。想起小说<a href=\"https://book.douban.com/subject/26586492/\" target=\"_blank\" rel=\"external\">《火星救援》</a>，主人Mark侥幸在风暴中幸存后，一步步的将自己救出困境，遇到的难题或大或小，皆有优雅解决之法。<a id=\"more\"></a>一切看似偶然蹊跷，其实与Mark的长期相关储备分不开。所谓艺多不压身，应该在有限的时间里，得到更多的成长，以期待机会来时接得住。</p>\n<p>下文中的学习示例代码，已经整理完毕：<a href=\"https://github.com/amao12580/JOOQ\" target=\"_blank\" rel=\"external\">https://github.com/amao12580/JOOQ</a></p>\n<h2 id=\"什么是JOOQ？\"><a href=\"#什么是JOOQ？\" class=\"headerlink\" title=\"什么是JOOQ？\"></a>什么是JOOQ？</h2><p><a href=\"http://www.jooq.org/\" target=\"_blank\" rel=\"external\">JOOQ</a>，全称Java Object Oriented Querying，即面向Java对象查询。它是<a href=\"http://www.datageekery.com/\" target=\"_blank\" rel=\"external\">Data Geekery</a>公司研发的DA方案(Data Access Layer)，主要解决两个问题：</p>\n<ol>\n<li>Hibernate的抽象使得我们离SQL太远，对SQL的掌控力度弱</li>\n<li>JDBC又过于嘈杂，需要干的事情太多</li>\n</ol>\n<p>JOOQ希望干的就是在上述两者中寻找一个最佳的平衡。它依据数据库中的表生成DA相关的代码，开发者将生成的代码引入项目中即可使用。</p>\n<p>有好几个版本</p>\n<ul>\n<li>OpenSource</li>\n<li>Express</li>\n<li>Professional</li>\n<li>Enterprise</li>\n</ul>\n<p>OpenSource版本针对开源数据库，已经够用了。其它的几个版本针对非开源数据库，差异在于不同的后续支持。</p>\n<p>JOOQ应用在DAO层中，原理是：在DAO层使用Java语言编写SQL语句，内部转换成数据库可执行的SQL语句，通过数据库驱动，提交SQL语句到RDBMS执行，接受处理结果，转换为POJO，返回到应用层。</p>\n<p>它与Hibernate不同，不依赖使用字符串变量在Java代码中拼接SQL语句。在复杂SQL语句中，与变量的组合拼接时，SQL被割裂成多个部分，失去了宝贵的可读性，这简直是噩梦。而且Hibernate饱受诟病的连接查询配置复杂以及HQL语法的问题，在JOOQ中不复存在。</p>\n<p>它与Mybatis不同，不依赖繁琐分散的XML进行SQL预定义。代码与SQL语句的分离，初衷是为了解决SQL嵌入代码时带来不直观的复杂性，但是分离的代价是维护工作倍增以及类型转换问题，经常遭遇到应用层代码变更，而XML定义未同步变更，IDE几乎无法解决。又或者开发人员改动一个XML文件，却意外影响多处上层代码，而这个问题很难避免。</p>\n<p>更进一步的，JOOQ提供原生的类型安全转换，以及POJO维护，免去大量一次性代码的编写。当然，你也可以使用Eclipse<a href=\"http://my.oschina.net/lujianing/blog/200135\" target=\"_blank\" rel=\"external\">代码生成插件</a>解决这个问题，但是如果ORM能自动解决(结合Maven Plugin)，为什么拒绝呢？</p>\n<p>使用这种DAO模式，可以通过类的方式来进行数据库访问了。而且对SQL控制粒度加大的同时，维护工作并没有因此倍增，这对于开发人员是更好的解决方案，也是未来的趋势。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用JOOQ进行2张表内连接查询示例</span><br><span class=\"line\"></span><br><span class=\"line\">// Typesafely execute the SQL statement directly with jOOQ</span><br><span class=\"line\">Result&lt;Record3&lt;String, String, String&gt;&gt; result =</span><br><span class=\"line\">create.select(BOOK.TITLE, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)</span><br><span class=\"line\">    .from(BOOK)</span><br><span class=\"line\">    .join(AUTHOR)</span><br><span class=\"line\">    .on(BOOK.AUTHOR_ID.equal(AUTHOR.ID))</span><br><span class=\"line\">    .where(BOOK.PUBLISHED_IN.equal(1948))</span><br><span class=\"line\">    .fetch();</span><br></pre></td></tr></table></figure>\n<h3 id=\"VS-主流ORM框架\"><a href=\"#VS-主流ORM框架\" class=\"headerlink\" title=\"VS 主流ORM框架\"></a>VS 主流ORM框架</h3><ul>\n<li><a href=\"http://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/\" target=\"_blank\" rel=\"external\">JOOQ vs. Hibernate: When to Choose Which</a></li>\n<li><a href=\"http://blog.jooq.org/2013/07/13/sql-templating-with-jooq-or-mybatis/\" target=\"_blank\" rel=\"external\">SQL Templating with jOOQ or MyBatis</a><h3 id=\"优势和局限性\"><a href=\"#优势和局限性\" class=\"headerlink\" title=\"优势和局限性\"></a>优势和局限性</h3></li>\n</ul>\n<p>优势</p>\n<ul>\n<li>JOOQ 高效的合并了复杂SQL、<a href=\"http://blog.jooq.org/2015/05/26/type-safe-queries-for-jpas-native-query-api/\" target=\"_blank\" rel=\"external\">类型安全</a>、<a href=\"#Code-Generation\">源码生成</a>、Active Records、存储过程以及高级数据类型的 Java 类库。支持DB2, Derby, Ingres, H2, HSQLDB, MySQL, Oracle, Postgres, SQLite, SQL Server, Sybase。</li>\n</ul>\n<p>局限性</p>\n<ul>\n<li>开发人员需要转换思维，接受新事物，May be better？</li>\n</ul>\n<h2 id=\"入门篇\"><a href=\"#入门篇\" class=\"headerlink\" title=\"入门篇\"></a>入门篇</h2><h3 id=\"With-Maven\"><a href=\"#With-Maven\" class=\"headerlink\" title=\"With Maven\"></a>With Maven</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--MySQL JDBC driver, 数据库迁移等情况下需要. --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.1.36&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--如果不将该包导入, 编译会报错, 有人遇到了同样的问题.</span><br><span class=\"line\">https://code.google.com/p/jsonrpc4j/issues/detail?id=21--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;javax.portlet&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;portlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0&lt;/version&gt;</span><br><span class=\"line\">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Code-Generation\"><a href=\"#Code-Generation\" class=\"headerlink\" title=\"Code Generation\"></a>Code Generation</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--数据库schema代码生成器 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.jooq&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jooq-codegen&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.6.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据库代码生成的插件 --&gt;</span><br><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;!-- Specify the maven code generator plugin --&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.jooq&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.6.1&lt;/version&gt;</span><br><span class=\"line\">    &lt;!-- The plugin should hook into the generate goal --&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;generate&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;!-- JDBC connection parameters --&gt;</span><br><span class=\"line\">        &lt;jdbc&gt;</span><br><span class=\"line\">            &lt;driver&gt;com.mysql.jdbc.Driver&lt;/driver&gt;</span><br><span class=\"line\">            &lt;url&gt;$&#123;db.url&#125;&lt;/url&gt;</span><br><span class=\"line\">            &lt;user&gt;$&#123;db.username&#125;&lt;/user&gt;</span><br><span class=\"line\">            &lt;password&gt;$&#123;db.password&#125;&lt;/password&gt;</span><br><span class=\"line\">        &lt;/jdbc&gt;</span><br><span class=\"line\">        &lt;!-- Generator parameters --&gt;</span><br><span class=\"line\">        &lt;generator&gt;</span><br><span class=\"line\">            &lt;database&gt;</span><br><span class=\"line\">                &lt;name&gt;org.jooq.util.mysql.MySQLDatabase&lt;/name&gt;</span><br><span class=\"line\">                &lt;includes&gt;.*&lt;/includes&gt;</span><br><span class=\"line\">                &lt;inputSchema&gt;$&#123;db.schema&#125;&lt;/inputSchema&gt;</span><br><span class=\"line\">                &lt;forcedTypes&gt;</span><br><span class=\"line\">                    &lt;forcedType&gt;</span><br><span class=\"line\">                        &lt;name&gt;BOOLEAN&lt;/name&gt;</span><br><span class=\"line\">                        &lt;expression&gt;.*\\.HANDMADE&lt;/expression&gt;</span><br><span class=\"line\">                        &lt;types&gt;.*&lt;/types&gt;</span><br><span class=\"line\">                    &lt;/forcedType&gt;</span><br><span class=\"line\">                &lt;/forcedTypes&gt;</span><br><span class=\"line\">            &lt;/database&gt;</span><br><span class=\"line\">            &lt;target&gt;</span><br><span class=\"line\">                &lt;packageName&gt;com.study.jooq.common.generated&lt;/packageName&gt;</span><br><span class=\"line\">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class=\"line\">            &lt;/target&gt;</span><br><span class=\"line\">        &lt;/generator&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"With-Flyway\"><a href=\"#With-Flyway\" class=\"headerlink\" title=\"With Flyway\"></a>With Flyway</h3><p>Flyway 是独立于数据库的应用、管理并跟踪数据库变更的数据库版本管理工具。</p>\n<p><a href=\"http://www.cnblogs.com/huang0925/p/4409506.html\" target=\"_blank\" rel=\"external\">Flyway， 数据库Schema管理利器</a></p>\n<p>在pom.xml的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--防止maven改动IDE的language level --&gt;</span><br><span class=\"line\">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class=\"line\">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--数据库迁移所用的参数 --&gt;</span><br><span class=\"line\">    &lt;db.url&gt;jdbc:mysql://localhost:3306&lt;/db.url&gt;</span><br><span class=\"line\">    &lt;db.username&gt;root&lt;/db.username&gt;</span><br><span class=\"line\">    &lt;db.password&gt;zhilaiadmin&lt;/db.password&gt;</span><br><span class=\"line\">    &lt;db.schema&gt;study&lt;/db.schema&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据库迁移, 同步的插件 --&gt;</span><br><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;flyway-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.0&lt;/version&gt;</span><br><span class=\"line\">    &lt;!-- Note that we&apos;re executing the Flyway plugin in the &quot;generate-sources&quot; phase --&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;phase&gt;generate-sources&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;migrate&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">    &lt;!-- Note that we need to prefix the db/migration path with filesystem:</span><br><span class=\"line\">    to prevent Flyway from looking for our migration scripts only on the classpath --&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;url&gt;$&#123;db.url&#125;&lt;/url&gt;</span><br><span class=\"line\">        &lt;user&gt;$&#123;db.username&#125;&lt;/user&gt;</span><br><span class=\"line\">        &lt;password&gt;$&#123;db.password&#125;&lt;/password&gt;</span><br><span class=\"line\">        &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</span><br><span class=\"line\">        &lt;schemas&gt;</span><br><span class=\"line\">            &lt;schema&gt;$&#123;db.schema&#125;&lt;/schema&gt;</span><br><span class=\"line\">        &lt;/schemas&gt;</span><br><span class=\"line\">        &lt;locations&gt;</span><br><span class=\"line\">            &lt;location&gt;filesystem:src/main/resources/db/migration&lt;/location&gt;</span><br><span class=\"line\">        &lt;/locations&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在工程：src/main/resources/db/migration目录下，没有目录文件夹时需要先创建文件夹。放入数据库初始化SQL脚本：V1__init_database.sql。注意在maven中配置的db.schema=study，表明需要使用的数据库名称是study，study需要事先不存在。</p>\n<p>执行maven -clean、maven -install成功后，发现数据库有了新的数据库study，并且该数据库有了order、user、schema_version三张表，user、order是我们在脚本中定义需要生成的表，而schema_version是flyway生成的，维护数据库版本升级时的信息。对应的在代码中，生成了三个POJO。</p>\n<p>代码生成示例：<br><img src=\"/img/jooq-flyway.png\" alt=\"IDEA使用JOOQ自动生成代码\"></p>\n<h3 id=\"With-HikariCp\"><a href=\"#With-HikariCp\" class=\"headerlink\" title=\"With HikariCp\"></a>With HikariCp</h3><p>HikariCP号称是现在性能最好的JDBC连接池组件，具体的性能到底如何，我也没有仔细的测试过，不过从它现在的发展来看，其可能确实如它宣传的那样其性能高过目前所有的连接池组件。之前对连接池的记忆一直都是C3P0、DBCP、BoneCP，这三者中BoneCP的性能是最好的，C3P0的性能在现在来说确实是非常差的了，好像C3P0很久都没有更新了，所以我们应该杜绝在项目中使用C3P0，至于是否要使用HikariCP，我觉得可以尝试。HikariCP毕竟是才出来不久，其性能到底如何，也需要实践的检验，若是担心新东西有坑，我推荐使用BoneCP。Spring现在也集成了HikariCP，所以我觉得很有尝试它的必要。前不久我在项目中使用了HikariCP，也没出现什么问题，运行比较稳定。</p>\n<p>HikariCP在github上的地址：<a href=\"https://github.com/brettwooldridge/HikariCP\" target=\"_blank\" rel=\"external\">https://github.com/brettwooldridge/HikariCP</a></p>\n<p><a href=\"http://blog.csdn.net/clementad/article/details/46928621\" target=\"_blank\" rel=\"external\">为什么HikariCP被号称为性能最好的Java数据库连接池，如何配置使用?</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--JDBC连接池 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单的CRUD\"><a href=\"#简单的CRUD\" class=\"headerlink\" title=\"简单的CRUD\"></a>简单的CRUD</h3><p>为保持example的干净与轻便，不使用Spring进行ORM层的管理，我采用<a href=\"http://www.oschina.net/question/12_10706\" target=\"_blank\" rel=\"external\">ARM</a>的方式来管理SQL链接，在try with resource块结束后自动释放SQL链接。</p>\n<p>有需要与Spring进行整合的，Follow这篇文章吧！<br><a href=\"http://www.jooq.org/doc/3.7/manual/getting-started/tutorials/jooq-with-spring/\" target=\"_blank\" rel=\"external\">Using JOOQ with Spring and Apache DBCP</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    int uid =180;</span><br><span class=\"line\"></span><br><span class=\"line\">    //add</span><br><span class=\"line\">    UserRecord userRecord=create.newRecord(USER);</span><br><span class=\"line\">    userRecord.setAge((byte) 18);</span><br><span class=\"line\">    userRecord.setMobile(&quot;15985236985&quot;);</span><br><span class=\"line\">    userRecord.setName(&quot;赵六&quot;);</span><br><span class=\"line\">    userRecord.setUid(uid);</span><br><span class=\"line\">    userRecord.setSex((byte) 1);</span><br><span class=\"line\">    userRecord.setPassword(String.valueOf(System.nanoTime()));</span><br><span class=\"line\">    userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class=\"line\">    int insertRet=userRecord.insert();//执行insert sql</span><br><span class=\"line\">    //userRecord.store();//可能会执行insert，也有可能执行update，文档说明的很清晰</span><br><span class=\"line\">    //userRecord.refresh();//从数据库重新加载该记录</span><br><span class=\"line\">    log.info(&quot;insertRet:&#123;&#125;&quot;, insertRet);</span><br><span class=\"line\"></span><br><span class=\"line\">    //index</span><br><span class=\"line\">    int createIndexRet=create.createIndex(&quot;user_index_mobile_unique&quot;)</span><br><span class=\"line\">            .on(USER, USER.MOBILE)</span><br><span class=\"line\">            .execute();//为手机号码字段创建唯一索引</span><br><span class=\"line\">    int dropIndexRet=create.dropIndex(&quot;user_index_mobile_unique&quot;)</span><br><span class=\"line\">            .on(USER)</span><br><span class=\"line\">            .execute();//删除索引</span><br><span class=\"line\">    log.info(&quot;dropIndexRet:&#123;&#125;,createIndexRet:&#123;&#125;&quot;, dropIndexRet, createIndexRet);</span><br><span class=\"line\"></span><br><span class=\"line\">    //select</span><br><span class=\"line\">    Record record=create.select(USER.NAME,USER.UID)</span><br><span class=\"line\">            .from(USER)</span><br><span class=\"line\">            .where(USER.MOBILE.eq(&quot;15985236985&quot;))</span><br><span class=\"line\">            .limit(1)</span><br><span class=\"line\">            .fetchOne();</span><br><span class=\"line\">    log.info(&quot;姓名:&#123;&#125;，uid:&#123;&#125;&quot;, record.getValue(USER.NAME), record.getValue(USER.UID));</span><br><span class=\"line\"></span><br><span class=\"line\">    Result&lt;UserRecord&gt; userRecords=create.selectFrom(USER)</span><br><span class=\"line\">            .where(USER.SEX.eq((byte) 1).and(USER.MOBILE.like(&quot;159%&quot;)))</span><br><span class=\"line\">            .orderBy(USER.MOBILE.asc()).limit(0, 20).fetch();</span><br><span class=\"line\"></span><br><span class=\"line\">    for (UserRecord ur:userRecords)&#123;</span><br><span class=\"line\">        log.info(&quot;mobile:&#123;&#125;,uid:&#123;&#125;,registerTime:&#123;&#125;&quot;, ur.getMobile(), ur.getUid(), ur.getRegisterTime().getTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //delete</span><br><span class=\"line\">    int deleteRecordRet=create.deleteFrom(USER).where(USER.UID.eq(uid)).execute();</span><br><span class=\"line\">    log.info(&quot;deleteRecordRet:&#123;&#125;&quot;, deleteRecordRet);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">日志打印信息：</span><br><span class=\"line\">21:01:20.009 INFO  com.zaxxer.hikari.HikariDataSource 72 &lt;init&gt; - Hikari pool HikariPool-0 is starting.</span><br><span class=\"line\">21:01:20.561 INFO  org.jooq.tools.JooqLogger 331 info -</span><br><span class=\"line\"></span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@  @@        @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@  @@  @@    @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@  @@@@  @@  @@    @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@        @@        @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@        @@        @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@        @@  @  @  @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@        @@        @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  Thank you for using jOOQ 3.6.1</span><br><span class=\"line\"></span><br><span class=\"line\">21:01:20.593 INFO  com.study.jooq.model.Example 42 base - insertRet:1</span><br><span class=\"line\">21:01:21.197 INFO  com.study.jooq.model.Example 51 base - dropIndexRet:0,createIndexRet:0</span><br><span class=\"line\">21:01:21.278 INFO  com.study.jooq.model.Example 59 base - 姓名:赵六，uid:180</span><br><span class=\"line\">21:01:21.282 INFO  com.study.jooq.model.Example 66 base - mobile:15925874536,uid:102,registerTime:1459331629000</span><br><span class=\"line\">21:01:21.282 INFO  com.study.jooq.model.Example 66 base - mobile:15985236985,uid:180,registerTime:1459429281000</span><br><span class=\"line\">21:01:21.285 INFO  com.study.jooq.model.Example 71 base - deleteRecordRet:1</span><br><span class=\"line\">21:01:21.285 INFO  com.zaxxer.hikari.pool.HikariPool 242 shutdown - Hikari pool HikariPool-0 is shutting down.</span><br><span class=\"line\">21:01:21.331 INFO  com.zaxxer.hikari.util.ConcurrentBag 197 add - ConcurrentBag has been closed, ignoring add()</span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h2><h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    final int[] uid = new int[1];</span><br><span class=\"line\"></span><br><span class=\"line\">    //transaction</span><br><span class=\"line\"></span><br><span class=\"line\">    create.transaction(configuration -&gt; &#123;</span><br><span class=\"line\">        //add</span><br><span class=\"line\">        UserRecord userRecord=create.newRecord(USER);</span><br><span class=\"line\">        userRecord.setAge((byte) 18);</span><br><span class=\"line\">        userRecord.setMobile(&quot;18525874539&quot;);</span><br><span class=\"line\">        userRecord.setName(&quot;赵六&quot;);</span><br><span class=\"line\">        userRecord.setSex((byte) 1);</span><br><span class=\"line\">        userRecord.setPassword(String.valueOf(System.nanoTime()));</span><br><span class=\"line\">        userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class=\"line\">        int insertUserRet=userRecord.insert();//执行insert sql</span><br><span class=\"line\">        uid[0] =userRecord.getUid();</span><br><span class=\"line\">        log.info(&quot;insertUserRet:&#123;&#125;&quot;, insertUserRet);</span><br><span class=\"line\">        //add</span><br><span class=\"line\">        OrderRecord orderRecord=create.newRecord(ORDER);</span><br><span class=\"line\">        orderRecord.setUid(userRecord.getUid());</span><br><span class=\"line\">        orderRecord.setAmout(25000l);</span><br><span class=\"line\">        orderRecord.setOrderId(new BigDecimal(System.nanoTime()).intValue());</span><br><span class=\"line\">        orderRecord.setOrderTime(new Timestamp(System.currentTimeMillis()));</span><br><span class=\"line\">        orderRecord.setStatus((byte)0);</span><br><span class=\"line\">        int insertOrderRet=orderRecord.insert();//执行insert sql</span><br><span class=\"line\">        log.info(&quot;insertOrderRet:&#123;&#125;&quot;, insertOrderRet);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">12:51:14.724 INFO  com.study.jooq.model.Example 90 lambda$advance$0 - insertUserRet:1</span><br><span class=\"line\">12:51:14.743 INFO  com.study.jooq.model.Example 99 lambda$advance$0 - insertOrderRet:1</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h3><p>在处理复杂SQL时，JOOQ的思路是由Java代码以<a href=\"http://www.jianshu.com/p/540711c1a507\" target=\"_blank\" rel=\"external\">链式编程</a>的方式来解决可读性的问题。</p>\n<p>下文中的查询语句，等价于：<br>select <code>study</code>.<code>user</code>.<code>mobile</code>, <code>study</code>.<code>user</code>.<code>name</code>, <code>study</code>.<code>user</code>.<code>age</code>, <code>study</code>.<code>order</code>.<code>order_id</code>, <code>study</code>.<code>order</code>.<code>amout</code>, <code>study</code>.<code>order</code>.<code>order_time</code><br>    from <code>study</code>.<code>user</code> left outer join <code>study</code>.<code>order</code><br>    on <code>study</code>.<code>user</code>.<code>uid</code> = <code>study</code>.<code>order</code>.<code>uid</code><br>    where (<code>study</code>.<code>user</code>.<code>uid</code> = ? and <code>study</code>.<code>order</code>.<code>amout</code> &gt;= ?)<br>    limit ?<br>可以发现SQL语句与代码保持了很高的相似性，可读性几乎没有损失。</p>\n<p>其他的特性：group by与having、union、union all也都是在api级别支持的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    int uid=15874523;</span><br><span class=\"line\"></span><br><span class=\"line\">    //join select</span><br><span class=\"line\"></span><br><span class=\"line\">    Result&lt;Record6&lt;String,String,Byte,Integer,Long,Timestamp&gt;&gt; results=create</span><br><span class=\"line\">            .select(USER.MOBILE,USER.NAME,USER.AGE,ORDER.ORDER_ID,ORDER.AMOUT,ORDER.ORDER_TIME)</span><br><span class=\"line\">            .from(USER).leftOuterJoin(ORDER)</span><br><span class=\"line\">            .on(USER.UID.eq(ORDER.UID))</span><br><span class=\"line\">            .where(USER.UID.eq(uid[0]).and(ORDER.AMOUT.ge(100l)))</span><br><span class=\"line\">            .limit(0,10).fetch();</span><br><span class=\"line\">    for (Record6&lt;String,String,Byte,Integer,Long,Timestamp&gt; record:results)&#123;</span><br><span class=\"line\">        log.info(&quot;姓名:&#123;&#125;，手机号码:&#123;&#125;，年龄:&#123;&#125;，订单号:&#123;&#125;，订单金额:&#123;&#125;，订单时间:&#123;&#125;&quot;,</span><br><span class=\"line\">                record.getValue(USER.NAME),record.getValue(USER.MOBILE),record.getValue(USER.AGE),</span><br><span class=\"line\">                record.getValue(ORDER.ORDER_ID),record.getValue(ORDER.AMOUT),</span><br><span class=\"line\">                record.getValue(ORDER.ORDER_TIME));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">12:51:14.898 INFO  com.study.jooq.model.Example 110 advance - 姓名:赵六，手机号码:18525874539，年龄:18，订单号:-1725080559，订单金额:25000，订单时间:1459486275000</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"批处理\"><a href=\"#批处理\" class=\"headerlink\" title=\"批处理\"></a>批处理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//batchInsert</span><br><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    List&lt;UserRecord&gt; list=new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">     //batchInsert</span><br><span class=\"line\">    UserRecord userRecord=create.newRecord(USER);</span><br><span class=\"line\">    userRecord.setAge((byte) 18);</span><br><span class=\"line\">    userRecord.setMobile(&quot;17058963215&quot;);</span><br><span class=\"line\">    userRecord.setName(&quot;赵六&quot;);</span><br><span class=\"line\">    userRecord.setSex((byte) 1);</span><br><span class=\"line\">    userRecord.setPassword(String.valueOf(System.nanoTime()));</span><br><span class=\"line\">    userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class=\"line\">    list.add(userRecord);</span><br><span class=\"line\"></span><br><span class=\"line\">    UserRecord userRecord2=create.newRecord(USER);</span><br><span class=\"line\">    userRecord2.setAge((byte) 29);</span><br><span class=\"line\">    userRecord2.setMobile(&quot;17058963216&quot;);</span><br><span class=\"line\">    userRecord2.setName(&quot;马七&quot;);</span><br><span class=\"line\">    userRecord2.setSex((byte) 1);</span><br><span class=\"line\">    userRecord2.setPassword(String.valueOf(System.nanoTime()));</span><br><span class=\"line\">    userRecord2.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class=\"line\">    list.add(userRecord2);</span><br><span class=\"line\">    //使用batchInsert时，无法获取SQL语句</span><br><span class=\"line\">    int insertRetArr[]=create.batchInsert(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class=\"line\"></span><br><span class=\"line\">    log.info(&quot;insertRetArr:&#123;&#125;&quot;, Arrays.toString(insertRetArr));//数组每个元素为1时，执行成功</span><br><span class=\"line\">    //使用batchInsert时，无法获取数据自增长的主键值</span><br><span class=\"line\">    log.info(&quot;userRecord:uid:&#123;&#125;&quot;, userRecord.getUid());</span><br><span class=\"line\">    log.info(&quot;userRecord2:uid:&#123;&#125;&quot;, userRecord2.getUid());</span><br><span class=\"line\"></span><br><span class=\"line\">    userRecord.refresh();</span><br><span class=\"line\">    userRecord2.refresh();</span><br><span class=\"line\">    log.info(&quot;userRecord:uid:&#123;&#125;&quot;, userRecord.getUid());</span><br><span class=\"line\">    log.info(&quot;userRecord2:uid:&#123;&#125;&quot;, userRecord2.getUid());</span><br><span class=\"line\"></span><br><span class=\"line\">    //batchUpdate</span><br><span class=\"line\">    userRecord.setAge((byte) 38);</span><br><span class=\"line\">    userRecord2.setAge((byte) 78);</span><br><span class=\"line\">    list.clear();</span><br><span class=\"line\">    list.add(userRecord);</span><br><span class=\"line\">    list.add(userRecord2);</span><br><span class=\"line\">    //使用batchUpdate时，无法获取SQL语句</span><br><span class=\"line\">    int updateRetArr[]=create.batchUpdate(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class=\"line\">    log.info(&quot;updateRetArr:&#123;&#125;&quot;, Arrays.toString(updateRetArr));//数组每个元素为1时，执行成功</span><br><span class=\"line\"></span><br><span class=\"line\">    //batchDelete</span><br><span class=\"line\">    //使用batchDelete时，无法获取SQL语句</span><br><span class=\"line\">    int deleteRetArr[]=create.batchDelete(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class=\"line\">    log.info(&quot;deleteRetArr:&#123;&#125;&quot;, Arrays.toString(deleteRetArr));//数组每个元素为1时，执行成功</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">15:06:46.281 INFO  com.study.jooq.model.Example 163 batch - insertRetArr:[1, 1]</span><br><span class=\"line\">15:06:46.281 INFO  com.study.jooq.model.Example 165 batch - userRecord:uid:null</span><br><span class=\"line\">15:06:46.281 INFO  com.study.jooq.model.Example 166 batch - userRecord2:uid:null</span><br><span class=\"line\">15:06:46.287 INFO  com.study.jooq.model.Example 176 batch - updateRetArr:[0, 0]</span><br><span class=\"line\">15:06:46.291 INFO  com.study.jooq.model.Example 182 batch - deleteRetArr:[0, 0]</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>JOOQ没有提供API对函数进行显式的支持，这意味着不能通过JOOQ进行函数的create/execute/drop。但是JOOQ支持直接执行拼接好的字符串SQL语句，这为我们进行函数execute提供了可行性。实际使用中，使用ORM层对数据库函数进行create/drop的需求几乎不存在。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 先在Mysql中添加自定义函数，你也可以使用Flyway的方式来做，在migration文件夹下加一个V2 sql文件。重新执行maven -install即可生效，实际上我更推荐使用这种方式来进行数据库历史SQL执行管理。</span><br><span class=\"line\"></span><br><span class=\"line\">USE study;</span><br><span class=\"line\">DROP FUNCTION IF EXISTS formatDate;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\">CREATE FUNCTION formatDate(fdate datetime)</span><br><span class=\"line\">RETURNS VARCHAR(255)</span><br><span class=\"line\">RETURN date_format(fdate,&apos;%Y年%m月%d日%h时%i分%s秒&apos;);</span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT formatDate(NOW()) AS &apos;时间&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">2. 使用JOOQ进行函数execute</span><br><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    //formatDate是我们在mysql里自定义的函数</span><br><span class=\"line\">    Result&lt;Record&gt; results=create.fetch(&quot;SELECT formatDate(NOW()) AS &apos;时间&apos;;&quot;);</span><br><span class=\"line\">    for (Record record:results)&#123;</span><br><span class=\"line\">        log.info(&quot;执行结果:&#123;&#125;&quot;,record.getValue(0));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">15:54:28.815 INFO  com.study.jooq.model.Example 199 function - 执行结果:2016年04月01日03时54分28秒</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h3><p>存储过程同函数一样，没有进行显式的create/drop支持。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 先在Mysql中添加存储过程</span><br><span class=\"line\">USE study;</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS getAllUid;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\">CREATE PROCEDURE getAllUid()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">  SELECT uid FROM user;</span><br><span class=\"line\">END//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">CALL getAllUid();</span><br><span class=\"line\"></span><br><span class=\"line\">2. 使用JOOQ进行存储过程execute</span><br><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    //getAllUid是我们在mysql里定义的存储过程</span><br><span class=\"line\">    Result&lt;Record&gt; results=create.fetch(&quot;CALL getAllUid()&quot;);</span><br><span class=\"line\">    for (Record record:results)&#123;</span><br><span class=\"line\">        log.info(&quot;执行结果:&#123;&#125;&quot;,record.getValue(0));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">16:08:19.333 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:100</span><br><span class=\"line\">16:08:19.333 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:102</span><br><span class=\"line\">16:08:19.334 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:101</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><p>通过代码构建视图后，JOOQ不能自动生成视图对应的实体类，需要手工做一次maven -install。以下示例中会生成类文件：Userwithorder.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    //创建视图</span><br><span class=\"line\"></span><br><span class=\"line\">    //定义视图名称为：userwithorder</span><br><span class=\"line\">    CreateViewFinalStep step=create.createView(&quot;userwithorder&quot;,USER.UID.getName(),USER.NAME.getName(),ORDER.ORDER_ID.getName(),ORDER.STATUS.getName(),ORDER.AMOUT.getName())</span><br><span class=\"line\">            .as(</span><br><span class=\"line\">                    create.select(USER.UID, USER.NAME, ORDER.ORDER_ID, ORDER.STATUS, ORDER.AMOUT)</span><br><span class=\"line\">                            .from(USER)</span><br><span class=\"line\">                            .leftOuterJoin(ORDER)</span><br><span class=\"line\">                            .on(USER.UID.eq(ORDER.UID))</span><br><span class=\"line\">            );</span><br><span class=\"line\">    log.info(&quot;SQL:&#123;&#125;&quot;,step.getSQL());</span><br><span class=\"line\">    int ret=step.execute();</span><br><span class=\"line\">    log.info(&quot;创建视图,执行结果:&#123;&#125;&quot;,ret);</span><br><span class=\"line\"></span><br><span class=\"line\">    //查询视图</span><br><span class=\"line\">    Result&lt;Record3&lt;Integer,String,Integer&gt;&gt; results=create.select(USERWITHORDER.UID,USERWITHORDER.NAME,USERWITHORDER.ORDER_ID)</span><br><span class=\"line\">            .from(USERWITHORDER).where(USERWITHORDER.AMOUT.ge(200l)).fetch();</span><br><span class=\"line\">    for (Record3&lt;Integer,String,Integer&gt; record:results)&#123;</span><br><span class=\"line\">        log.info(&quot;uid:&#123;&#125;，姓名:&#123;&#125;，订单号:&#123;&#125;&quot;,</span><br><span class=\"line\">                record.getValue(USERWITHORDER.UID),record.getValue(USERWITHORDER.NAME),record.getValue(USERWITHORDER.ORDER_ID));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //删除视图</span><br><span class=\"line\">    int dropRet=create.dropView(&quot;userwithorder&quot;).execute();</span><br><span class=\"line\">    log.info(&quot;删除视图,执行结果:&#123;&#125;&quot;,dropRet);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">16:54:10.597 INFO  com.study.jooq.model.Example 231 view - SQL:create view `userwithorder`(`uid`, `name`, `order_id`, `status`, `amout`) as select `study`.`user`.`uid`, `study`.`user`.`name`, `study`.`order`.`order_id`, `study`.`order`.`status`, `study`.`order`.`amout` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid`</span><br><span class=\"line\">16:54:10.712 INFO  com.study.jooq.model.Example 233 view - 创建视图,执行结果:0</span><br><span class=\"line\">16:54:10.760 INFO  com.study.jooq.model.Example 239 view - uid:100，姓名:张三，订单号:200</span><br><span class=\"line\">16:54:10.761 INFO  com.study.jooq.model.Example 239 view - uid:100，姓名:张三，订单号:201</span><br><span class=\"line\">16:54:10.761 INFO  com.study.jooq.model.Example 239 view - uid:101，姓名:李四，订单号:202</span><br><span class=\"line\">16:54:10.765 INFO  com.study.jooq.model.Example 244 view - 删除视图,执行结果:0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><h3 id=\"获取SQL语句\"><a href=\"#获取SQL语句\" class=\"headerlink\" title=\"获取SQL语句\"></a>获取SQL语句</h3><p>JOOQ允许在执行(fetch*、excute)前的SQL构建阶段，获取任一阶段的文本SQL语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//2张表完成左外连接构建阶段后的Step</span><br><span class=\"line\">SelectForUpdateStep sfus=create</span><br><span class=\"line\">        .select(USER.MOBILE, USER.NAME, USER.AGE, ORDER.ORDER_ID, ORDER.AMOUT, ORDER.ORDER_TIME)</span><br><span class=\"line\">        .from(USER).leftOuterJoin(ORDER)</span><br><span class=\"line\">        .on(USER.UID.eq(ORDER.UID));</span><br><span class=\"line\"></span><br><span class=\"line\">//2张表查询语句构建结束后的Step</span><br><span class=\"line\">SelectForUpdateStep sfus1=create</span><br><span class=\"line\">        .select(USER.MOBILE,USER.NAME,USER.AGE,ORDER.ORDER_ID,ORDER.AMOUT,ORDER.ORDER_TIME)</span><br><span class=\"line\">        .from(USER).leftOuterJoin(ORDER)</span><br><span class=\"line\">        .on(USER.UID.eq(ORDER.UID))</span><br><span class=\"line\">        .where(USER.UID.eq(uid[0]).and(ORDER.AMOUT.ge(100l)))</span><br><span class=\"line\">        .limit(0, 10);</span><br><span class=\"line\">log.info(&quot;s:&quot; + sfus.getSQL());</span><br><span class=\"line\">log.info(&quot;s1:&quot; + sfus.getSQL());</span><br><span class=\"line\"></span><br><span class=\"line\">14:23:05.305 INFO  com.study.jooq.model.Example 123 advance - s:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid`</span><br><span class=\"line\"></span><br><span class=\"line\">14:23:05.306 INFO  com.study.jooq.model.Example 124 advance - s1:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Some-else\"><a href=\"#Some-else\" class=\"headerlink\" title=\"Some else\"></a>Some else</h2><h3 id=\"JPA与JDBC有什么区别？\"><a href=\"#JPA与JDBC有什么区别？\" class=\"headerlink\" title=\"JPA与JDBC有什么区别？\"></a>JPA与JDBC有什么区别？</h3><ul>\n<li>JDBC：Java Data Base Connectivity，java数据库连接，用于直接调用SQL 命令，也就是用于执行SQL语句的Java API，是面向数据库的。</li>\n<li>JPA：Java Persistence API，Java持久性API，用来操作实体对象，持久性提供了很多实现，编程人员只需要编写实体类，实体类中的主要信息为实体与数据库中表、字段、主键的对应，可以免除编写繁琐的SQL。</li>\n</ul>\n","excerpt":"<p>2016年后换了一家公司干，后台ORM层用的是JOOQ，完全陌生的东西。干这一行越久，越觉得有更多有趣的新事物需要去探索。想起小说<a href=\"https://book.douban.com/subject/26586492/\">《火星救援》</a>，主人Mark侥幸在风暴中幸存后，一步步的将自己救出困境，遇到的难题或大或小，皆有优雅解决之法。","more":"一切看似偶然蹊跷，其实与Mark的长期相关储备分不开。所谓艺多不压身，应该在有限的时间里，得到更多的成长，以期待机会来时接得住。</p>\n<p>下文中的学习示例代码，已经整理完毕：<a href=\"https://github.com/amao12580/JOOQ\">https://github.com/amao12580/JOOQ</a></p>\n<h2 id=\"什么是JOOQ？\"><a href=\"#什么是JOOQ？\" class=\"headerlink\" title=\"什么是JOOQ？\"></a>什么是JOOQ？</h2><p><a href=\"http://www.jooq.org/\">JOOQ</a>，全称Java Object Oriented Querying，即面向Java对象查询。它是<a href=\"http://www.datageekery.com/\">Data Geekery</a>公司研发的DA方案(Data Access Layer)，主要解决两个问题：</p>\n<ol>\n<li>Hibernate的抽象使得我们离SQL太远，对SQL的掌控力度弱</li>\n<li>JDBC又过于嘈杂，需要干的事情太多</li>\n</ol>\n<p>JOOQ希望干的就是在上述两者中寻找一个最佳的平衡。它依据数据库中的表生成DA相关的代码，开发者将生成的代码引入项目中即可使用。</p>\n<p>有好几个版本</p>\n<ul>\n<li>OpenSource</li>\n<li>Express</li>\n<li>Professional</li>\n<li>Enterprise</li>\n</ul>\n<p>OpenSource版本针对开源数据库，已经够用了。其它的几个版本针对非开源数据库，差异在于不同的后续支持。</p>\n<p>JOOQ应用在DAO层中，原理是：在DAO层使用Java语言编写SQL语句，内部转换成数据库可执行的SQL语句，通过数据库驱动，提交SQL语句到RDBMS执行，接受处理结果，转换为POJO，返回到应用层。</p>\n<p>它与Hibernate不同，不依赖使用字符串变量在Java代码中拼接SQL语句。在复杂SQL语句中，与变量的组合拼接时，SQL被割裂成多个部分，失去了宝贵的可读性，这简直是噩梦。而且Hibernate饱受诟病的连接查询配置复杂以及HQL语法的问题，在JOOQ中不复存在。</p>\n<p>它与Mybatis不同，不依赖繁琐分散的XML进行SQL预定义。代码与SQL语句的分离，初衷是为了解决SQL嵌入代码时带来不直观的复杂性，但是分离的代价是维护工作倍增以及类型转换问题，经常遭遇到应用层代码变更，而XML定义未同步变更，IDE几乎无法解决。又或者开发人员改动一个XML文件，却意外影响多处上层代码，而这个问题很难避免。</p>\n<p>更进一步的，JOOQ提供原生的类型安全转换，以及POJO维护，免去大量一次性代码的编写。当然，你也可以使用Eclipse<a href=\"http://my.oschina.net/lujianing/blog/200135\">代码生成插件</a>解决这个问题，但是如果ORM能自动解决(结合Maven Plugin)，为什么拒绝呢？</p>\n<p>使用这种DAO模式，可以通过类的方式来进行数据库访问了。而且对SQL控制粒度加大的同时，维护工作并没有因此倍增，这对于开发人员是更好的解决方案，也是未来的趋势。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用JOOQ进行2张表内连接查询示例</span><br><span class=\"line\"></span><br><span class=\"line\">// Typesafely execute the SQL statement directly with jOOQ</span><br><span class=\"line\">Result&lt;Record3&lt;String, String, String&gt;&gt; result =</span><br><span class=\"line\">create.select(BOOK.TITLE, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)</span><br><span class=\"line\">    .from(BOOK)</span><br><span class=\"line\">    .join(AUTHOR)</span><br><span class=\"line\">    .on(BOOK.AUTHOR_ID.equal(AUTHOR.ID))</span><br><span class=\"line\">    .where(BOOK.PUBLISHED_IN.equal(1948))</span><br><span class=\"line\">    .fetch();</span><br></pre></td></tr></table></figure>\n<h3 id=\"VS-主流ORM框架\"><a href=\"#VS-主流ORM框架\" class=\"headerlink\" title=\"VS 主流ORM框架\"></a>VS 主流ORM框架</h3><ul>\n<li><a href=\"http://blog.jooq.org/2015/03/24/jooq-vs-hibernate-when-to-choose-which/\">JOOQ vs. Hibernate: When to Choose Which</a></li>\n<li><a href=\"http://blog.jooq.org/2013/07/13/sql-templating-with-jooq-or-mybatis/\">SQL Templating with jOOQ or MyBatis</a><h3 id=\"优势和局限性\"><a href=\"#优势和局限性\" class=\"headerlink\" title=\"优势和局限性\"></a>优势和局限性</h3></li>\n</ul>\n<p>优势</p>\n<ul>\n<li>JOOQ 高效的合并了复杂SQL、<a href=\"http://blog.jooq.org/2015/05/26/type-safe-queries-for-jpas-native-query-api/\">类型安全</a>、<a href=\"#Code-Generation\">源码生成</a>、Active Records、存储过程以及高级数据类型的 Java 类库。支持DB2, Derby, Ingres, H2, HSQLDB, MySQL, Oracle, Postgres, SQLite, SQL Server, Sybase。</li>\n</ul>\n<p>局限性</p>\n<ul>\n<li>开发人员需要转换思维，接受新事物，May be better？</li>\n</ul>\n<h2 id=\"入门篇\"><a href=\"#入门篇\" class=\"headerlink\" title=\"入门篇\"></a>入门篇</h2><h3 id=\"With-Maven\"><a href=\"#With-Maven\" class=\"headerlink\" title=\"With Maven\"></a>With Maven</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--MySQL JDBC driver, 数据库迁移等情况下需要. --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.1.36&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--如果不将该包导入, 编译会报错, 有人遇到了同样的问题.</span><br><span class=\"line\">https://code.google.com/p/jsonrpc4j/issues/detail?id=21--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;javax.portlet&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;portlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.0&lt;/version&gt;</span><br><span class=\"line\">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Code-Generation\"><a href=\"#Code-Generation\" class=\"headerlink\" title=\"Code Generation\"></a>Code Generation</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--数据库schema代码生成器 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.jooq&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jooq-codegen&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.6.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据库代码生成的插件 --&gt;</span><br><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;!-- Specify the maven code generator plugin --&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.jooq&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.6.1&lt;/version&gt;</span><br><span class=\"line\">    &lt;!-- The plugin should hook into the generate goal --&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;generate&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;!-- JDBC connection parameters --&gt;</span><br><span class=\"line\">        &lt;jdbc&gt;</span><br><span class=\"line\">            &lt;driver&gt;com.mysql.jdbc.Driver&lt;/driver&gt;</span><br><span class=\"line\">            &lt;url&gt;$&#123;db.url&#125;&lt;/url&gt;</span><br><span class=\"line\">            &lt;user&gt;$&#123;db.username&#125;&lt;/user&gt;</span><br><span class=\"line\">            &lt;password&gt;$&#123;db.password&#125;&lt;/password&gt;</span><br><span class=\"line\">        &lt;/jdbc&gt;</span><br><span class=\"line\">        &lt;!-- Generator parameters --&gt;</span><br><span class=\"line\">        &lt;generator&gt;</span><br><span class=\"line\">            &lt;database&gt;</span><br><span class=\"line\">                &lt;name&gt;org.jooq.util.mysql.MySQLDatabase&lt;/name&gt;</span><br><span class=\"line\">                &lt;includes&gt;.*&lt;/includes&gt;</span><br><span class=\"line\">                &lt;inputSchema&gt;$&#123;db.schema&#125;&lt;/inputSchema&gt;</span><br><span class=\"line\">                &lt;forcedTypes&gt;</span><br><span class=\"line\">                    &lt;forcedType&gt;</span><br><span class=\"line\">                        &lt;name&gt;BOOLEAN&lt;/name&gt;</span><br><span class=\"line\">                        &lt;expression&gt;.*\\.HANDMADE&lt;/expression&gt;</span><br><span class=\"line\">                        &lt;types&gt;.*&lt;/types&gt;</span><br><span class=\"line\">                    &lt;/forcedType&gt;</span><br><span class=\"line\">                &lt;/forcedTypes&gt;</span><br><span class=\"line\">            &lt;/database&gt;</span><br><span class=\"line\">            &lt;target&gt;</span><br><span class=\"line\">                &lt;packageName&gt;com.study.jooq.common.generated&lt;/packageName&gt;</span><br><span class=\"line\">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class=\"line\">            &lt;/target&gt;</span><br><span class=\"line\">        &lt;/generator&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"With-Flyway\"><a href=\"#With-Flyway\" class=\"headerlink\" title=\"With Flyway\"></a>With Flyway</h3><p>Flyway 是独立于数据库的应用、管理并跟踪数据库变更的数据库版本管理工具。</p>\n<p><a href=\"http://www.cnblogs.com/huang0925/p/4409506.html\">Flyway， 数据库Schema管理利器</a></p>\n<p>在pom.xml的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--防止maven改动IDE的language level --&gt;</span><br><span class=\"line\">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class=\"line\">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--数据库迁移所用的参数 --&gt;</span><br><span class=\"line\">    &lt;db.url&gt;jdbc:mysql://localhost:3306&lt;/db.url&gt;</span><br><span class=\"line\">    &lt;db.username&gt;root&lt;/db.username&gt;</span><br><span class=\"line\">    &lt;db.password&gt;zhilaiadmin&lt;/db.password&gt;</span><br><span class=\"line\">    &lt;db.schema&gt;study&lt;/db.schema&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--数据库迁移, 同步的插件 --&gt;</span><br><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;flyway-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.0&lt;/version&gt;</span><br><span class=\"line\">    &lt;!-- Note that we&apos;re executing the Flyway plugin in the &quot;generate-sources&quot; phase --&gt;</span><br><span class=\"line\">    &lt;executions&gt;</span><br><span class=\"line\">        &lt;execution&gt;</span><br><span class=\"line\">            &lt;phase&gt;generate-sources&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">                &lt;goal&gt;migrate&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">        &lt;/execution&gt;</span><br><span class=\"line\">    &lt;/executions&gt;</span><br><span class=\"line\">    &lt;!-- Note that we need to prefix the db/migration path with filesystem:</span><br><span class=\"line\">    to prevent Flyway from looking for our migration scripts only on the classpath --&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;url&gt;$&#123;db.url&#125;&lt;/url&gt;</span><br><span class=\"line\">        &lt;user&gt;$&#123;db.username&#125;&lt;/user&gt;</span><br><span class=\"line\">        &lt;password&gt;$&#123;db.password&#125;&lt;/password&gt;</span><br><span class=\"line\">        &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</span><br><span class=\"line\">        &lt;schemas&gt;</span><br><span class=\"line\">            &lt;schema&gt;$&#123;db.schema&#125;&lt;/schema&gt;</span><br><span class=\"line\">        &lt;/schemas&gt;</span><br><span class=\"line\">        &lt;locations&gt;</span><br><span class=\"line\">            &lt;location&gt;filesystem:src/main/resources/db/migration&lt;/location&gt;</span><br><span class=\"line\">        &lt;/locations&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在工程：src/main/resources/db/migration目录下，没有目录文件夹时需要先创建文件夹。放入数据库初始化SQL脚本：V1__init_database.sql。注意在maven中配置的db.schema=study，表明需要使用的数据库名称是study，study需要事先不存在。</p>\n<p>执行maven -clean、maven -install成功后，发现数据库有了新的数据库study，并且该数据库有了order、user、schema_version三张表，user、order是我们在脚本中定义需要生成的表，而schema_version是flyway生成的，维护数据库版本升级时的信息。对应的在代码中，生成了三个POJO。</p>\n<p>代码生成示例：<br><img src=\"/img/jooq-flyway.png\" alt=\"IDEA使用JOOQ自动生成代码\"></p>\n<h3 id=\"With-HikariCp\"><a href=\"#With-HikariCp\" class=\"headerlink\" title=\"With HikariCp\"></a>With HikariCp</h3><p>HikariCP号称是现在性能最好的JDBC连接池组件，具体的性能到底如何，我也没有仔细的测试过，不过从它现在的发展来看，其可能确实如它宣传的那样其性能高过目前所有的连接池组件。之前对连接池的记忆一直都是C3P0、DBCP、BoneCP，这三者中BoneCP的性能是最好的，C3P0的性能在现在来说确实是非常差的了，好像C3P0很久都没有更新了，所以我们应该杜绝在项目中使用C3P0，至于是否要使用HikariCP，我觉得可以尝试。HikariCP毕竟是才出来不久，其性能到底如何，也需要实践的检验，若是担心新东西有坑，我推荐使用BoneCP。Spring现在也集成了HikariCP，所以我觉得很有尝试它的必要。前不久我在项目中使用了HikariCP，也没出现什么问题，运行比较稳定。</p>\n<p>HikariCP在github上的地址：<a href=\"https://github.com/brettwooldridge/HikariCP\">https://github.com/brettwooldridge/HikariCP</a></p>\n<p><a href=\"http://blog.csdn.net/clementad/article/details/46928621\">为什么HikariCP被号称为性能最好的Java数据库连接池，如何配置使用?</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--JDBC连接池 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单的CRUD\"><a href=\"#简单的CRUD\" class=\"headerlink\" title=\"简单的CRUD\"></a>简单的CRUD</h3><p>为保持example的干净与轻便，不使用Spring进行ORM层的管理，我采用<a href=\"http://www.oschina.net/question/12_10706\">ARM</a>的方式来管理SQL链接，在try with resource块结束后自动释放SQL链接。</p>\n<p>有需要与Spring进行整合的，Follow这篇文章吧！<br><a href=\"http://www.jooq.org/doc/3.7/manual/getting-started/tutorials/jooq-with-spring/\">Using JOOQ with Spring and Apache DBCP</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    int uid =180;</span><br><span class=\"line\"></span><br><span class=\"line\">    //add</span><br><span class=\"line\">    UserRecord userRecord=create.newRecord(USER);</span><br><span class=\"line\">    userRecord.setAge((byte) 18);</span><br><span class=\"line\">    userRecord.setMobile(&quot;15985236985&quot;);</span><br><span class=\"line\">    userRecord.setName(&quot;赵六&quot;);</span><br><span class=\"line\">    userRecord.setUid(uid);</span><br><span class=\"line\">    userRecord.setSex((byte) 1);</span><br><span class=\"line\">    userRecord.setPassword(String.valueOf(System.nanoTime()));</span><br><span class=\"line\">    userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class=\"line\">    int insertRet=userRecord.insert();//执行insert sql</span><br><span class=\"line\">    //userRecord.store();//可能会执行insert，也有可能执行update，文档说明的很清晰</span><br><span class=\"line\">    //userRecord.refresh();//从数据库重新加载该记录</span><br><span class=\"line\">    log.info(&quot;insertRet:&#123;&#125;&quot;, insertRet);</span><br><span class=\"line\"></span><br><span class=\"line\">    //index</span><br><span class=\"line\">    int createIndexRet=create.createIndex(&quot;user_index_mobile_unique&quot;)</span><br><span class=\"line\">            .on(USER, USER.MOBILE)</span><br><span class=\"line\">            .execute();//为手机号码字段创建唯一索引</span><br><span class=\"line\">    int dropIndexRet=create.dropIndex(&quot;user_index_mobile_unique&quot;)</span><br><span class=\"line\">            .on(USER)</span><br><span class=\"line\">            .execute();//删除索引</span><br><span class=\"line\">    log.info(&quot;dropIndexRet:&#123;&#125;,createIndexRet:&#123;&#125;&quot;, dropIndexRet, createIndexRet);</span><br><span class=\"line\"></span><br><span class=\"line\">    //select</span><br><span class=\"line\">    Record record=create.select(USER.NAME,USER.UID)</span><br><span class=\"line\">            .from(USER)</span><br><span class=\"line\">            .where(USER.MOBILE.eq(&quot;15985236985&quot;))</span><br><span class=\"line\">            .limit(1)</span><br><span class=\"line\">            .fetchOne();</span><br><span class=\"line\">    log.info(&quot;姓名:&#123;&#125;，uid:&#123;&#125;&quot;, record.getValue(USER.NAME), record.getValue(USER.UID));</span><br><span class=\"line\"></span><br><span class=\"line\">    Result&lt;UserRecord&gt; userRecords=create.selectFrom(USER)</span><br><span class=\"line\">            .where(USER.SEX.eq((byte) 1).and(USER.MOBILE.like(&quot;159%&quot;)))</span><br><span class=\"line\">            .orderBy(USER.MOBILE.asc()).limit(0, 20).fetch();</span><br><span class=\"line\"></span><br><span class=\"line\">    for (UserRecord ur:userRecords)&#123;</span><br><span class=\"line\">        log.info(&quot;mobile:&#123;&#125;,uid:&#123;&#125;,registerTime:&#123;&#125;&quot;, ur.getMobile(), ur.getUid(), ur.getRegisterTime().getTime());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //delete</span><br><span class=\"line\">    int deleteRecordRet=create.deleteFrom(USER).where(USER.UID.eq(uid)).execute();</span><br><span class=\"line\">    log.info(&quot;deleteRecordRet:&#123;&#125;&quot;, deleteRecordRet);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">日志打印信息：</span><br><span class=\"line\">21:01:20.009 INFO  com.zaxxer.hikari.HikariDataSource 72 &lt;init&gt; - Hikari pool HikariPool-0 is starting.</span><br><span class=\"line\">21:01:20.561 INFO  org.jooq.tools.JooqLogger 331 info -</span><br><span class=\"line\"></span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@  @@        @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@  @@  @@    @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@  @@@@  @@  @@    @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@        @@        @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@        @@        @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@    @@  @@  @@@@  @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@        @@  @  @  @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@        @@        @@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  Thank you for using jOOQ 3.6.1</span><br><span class=\"line\"></span><br><span class=\"line\">21:01:20.593 INFO  com.study.jooq.model.Example 42 base - insertRet:1</span><br><span class=\"line\">21:01:21.197 INFO  com.study.jooq.model.Example 51 base - dropIndexRet:0,createIndexRet:0</span><br><span class=\"line\">21:01:21.278 INFO  com.study.jooq.model.Example 59 base - 姓名:赵六，uid:180</span><br><span class=\"line\">21:01:21.282 INFO  com.study.jooq.model.Example 66 base - mobile:15925874536,uid:102,registerTime:1459331629000</span><br><span class=\"line\">21:01:21.282 INFO  com.study.jooq.model.Example 66 base - mobile:15985236985,uid:180,registerTime:1459429281000</span><br><span class=\"line\">21:01:21.285 INFO  com.study.jooq.model.Example 71 base - deleteRecordRet:1</span><br><span class=\"line\">21:01:21.285 INFO  com.zaxxer.hikari.pool.HikariPool 242 shutdown - Hikari pool HikariPool-0 is shutting down.</span><br><span class=\"line\">21:01:21.331 INFO  com.zaxxer.hikari.util.ConcurrentBag 197 add - ConcurrentBag has been closed, ignoring add()</span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h2><h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    final int[] uid = new int[1];</span><br><span class=\"line\"></span><br><span class=\"line\">    //transaction</span><br><span class=\"line\"></span><br><span class=\"line\">    create.transaction(configuration -&gt; &#123;</span><br><span class=\"line\">        //add</span><br><span class=\"line\">        UserRecord userRecord=create.newRecord(USER);</span><br><span class=\"line\">        userRecord.setAge((byte) 18);</span><br><span class=\"line\">        userRecord.setMobile(&quot;18525874539&quot;);</span><br><span class=\"line\">        userRecord.setName(&quot;赵六&quot;);</span><br><span class=\"line\">        userRecord.setSex((byte) 1);</span><br><span class=\"line\">        userRecord.setPassword(String.valueOf(System.nanoTime()));</span><br><span class=\"line\">        userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class=\"line\">        int insertUserRet=userRecord.insert();//执行insert sql</span><br><span class=\"line\">        uid[0] =userRecord.getUid();</span><br><span class=\"line\">        log.info(&quot;insertUserRet:&#123;&#125;&quot;, insertUserRet);</span><br><span class=\"line\">        //add</span><br><span class=\"line\">        OrderRecord orderRecord=create.newRecord(ORDER);</span><br><span class=\"line\">        orderRecord.setUid(userRecord.getUid());</span><br><span class=\"line\">        orderRecord.setAmout(25000l);</span><br><span class=\"line\">        orderRecord.setOrderId(new BigDecimal(System.nanoTime()).intValue());</span><br><span class=\"line\">        orderRecord.setOrderTime(new Timestamp(System.currentTimeMillis()));</span><br><span class=\"line\">        orderRecord.setStatus((byte)0);</span><br><span class=\"line\">        int insertOrderRet=orderRecord.insert();//执行insert sql</span><br><span class=\"line\">        log.info(&quot;insertOrderRet:&#123;&#125;&quot;, insertOrderRet);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">12:51:14.724 INFO  com.study.jooq.model.Example 90 lambda$advance$0 - insertUserRet:1</span><br><span class=\"line\">12:51:14.743 INFO  com.study.jooq.model.Example 99 lambda$advance$0 - insertOrderRet:1</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h3><p>在处理复杂SQL时，JOOQ的思路是由Java代码以<a href=\"http://www.jianshu.com/p/540711c1a507\">链式编程</a>的方式来解决可读性的问题。</p>\n<p>下文中的查询语句，等价于：<br>select <code>study</code>.<code>user</code>.<code>mobile</code>, <code>study</code>.<code>user</code>.<code>name</code>, <code>study</code>.<code>user</code>.<code>age</code>, <code>study</code>.<code>order</code>.<code>order_id</code>, <code>study</code>.<code>order</code>.<code>amout</code>, <code>study</code>.<code>order</code>.<code>order_time</code><br>    from <code>study</code>.<code>user</code> left outer join <code>study</code>.<code>order</code><br>    on <code>study</code>.<code>user</code>.<code>uid</code> = <code>study</code>.<code>order</code>.<code>uid</code><br>    where (<code>study</code>.<code>user</code>.<code>uid</code> = ? and <code>study</code>.<code>order</code>.<code>amout</code> &gt;= ?)<br>    limit ?<br>可以发现SQL语句与代码保持了很高的相似性，可读性几乎没有损失。</p>\n<p>其他的特性：group by与having、union、union all也都是在api级别支持的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    int uid=15874523;</span><br><span class=\"line\"></span><br><span class=\"line\">    //join select</span><br><span class=\"line\"></span><br><span class=\"line\">    Result&lt;Record6&lt;String,String,Byte,Integer,Long,Timestamp&gt;&gt; results=create</span><br><span class=\"line\">            .select(USER.MOBILE,USER.NAME,USER.AGE,ORDER.ORDER_ID,ORDER.AMOUT,ORDER.ORDER_TIME)</span><br><span class=\"line\">            .from(USER).leftOuterJoin(ORDER)</span><br><span class=\"line\">            .on(USER.UID.eq(ORDER.UID))</span><br><span class=\"line\">            .where(USER.UID.eq(uid[0]).and(ORDER.AMOUT.ge(100l)))</span><br><span class=\"line\">            .limit(0,10).fetch();</span><br><span class=\"line\">    for (Record6&lt;String,String,Byte,Integer,Long,Timestamp&gt; record:results)&#123;</span><br><span class=\"line\">        log.info(&quot;姓名:&#123;&#125;，手机号码:&#123;&#125;，年龄:&#123;&#125;，订单号:&#123;&#125;，订单金额:&#123;&#125;，订单时间:&#123;&#125;&quot;,</span><br><span class=\"line\">                record.getValue(USER.NAME),record.getValue(USER.MOBILE),record.getValue(USER.AGE),</span><br><span class=\"line\">                record.getValue(ORDER.ORDER_ID),record.getValue(ORDER.AMOUT),</span><br><span class=\"line\">                record.getValue(ORDER.ORDER_TIME));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">12:51:14.898 INFO  com.study.jooq.model.Example 110 advance - 姓名:赵六，手机号码:18525874539，年龄:18，订单号:-1725080559，订单金额:25000，订单时间:1459486275000</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"批处理\"><a href=\"#批处理\" class=\"headerlink\" title=\"批处理\"></a>批处理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//batchInsert</span><br><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    List&lt;UserRecord&gt; list=new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">     //batchInsert</span><br><span class=\"line\">    UserRecord userRecord=create.newRecord(USER);</span><br><span class=\"line\">    userRecord.setAge((byte) 18);</span><br><span class=\"line\">    userRecord.setMobile(&quot;17058963215&quot;);</span><br><span class=\"line\">    userRecord.setName(&quot;赵六&quot;);</span><br><span class=\"line\">    userRecord.setSex((byte) 1);</span><br><span class=\"line\">    userRecord.setPassword(String.valueOf(System.nanoTime()));</span><br><span class=\"line\">    userRecord.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class=\"line\">    list.add(userRecord);</span><br><span class=\"line\"></span><br><span class=\"line\">    UserRecord userRecord2=create.newRecord(USER);</span><br><span class=\"line\">    userRecord2.setAge((byte) 29);</span><br><span class=\"line\">    userRecord2.setMobile(&quot;17058963216&quot;);</span><br><span class=\"line\">    userRecord2.setName(&quot;马七&quot;);</span><br><span class=\"line\">    userRecord2.setSex((byte) 1);</span><br><span class=\"line\">    userRecord2.setPassword(String.valueOf(System.nanoTime()));</span><br><span class=\"line\">    userRecord2.setRegisterTime(new Timestamp(System.currentTimeMillis()));</span><br><span class=\"line\">    list.add(userRecord2);</span><br><span class=\"line\">    //使用batchInsert时，无法获取SQL语句</span><br><span class=\"line\">    int insertRetArr[]=create.batchInsert(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class=\"line\"></span><br><span class=\"line\">    log.info(&quot;insertRetArr:&#123;&#125;&quot;, Arrays.toString(insertRetArr));//数组每个元素为1时，执行成功</span><br><span class=\"line\">    //使用batchInsert时，无法获取数据自增长的主键值</span><br><span class=\"line\">    log.info(&quot;userRecord:uid:&#123;&#125;&quot;, userRecord.getUid());</span><br><span class=\"line\">    log.info(&quot;userRecord2:uid:&#123;&#125;&quot;, userRecord2.getUid());</span><br><span class=\"line\"></span><br><span class=\"line\">    userRecord.refresh();</span><br><span class=\"line\">    userRecord2.refresh();</span><br><span class=\"line\">    log.info(&quot;userRecord:uid:&#123;&#125;&quot;, userRecord.getUid());</span><br><span class=\"line\">    log.info(&quot;userRecord2:uid:&#123;&#125;&quot;, userRecord2.getUid());</span><br><span class=\"line\"></span><br><span class=\"line\">    //batchUpdate</span><br><span class=\"line\">    userRecord.setAge((byte) 38);</span><br><span class=\"line\">    userRecord2.setAge((byte) 78);</span><br><span class=\"line\">    list.clear();</span><br><span class=\"line\">    list.add(userRecord);</span><br><span class=\"line\">    list.add(userRecord2);</span><br><span class=\"line\">    //使用batchUpdate时，无法获取SQL语句</span><br><span class=\"line\">    int updateRetArr[]=create.batchUpdate(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class=\"line\">    log.info(&quot;updateRetArr:&#123;&#125;&quot;, Arrays.toString(updateRetArr));//数组每个元素为1时，执行成功</span><br><span class=\"line\"></span><br><span class=\"line\">    //batchDelete</span><br><span class=\"line\">    //使用batchDelete时，无法获取SQL语句</span><br><span class=\"line\">    int deleteRetArr[]=create.batchDelete(list).execute();//返回值是一个int数组，长度与输入的集合size有关。</span><br><span class=\"line\">    log.info(&quot;deleteRetArr:&#123;&#125;&quot;, Arrays.toString(deleteRetArr));//数组每个元素为1时，执行成功</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">15:06:46.281 INFO  com.study.jooq.model.Example 163 batch - insertRetArr:[1, 1]</span><br><span class=\"line\">15:06:46.281 INFO  com.study.jooq.model.Example 165 batch - userRecord:uid:null</span><br><span class=\"line\">15:06:46.281 INFO  com.study.jooq.model.Example 166 batch - userRecord2:uid:null</span><br><span class=\"line\">15:06:46.287 INFO  com.study.jooq.model.Example 176 batch - updateRetArr:[0, 0]</span><br><span class=\"line\">15:06:46.291 INFO  com.study.jooq.model.Example 182 batch - deleteRetArr:[0, 0]</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>JOOQ没有提供API对函数进行显式的支持，这意味着不能通过JOOQ进行函数的create/execute/drop。但是JOOQ支持直接执行拼接好的字符串SQL语句，这为我们进行函数execute提供了可行性。实际使用中，使用ORM层对数据库函数进行create/drop的需求几乎不存在。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 先在Mysql中添加自定义函数，你也可以使用Flyway的方式来做，在migration文件夹下加一个V2 sql文件。重新执行maven -install即可生效，实际上我更推荐使用这种方式来进行数据库历史SQL执行管理。</span><br><span class=\"line\"></span><br><span class=\"line\">USE study;</span><br><span class=\"line\">DROP FUNCTION IF EXISTS formatDate;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\">CREATE FUNCTION formatDate(fdate datetime)</span><br><span class=\"line\">RETURNS VARCHAR(255)</span><br><span class=\"line\">RETURN date_format(fdate,&apos;%Y年%m月%d日%h时%i分%s秒&apos;);</span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT formatDate(NOW()) AS &apos;时间&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">2. 使用JOOQ进行函数execute</span><br><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    //formatDate是我们在mysql里自定义的函数</span><br><span class=\"line\">    Result&lt;Record&gt; results=create.fetch(&quot;SELECT formatDate(NOW()) AS &apos;时间&apos;;&quot;);</span><br><span class=\"line\">    for (Record record:results)&#123;</span><br><span class=\"line\">        log.info(&quot;执行结果:&#123;&#125;&quot;,record.getValue(0));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">15:54:28.815 INFO  com.study.jooq.model.Example 199 function - 执行结果:2016年04月01日03时54分28秒</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h3><p>存储过程同函数一样，没有进行显式的create/drop支持。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 先在Mysql中添加存储过程</span><br><span class=\"line\">USE study;</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS getAllUid;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\">CREATE PROCEDURE getAllUid()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">  SELECT uid FROM user;</span><br><span class=\"line\">END//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">CALL getAllUid();</span><br><span class=\"line\"></span><br><span class=\"line\">2. 使用JOOQ进行存储过程execute</span><br><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    //getAllUid是我们在mysql里定义的存储过程</span><br><span class=\"line\">    Result&lt;Record&gt; results=create.fetch(&quot;CALL getAllUid()&quot;);</span><br><span class=\"line\">    for (Record record:results)&#123;</span><br><span class=\"line\">        log.info(&quot;执行结果:&#123;&#125;&quot;,record.getValue(0));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">16:08:19.333 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:100</span><br><span class=\"line\">16:08:19.333 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:102</span><br><span class=\"line\">16:08:19.334 INFO  com.study.jooq.model.Example 211 procedure - 执行结果:101</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><p>通过代码构建视图后，JOOQ不能自动生成视图对应的实体类，需要手工做一次maven -install。以下示例中会生成类文件：Userwithorder.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try(ScopedContext scopedContext=new ScopedContext())&#123;//try with resource</span><br><span class=\"line\">    DSLContext create=scopedContext.getDSLContext();</span><br><span class=\"line\">    //创建视图</span><br><span class=\"line\"></span><br><span class=\"line\">    //定义视图名称为：userwithorder</span><br><span class=\"line\">    CreateViewFinalStep step=create.createView(&quot;userwithorder&quot;,USER.UID.getName(),USER.NAME.getName(),ORDER.ORDER_ID.getName(),ORDER.STATUS.getName(),ORDER.AMOUT.getName())</span><br><span class=\"line\">            .as(</span><br><span class=\"line\">                    create.select(USER.UID, USER.NAME, ORDER.ORDER_ID, ORDER.STATUS, ORDER.AMOUT)</span><br><span class=\"line\">                            .from(USER)</span><br><span class=\"line\">                            .leftOuterJoin(ORDER)</span><br><span class=\"line\">                            .on(USER.UID.eq(ORDER.UID))</span><br><span class=\"line\">            );</span><br><span class=\"line\">    log.info(&quot;SQL:&#123;&#125;&quot;,step.getSQL());</span><br><span class=\"line\">    int ret=step.execute();</span><br><span class=\"line\">    log.info(&quot;创建视图,执行结果:&#123;&#125;&quot;,ret);</span><br><span class=\"line\"></span><br><span class=\"line\">    //查询视图</span><br><span class=\"line\">    Result&lt;Record3&lt;Integer,String,Integer&gt;&gt; results=create.select(USERWITHORDER.UID,USERWITHORDER.NAME,USERWITHORDER.ORDER_ID)</span><br><span class=\"line\">            .from(USERWITHORDER).where(USERWITHORDER.AMOUT.ge(200l)).fetch();</span><br><span class=\"line\">    for (Record3&lt;Integer,String,Integer&gt; record:results)&#123;</span><br><span class=\"line\">        log.info(&quot;uid:&#123;&#125;，姓名:&#123;&#125;，订单号:&#123;&#125;&quot;,</span><br><span class=\"line\">                record.getValue(USERWITHORDER.UID),record.getValue(USERWITHORDER.NAME),record.getValue(USERWITHORDER.ORDER_ID));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //删除视图</span><br><span class=\"line\">    int dropRet=create.dropView(&quot;userwithorder&quot;).execute();</span><br><span class=\"line\">    log.info(&quot;删除视图,执行结果:&#123;&#125;&quot;,dropRet);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">16:54:10.597 INFO  com.study.jooq.model.Example 231 view - SQL:create view `userwithorder`(`uid`, `name`, `order_id`, `status`, `amout`) as select `study`.`user`.`uid`, `study`.`user`.`name`, `study`.`order`.`order_id`, `study`.`order`.`status`, `study`.`order`.`amout` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid`</span><br><span class=\"line\">16:54:10.712 INFO  com.study.jooq.model.Example 233 view - 创建视图,执行结果:0</span><br><span class=\"line\">16:54:10.760 INFO  com.study.jooq.model.Example 239 view - uid:100，姓名:张三，订单号:200</span><br><span class=\"line\">16:54:10.761 INFO  com.study.jooq.model.Example 239 view - uid:100，姓名:张三，订单号:201</span><br><span class=\"line\">16:54:10.761 INFO  com.study.jooq.model.Example 239 view - uid:101，姓名:李四，订单号:202</span><br><span class=\"line\">16:54:10.765 INFO  com.study.jooq.model.Example 244 view - 删除视图,执行结果:0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><h3 id=\"获取SQL语句\"><a href=\"#获取SQL语句\" class=\"headerlink\" title=\"获取SQL语句\"></a>获取SQL语句</h3><p>JOOQ允许在执行(fetch*、excute)前的SQL构建阶段，获取任一阶段的文本SQL语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//2张表完成左外连接构建阶段后的Step</span><br><span class=\"line\">SelectForUpdateStep sfus=create</span><br><span class=\"line\">        .select(USER.MOBILE, USER.NAME, USER.AGE, ORDER.ORDER_ID, ORDER.AMOUT, ORDER.ORDER_TIME)</span><br><span class=\"line\">        .from(USER).leftOuterJoin(ORDER)</span><br><span class=\"line\">        .on(USER.UID.eq(ORDER.UID));</span><br><span class=\"line\"></span><br><span class=\"line\">//2张表查询语句构建结束后的Step</span><br><span class=\"line\">SelectForUpdateStep sfus1=create</span><br><span class=\"line\">        .select(USER.MOBILE,USER.NAME,USER.AGE,ORDER.ORDER_ID,ORDER.AMOUT,ORDER.ORDER_TIME)</span><br><span class=\"line\">        .from(USER).leftOuterJoin(ORDER)</span><br><span class=\"line\">        .on(USER.UID.eq(ORDER.UID))</span><br><span class=\"line\">        .where(USER.UID.eq(uid[0]).and(ORDER.AMOUT.ge(100l)))</span><br><span class=\"line\">        .limit(0, 10);</span><br><span class=\"line\">log.info(&quot;s:&quot; + sfus.getSQL());</span><br><span class=\"line\">log.info(&quot;s1:&quot; + sfus.getSQL());</span><br><span class=\"line\"></span><br><span class=\"line\">14:23:05.305 INFO  com.study.jooq.model.Example 123 advance - s:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid`</span><br><span class=\"line\"></span><br><span class=\"line\">14:23:05.306 INFO  com.study.jooq.model.Example 124 advance - s1:select `study`.`user`.`mobile`, `study`.`user`.`name`, `study`.`user`.`age`, `study`.`order`.`order_id`, `study`.`order`.`amout`, `study`.`order`.`order_time` from `study`.`user` left outer join `study`.`order` on `study`.`user`.`uid` = `study`.`order`.`uid</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Some-else\"><a href=\"#Some-else\" class=\"headerlink\" title=\"Some else\"></a>Some else</h2><h3 id=\"JPA与JDBC有什么区别？\"><a href=\"#JPA与JDBC有什么区别？\" class=\"headerlink\" title=\"JPA与JDBC有什么区别？\"></a>JPA与JDBC有什么区别？</h3><ul>\n<li>JDBC：Java Data Base Connectivity，java数据库连接，用于直接调用SQL 命令，也就是用于执行SQL语句的Java API，是面向数据库的。</li>\n<li>JPA：Java Persistence API，Java持久性API，用来操作实体对象，持久性提供了很多实现，编程人员只需要编写实体类，实体类中的主要信息为实体与数据库中表、字段、主键的对应，可以免除编写繁琐的SQL。</li>\n</ul>"},{"title":"从零开始Blogging with Hexo教程","date":"2016-04-01T09:38:14.461Z","description":"记录从零开始的Blogging with Hexo的搭建过程.","_content":"\n# 写在前面 #\n\n　　转眼间3月份也即将过去了，在接受了众多的理论输入以及实践之后，决定要将一些值得分享的事情记录下来，一方面是避免自己重复的掉坑，另一方面也希望通过blog的方式锻炼自己的文字能力。输入+沉淀+输出，形成自我知识攫取过程的闭环。\n\n　　下面记录从零开始的Blogging with Hexo的搭建过程，有一些简单的问题，在文末也会给出答案。\n\n## 1.你将要做什么？\n　　跟我一起在GiHub上搭建免费无限流量博客，不限速，有版本追溯管理。sadly，免费的背后是低层次的服务。搭建的博客服务器在国外，国内访问的速度没法保障，后文会给出一定的解决方案。内容的维护只能以静态Html的方式发布，意味着没有数据库，因此带来了幂等性，没有各种Web攻击，算作是一件好事？\n\n　　搭建过程中需要的技术：GitHub的使用、安装NodeJS、安装Hexo及系列插件、安装及配置Jacman主题、新文章的发布、Markdown的持续提高。\n### 1.1国内blog平台的现状\n国内的技术blog平台主要有：cnblogs、51cto、iteye、oschina、infoq等；排名没分先后，纯属个人想法。相信以上blogs，作为技术人，大家一定不陌生。平台型的blog，对个人的有利有弊，优势在于：免去软硬件维护管理的麻烦、不用担心流量和各种安全问题、；劣势也比较明显：内容版权、变现很困难、内容受限、内容面临下线风险\n\n引用[阮一峰先生的总结](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)：\n\n1. 第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。\n2. 第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。\n3. 第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。\n\n即技术人对于blog的核心需求是：发布文章、维护文章、随时控制、免去其他管理，也就是输出可控的文章。\n\n### 1.2如何选择适合自己的blog平台\n国内的blog平台少有让人长期安心逗留的，各种内容审查政策的强压，大环境的逐利性等因素，促使少有blog平台保持良心的同时持续改进其平台，在此不多言。\n我们希望发出的文章，可以进入一个技术人大都汇聚的环境中，以提高影响力。这样的环境可以是个人blog、blogs平台、微信平台等等。如果你有足够的影响力，也希望在作者与读者之间建立交流通道，常见的就是文章的评论回复功能了，其他的也有读者QQ群等社区型交流方式。引申的说，对于不怀好意的评论者，还需要一个评论审核的功能，甚至禁止评论，这都能在下文中得到解决。\n\n### 1.3为什么是Hexo？\n我们怎么评价Hexo？\n\n知乎：[jekyll vs Hexo](https://www.zhihu.com/question/19996679)\n## 2.如何做？\n### 2.1安装和配置NodeJS\n1. 确认你的配置是windows 7，虽然没有限制一定要windows，但是本教程基于windows。![我的系统环境](/img/计算机软硬件配置.png)。\n\n2. [安装NodeJS](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n我的安装完成目录：\n\n![](/img/NodeJS安装完成.png)\n\n3. [解决npm安装模块慢或失败的问题](http://www.cnblogs.com/enix/p/3635343.html)\n```\nnpm config set registry=\"http://registry.npmjs.org\"//设置npm源地址\n```\n确认你的npm配置：\n\n![](/img/npm配置信息.png)\n\n### 2.2获取GitHub账号\nGitHub账号和GitHub Pages 一般都应该有吧，已有的请自动无视这一部分。\n### 2.2yourname.github.io\n* 首先注册一个『GitHub』帐号，已有的默认默认请忽略\n* 建立与你用户名对应的仓库，仓库名必须为『your_user_name.github.com』\n\n### 2.3安装和配置windows GitHub客户端\n不建议在[GitHub官网](https://desktop.github.com/)下载最新客户端，官网下载的客户端大小不到1MB，在本地运行还需要链接Amazon下载具体的安装包，因为国内网络环境，经常下载到一半就断掉.\n\n我个人试了各种方法不得解，最后找到了离线安装版：已存入百度云：链接：http://pan.baidu.com/s/1eRmoG6Y 密码：3vus\n\n因为版本控制工具比较耗系统资源，请尽量安装在非系统所在盘，尽量选择剩余容量大的盘。\n安装完成后，得到2个桌面图标：GitHub、Git Shell。前者是可视化版，后者是命令行版。\n\n我选择使用GitHub,打开后进行GitHub账号登录，第一次登录成功后，绑定邮箱会收到新邮件：[GitHub] A new public key was added to your account\n\n点击左上角“+”号，选择clone，选择自己的yourname.github.io。\n在下一步中选择存放文件夹，我的选择是：\n![](/img/github目录.png)\n\n简单的使用windows GitHub客户端\n\n```\n在对话框顶部有“No uncommitted changes”和“History”，点击后可以进行切换。\n在版本库所在的文件夹有了文件变化后，这里会有变化“28 uncommitted changes”和“History”，28是指的未提交的更改数量。\n填写Summary和Description后，可以进行本地提交：Commit to master。\n此时若还想提交到远程GitHub服务器，点击右上角“Sync”按钮进行同步。\n```\n\n### 2.4安装和配置Hexo\n\n安装和初始化Hexo\n```\n$ cd /d/\n$ mkdir hexo\n$ cd hexo\n$ npm install -g hexo\n$ hexo init\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server，可以在http://localhost:4000/查看\n```\n![](/img/hexo安装目录.png)\n\n安装\n```\n$ hexo clean\n$ git clone https://github.com/wuchong/jacman.git themes/jacman\n```\n![](/img/jacman主题安装目录.png)\n\n\n常用命令\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n```\n\n部署文章到github.io\n```\nhexo clean\nhexo g\n拷贝Hexo文件夹下的public文件夹里的所有文件\n粘贴到yourname.github.io所在磁盘目录中，我的目录是：D:\\GitHub\\amao12580.github.io\n使用GitHub客户端进行提交到远程服务器\n打开yourname.github.io网址即可看到效果啦！\n```\n\n### 2.5为什么是Jacman?\n\n参见评价[Jacman基于Pacman修改的Hexo主题](http://wsgzao.github.io/post/hexo-jacman/)\n\n### 2.6私人定制\n在这里贴出我修改过的一些文件，很多修改都给出了备注。\n\nHexo主配置文件：D:\\GitHub\\Hexo\\\\_config.yml\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: Cat's Blog\nsubtitle: 一饮一啄，莫非前定.\n#为了更便于搜索引擎爬到，添加了网站的keywords\nkeywords: cat's,chengliang,amao12580,blog,developers\ndescription: Follw the https://xuanwo.org/2015/03/26/hexo-intor/\nauthor: Steven Cheng\nlanguage: zh-CN\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://amao12580.github.io\nroot: /\npermalink: post/:year/:month/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\nabout_dir: about\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n  - README.md\n  - 404.html\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\ndatetime_format: YYYY-MM-DD HH:mm:ss.SSS\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: jacman\nstylus:\n  compress: true\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n\n\n# Others\nindex_generator:\n  per_page: 5 ##首页默认10篇文章标题 如果值为0不分页\n\narchive_generator:\n    per_page: 0 ##归档页面默认10篇文章标题\n    yearly: true  ##生成年视图\n    monthly: true ##生成月视图\n\ntag_generator:\n    per_page: 0 ##标签分类页面默认10篇文章\n\ncategory_generator:\n    per_page: 0 ###分类页面默认10篇文章\n\nfeed:\n    type: atom ##feed类型 atom或者rss2\n    path: atom.xml ##feed路径\n    limit: 20  ##feed文章最小数量\n\n#访问zipperary/sitemap.xml即可看到站点地图。不过，sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。\n#sitemap\nsitemap:\n  - path: sitemap.xml\n\nbaidusitemap:\n - path: baidusitemap.xml\n```\n\nJacman主题的主配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\ _config.yml\n```\n##### Menu\nmenu:\n  主页 | Home: /\n  索引 | Index: /index\n  归档 | Archives: /archives\n  简介 | About: /about\n## you can create `tags` and `categories` folders in `../source`.\n## And create a `index.md` file in each of them.\n## set `front-matter`as\n## layout: tags (or categories)\n## title: tags (or categories)\n## ---\n\n#### Widgets\nwidgets:\n- github-card\n- category\n- tag\n- links\n- douban\n- rss\n- weibo\n  ## provide eight widgets:github-card,category,tag,rss,archive,tagcloud,links,weibo\n\n\n\n#### RSS\nrss: /atom.xml ## RSS address.\n\n#### Image\nimglogo:\n  enable: true             ## display image logo true/false.\n  src: img/logo.png        ## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.\nfavicon: img/favicon.ico   ## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.\napple_icon: img/jacman.jpg ## size:114px*114px,please put image into the theme folder `/jacman/source/img`.\nauthor_img: img/author.jpg ## size:220px*220px.display author avatar picture.if don't want to display,please don't set this.\nbanner_img: #img/banner.jpg ## size:1920px*200px+. Banner Picture\n### Theme Color\ntheme_color:\n    theme: '#2ca6cb'    ##the defaut theme color is blue\n\n# 代码高亮主题\n# available: default | night\nhighlight_theme: night\n\n#### index post is expanding or not\nindex:\n  expand: false           ## default is unexpanding,so you can only see the short description of each post.\n  excerpt_link: Read More\n\nclose_aside: true  #close sidebar in post page if true\nmathjax: true      #enable mathjax if true\n\n### Creative Commons License Support, see http://creativecommons.org/\n### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zero\ncreative_commons: none\n\n#### Author information\nauthor:\n  intro_line1:  \"Hello ,I'm steven. This is my blog on GitHub.\"    ## your introduction on the bottom of the page\n  intro_line2:  \"Whenever you feel like criticizing any one, just remember that all the people in this world haven’t had the advantages that you’ve had.\"  ## the 2nd line\n  intro_line3: \"每当你觉得想要批评什么人的时候，你切要记着，这个世界上的人并非都具备你禀有的条件。《了不起的盖茨比》\"\n  weibo: 3201133445     ## e.g. wuchong1014 or 2176287895 for http://weibo.com/2176287895\n  weibo_verifier: b3593ceb    ## e.g. b3593ceb Your weibo-show widget verifier ,if you use weibo-show it is needed.\n  tsina:      ## e.g. 2176287895  Your weibo ID,It will be used in share button.\n  douban:     ## e.g. wuchong1014 or your id for https://www.douban.com/people/wuchong1014\n  zhihu:      ## e.g. jark  for http://www.zhihu.com/people/jark\n  email : chengliangchengliang888@gmail.com     ## e.g. imjark@gmail.com\n  twitter:    ## e.g. jarkwu for https://twitter.com/jarkwu\n  github: amao12580     ## e.g. wuchong for https://github.com/wuchong\n  facebook:   ## e.g. imjark for https://facebook.com/imjark\n  linkedin:   ## e.g. wuchong1014 for https://www.linkedin.com/in/wuchong1014\n  google_plus:    ## e.g. \"111190881341800841449\" for https://plus.google.com/u/0/111190881341800841449, the \"\" is needed!\n  stackoverflow:  ## e.g. 3222790 for http://stackoverflow.com/users/3222790/jark\n## if you set them, the corresponding  share button will show on the footer\n\n#### Toc\ntoc:\n  article: true   ## show contents in article.\n  aside: true     ## show contents in aside.\n## you can set both of the value to true of neither of them.\n## if you don't want display contents in a specified post,you can modify `front-matter` and add `toc: false`.\n\n#### Links\nlinks:\n  码农圈: https://coderq.com,一个面向程序员交流分享的新一代社区\n  Jark's Blog: http://wuchong.me\n  GitHub: https://github.com/amao12580\n\n\n\n#### Comment\nduoshuo_shortname: amao12580   ## e.g. wuchong   your duoshuo short name.\ndisqus_shortname:     ## e.g. wuchong   your disqus short name.\n\n#### Share button\njiathis:\n  enable: false ## if you use jiathis as your share tool,the built-in share tool won't be display.\n  id:    ## e.g. 1889330 your jiathis ID.\n  tsina: ## e.g. 2176287895 Your weibo id,It will be used in share button.\n\n#### Analytics\ngoogle_analytics:\n  enable: true\n  id: UA-75497011-1        ## e.g. UA-46321946-2 your google analytics ID.\n  site: http://amao12580.github.io      ## e.g. wuchong.me your google analytics site or set the value as auto.\n## You MUST upgrade to Universal Analytics first!\n## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN\nbaidu_tongji:\n  enable: true\n  sitecode: e6d1f421bbc9962127a50488f9ed37d1 ## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site code\ncnzz_tongji:\n  enable: false\n  siteid:    ## e.g. 1253575964 your cnzz tongji site id\nibruce_tongji: # 不蒜子计数\n  enable: true\n\n#### Miscellaneous\nShowCustomFont: true  ## you can change custom font in `variable.styl` and `font.styl` which in the theme folder `/jacman/source/css`.\nfancybox: true        ## if you use gallery post or want use fancybox please set the value to true.\ntotop: true           ## if you want to scroll to top in every post set the value to true\n\n\n#### Custom Search\ngoogle_cse:\n  enable: false\n  cx:   ## e.g. 018294693190868310296:abnhpuysycw your Custom Search ID.\n## https://www.google.com/cse/\n## To enable the custom search You must create a \"search\" folder in '/source' and a \"index.md\" file\n## set the 'front-matter' as\n## layout: search\n## title: search\n## ---\nbaidu_search:     ## http://zn.baidu.com/\n  enable: false\n  id:   ## e.g. \"783281470518440642\"  for your baidu search id\n  site: http://zhannei.baidu.com/cse/search  ## your can change to your site instead of the default site\n\ntinysou_search:     ## http://tinysou.com/\n  enable: false\n  id:  ## e.g. \"4ac092ad8d749fdc6293\" for your tiny search id\n```\n\nJacman主题布局配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\layout\\layout.ejs\n\n```\n<% if (page.layout=='post' || page.layout=='photo'){ %>\n <%- partial('_partial/head') %>\n  <body>\n    <header>\n      <%- partial('_partial/header') %>\n    </header>\n    <div id=\"container\">\n      <%- body %>\n      <%- partial('_partial/sidebar',{item: page,table: true}) %>\n    </div>\n    <footer><%- partial('_partial/footer') %></footer>\n    <%- partial('_partial/after_footer') %>\n  </body>\n</html>\n<% } else if(page.layout=='page'){ %>\n  <% if(page.source.match(/\\.md$/)){ %>\n    <%- partial('_partial/head') %>\n      <body>\n        <header>\n          <%- partial('_partial/header') %>\n        </header>\n        <div id=\"container\">\n          <%- body %>\n        </div>\n        <footer><%- partial('_partial/footer') %></footer>\n        <%- partial('_partial/after_footer') %>\n      </body>\n     </html>\n     <% }else{ %>\n    <%- page.content %>\n  <% } %>\n<% } else if(page.layout=='search'){ %>\n<%- partial('_partial/head') %>\n    <body>\n      <header>\n        <%- partial('_partial/header') %>\n      </header>\n      <div id=\"container\">\n        <%- partial('_partial/search')%>\n      </div>\n      <footer><%- partial('_partial/footer') %></footer>\n      <%- partial('_partial/after_footer') %>\n    </body>\n   </html>\n<% } else if(page.layout=='tags'){ %>\n <%- partial('_partial/head') %>\n    <body>\n      <header>\n        <%- partial('_partial/header') %>\n      </header>\n      <div id=\"container\">\n          <%- partial('_partial/tags')%>\n      </div>\n      <footer><%- partial('_partial/footer') %></footer>\n      <%- partial('_partial/after_footer') %>\n    </body>\n   </html>\n<% } else if(page.layout=='categories'){ %>\n <%- partial('_partial/head') %>\n    <body>\n      <header>\n        <%- partial('_partial/header') %>\n      </header>\n      <div id=\"container\">\n          <%- partial('_partial/categories')%>\n      </div>\n      <footer><%- partial('_partial/footer') %></footer>\n      <%- partial('_partial/after_footer') %>\n    </body>\n   </html>\n<% } else if(page.category!=null||page.tag!=null||page.archive!=null) { %>\n  <%- partial('_partial/head') %>\n    <body>\n      <header>\n        <%- partial('_partial/header') %>\n      </header>\n      <div id=\"container\">\n        <%- body %>\n      </div>\n      <footer><%- partial('_partial/footer') %></footer>\n      <%- partial('_partial/after_footer') %>\n    </body>\n   </html>\n<% } else { %>\n <%- partial('_partial/head') %>\n  <body>\n    <header>\n      <%- partial('_partial/header') %>\n    </header>\n    <div id=\"container\">\n      <%- body %>\n      <%- partial('_partial/sidebar',{item: page,table: false}) %>\n    </div>\n    <footer><%- partial('_partial/footer') %></footer>\n    <%- partial('_partial/after_footer') %>\n    <a href=\"https://github.com/amao12580\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"></a>\n  </body>\n </html>\n<% } %>\n```\nJacman主题页面尾部配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\layout\\\\_partial\\footer.ejs\n```\n<div id=\"footer\" >\n    <% if(theme.author_img){ %>\n    <div class=\"line\">\n        <span></span>\n        <div class=\"author\"></div>\n    </div>\n    <%; } %>\n    <% if(theme.author.intro_line1 || theme.author.intro_line2){ %>\n    <section class=\"info\">\n        <p> <%= theme.author.intro_line1 %> <br/>\n            <%= theme.author.intro_line2 %></p>\n    </section>\n     <%; } %>\n    <div class=\"social-font\" class=\"clearfix\">\n        <% if(theme.author.weibo){ %>\n        <a href=\"http://weibo.com/<%= theme.author.weibo %>\" target=\"_blank\" class=\"icon-weibo\" title=\"微博\"></a>\n        <%; } %>\n        <% if(theme.author.github){ %>\n        <a href=\"https://github.com/<%=theme.author.github %>\" target=\"_blank\" class=\"icon-github\" title=\"github\"></a>\n        <%; } %>\n        <% if(theme.author.stackoverflow){ %>\n        <a href=\"http://stackoverflow.com/users/<%=theme.author.stackoverflow %>\" target=\"_blank\" class=\"icon-stack-overflow\" title=\"stackoverflow\"></a>\n        <%; } %>\n        <% if(theme.author.twitter){ %>\n        <a href=\"https://twitter.com/<%=theme.author.twitter %>\" target=\"_blank\" class=\"icon-twitter\" title=\"twitter\"></a>\n        <%; } %>\n        <% if(theme.author.facebook){ %>\n        <a href=\"https://www.facebook.com/<%=theme.author.facebook %>\" target=\"_blank\" class=\"icon-facebook\" title=\"facebook\"></a>\n        <%; } %>\n        <% if(theme.author.linkedin){ %>\n        <a href=\"https://www.linkedin.com/in/<%=theme.author.linkedin %>\" target=\"_blank\" class=\"icon-linkedin\" title=\"linkedin\"></a>\n        <%; } %>\n        <% if(theme.author.douban){ %>\n        <a href=\"https://www.douban.com/people/<%=theme.author.douban %>\" target=\"_blank\" class=\"icon-douban\" title=\"豆瓣\"></a>\n        <%; } %>\n        <% if(theme.author.zhihu){ %>\n        <a href=\"http://www.zhihu.com/people/<%=theme.author.zhihu %>\" target=\"_blank\" class=\"icon-zhihu\" title=\"知乎\"></a>\n        <%; } %>\n        <% if(theme.author.google_plus){ %>\n        <a href=\"https://plus.google.com/<%=theme.author.google_plus %>?rel=author\" target=\"_blank\" class=\"icon-google_plus\" title=\"Google+\"></a>\n        <%; } %>\n        <% if(theme.author.email){ %>\n        <a href=\"mailto:<%=theme.author.email %>\" target=\"_blank\" class=\"icon-email\" title=\"Email Me\"></a>\n        <%; } %>\n    </div>\n            <%  Array.prototype.S=String.fromCharCode(2);\n              Array.prototype.in_array=function(e){ var r=new RegExp(this.S+e+this.S); return (r.test(this.S+this.join(this.S)+this.S)); };\n                var cc = new Array('by','by-nc','by-nc-nd','by-nc-sa','by-nd','by-sa','zero'); %>\n        <% if (cc.in_array(theme.creative_commons) ) { %>\n                <div class=\"cc-license\">\n          <a href=\"http://creativecommons.org/licenses/<%= theme.creative_commons %>/4.0\" class=\"cc-opacity\" target=\"_blank\">\n            <img src=\"<%- config.root %>img/cc-<%= theme.creative_commons %>.svg\" alt=\"Creative Commons\" />\n          </a>\n        </div>\n    <%; } %>\n\n        <p class=\"copyright\">\n        © <%= new Date().getFullYear() %>\n        <% if (config.author) { %>\n        <a href=\"<%= config.root %>about\" target=\"_blank\" title=\"<%= config.author %>\"><%= config.author %></a>\n        <%; } else { %>\n        <a href=\"<%= config.url %>\" title=\"<%= config.title %>\"><%= config.title %></a>\n        <%; } %>\n\n        <!-- 不蒜子统计 -->\n<% if (theme.ibruce_tongji.enable){ %>\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n<span id=\"busuanzi_container_site_pv\" style='display:none'>\n本站总访问量<span id=\"busuanzi_value_site_pv\"></span>,本站访客数<span id=\"busuanzi_value_site_uv\"></span>，本文总阅读量<span id=\"busuanzi_value_page_pv\"></span>\n</span>\n<%; } %>\n        </p>\n</div>\n\n```\n\n### 2.7备份的重要性\n刚开始折腾时，经常出现改了很多配置，一运行就报错了，但是无法定位是哪些配置的改动导致的？\n幸好我用Sublime Text 3修改的，有历史记录，这点真是太赞了！给你要的[链接](http://pan.baidu.com/s/1pLnDKW7)，密码：3ook\n\nHexo配置好后，最好做一次网盘私密备份，以免主机故障丢失。而且有了备份，在家或在公司，都可以愉快的写blog啦！\n\n## 3.可能遇到的问题及答案\n1.hexo系列命令无法执行：\n```\nD:\\GitHub> hexo c\nUsage: hexo <command>\n\nCommands:\n  help     Get help on a command.\n  init     Create a new Hexo folder.\n  version  Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n```\n\n解决：请切换目录到Hexo安装目录后再执行。这是因为Hexo没有全局环境配置的问题。\n```\n cd .\\Hexo\n```\n2.关于404页面的处理\n搜索很多关于404页面的资料，都是把配置好的404.html，每次在hexo g命令后手工放在hexo的public目录下。这样子有个缺点，每次都需要手工操作一次，这对于程序员来说是极其不人道的，我想到一个点子：\n```\n将404.html文件放在hexo的source目录下\n在hexod的全局配置文件:_config.yml，配置skip_render\nskip_render:\n  - README.md\n  - 404.htm\n```\n\n3.如何在文章中插入图片？\n```\n在Hexo的source文件夹下，建一个文件夹“img”\n将想要插入到文章的图片，放到img文件夹下，图片最好是png格式，文件小而且不变形\n使用示例：![图片的名字](/img/图片001.png)\n```\n\n4.如何在文章中插入代码段？\n将需要显示为代码段的内容，用\\`\\`\\`前后包裹住\n![](/img/代码段.png)\n\n显示的效果是：\n```\n代码段1\n代码段2\n```","source":"_posts/a-new-start.md","raw":"---\ntitle: '从零开始Blogging with Hexo教程'\ndate: 2016年3月21日11:16:03\ntags:\n    - GitHub\n    - Hexo\n    - Jacman\n    - Markdown\ncategories:\n    - Tutorial\ndescription: 记录从零开始的Blogging with Hexo的搭建过程.\n---\n\n# 写在前面 #\n\n　　转眼间3月份也即将过去了，在接受了众多的理论输入以及实践之后，决定要将一些值得分享的事情记录下来，一方面是避免自己重复的掉坑，另一方面也希望通过blog的方式锻炼自己的文字能力。输入+沉淀+输出，形成自我知识攫取过程的闭环。\n\n　　下面记录从零开始的Blogging with Hexo的搭建过程，有一些简单的问题，在文末也会给出答案。\n\n## 1.你将要做什么？\n　　跟我一起在GiHub上搭建免费无限流量博客，不限速，有版本追溯管理。sadly，免费的背后是低层次的服务。搭建的博客服务器在国外，国内访问的速度没法保障，后文会给出一定的解决方案。内容的维护只能以静态Html的方式发布，意味着没有数据库，因此带来了幂等性，没有各种Web攻击，算作是一件好事？\n\n　　搭建过程中需要的技术：GitHub的使用、安装NodeJS、安装Hexo及系列插件、安装及配置Jacman主题、新文章的发布、Markdown的持续提高。\n### 1.1国内blog平台的现状\n国内的技术blog平台主要有：cnblogs、51cto、iteye、oschina、infoq等；排名没分先后，纯属个人想法。相信以上blogs，作为技术人，大家一定不陌生。平台型的blog，对个人的有利有弊，优势在于：免去软硬件维护管理的麻烦、不用担心流量和各种安全问题、；劣势也比较明显：内容版权、变现很困难、内容受限、内容面临下线风险\n\n引用[阮一峰先生的总结](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)：\n\n1. 第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。\n2. 第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。\n3. 第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。\n\n即技术人对于blog的核心需求是：发布文章、维护文章、随时控制、免去其他管理，也就是输出可控的文章。\n\n### 1.2如何选择适合自己的blog平台\n国内的blog平台少有让人长期安心逗留的，各种内容审查政策的强压，大环境的逐利性等因素，促使少有blog平台保持良心的同时持续改进其平台，在此不多言。\n我们希望发出的文章，可以进入一个技术人大都汇聚的环境中，以提高影响力。这样的环境可以是个人blog、blogs平台、微信平台等等。如果你有足够的影响力，也希望在作者与读者之间建立交流通道，常见的就是文章的评论回复功能了，其他的也有读者QQ群等社区型交流方式。引申的说，对于不怀好意的评论者，还需要一个评论审核的功能，甚至禁止评论，这都能在下文中得到解决。\n\n### 1.3为什么是Hexo？\n我们怎么评价Hexo？\n\n知乎：[jekyll vs Hexo](https://www.zhihu.com/question/19996679)\n## 2.如何做？\n### 2.1安装和配置NodeJS\n1. 确认你的配置是windows 7，虽然没有限制一定要windows，但是本教程基于windows。![我的系统环境](/img/计算机软硬件配置.png)。\n\n2. [安装NodeJS](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n我的安装完成目录：\n\n![](/img/NodeJS安装完成.png)\n\n3. [解决npm安装模块慢或失败的问题](http://www.cnblogs.com/enix/p/3635343.html)\n```\nnpm config set registry=\"http://registry.npmjs.org\"//设置npm源地址\n```\n确认你的npm配置：\n\n![](/img/npm配置信息.png)\n\n### 2.2获取GitHub账号\nGitHub账号和GitHub Pages 一般都应该有吧，已有的请自动无视这一部分。\n### 2.2yourname.github.io\n* 首先注册一个『GitHub』帐号，已有的默认默认请忽略\n* 建立与你用户名对应的仓库，仓库名必须为『your_user_name.github.com』\n\n### 2.3安装和配置windows GitHub客户端\n不建议在[GitHub官网](https://desktop.github.com/)下载最新客户端，官网下载的客户端大小不到1MB，在本地运行还需要链接Amazon下载具体的安装包，因为国内网络环境，经常下载到一半就断掉.\n\n我个人试了各种方法不得解，最后找到了离线安装版：已存入百度云：链接：http://pan.baidu.com/s/1eRmoG6Y 密码：3vus\n\n因为版本控制工具比较耗系统资源，请尽量安装在非系统所在盘，尽量选择剩余容量大的盘。\n安装完成后，得到2个桌面图标：GitHub、Git Shell。前者是可视化版，后者是命令行版。\n\n我选择使用GitHub,打开后进行GitHub账号登录，第一次登录成功后，绑定邮箱会收到新邮件：[GitHub] A new public key was added to your account\n\n点击左上角“+”号，选择clone，选择自己的yourname.github.io。\n在下一步中选择存放文件夹，我的选择是：\n![](/img/github目录.png)\n\n简单的使用windows GitHub客户端\n\n```\n在对话框顶部有“No uncommitted changes”和“History”，点击后可以进行切换。\n在版本库所在的文件夹有了文件变化后，这里会有变化“28 uncommitted changes”和“History”，28是指的未提交的更改数量。\n填写Summary和Description后，可以进行本地提交：Commit to master。\n此时若还想提交到远程GitHub服务器，点击右上角“Sync”按钮进行同步。\n```\n\n### 2.4安装和配置Hexo\n\n安装和初始化Hexo\n```\n$ cd /d/\n$ mkdir hexo\n$ cd hexo\n$ npm install -g hexo\n$ hexo init\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server，可以在http://localhost:4000/查看\n```\n![](/img/hexo安装目录.png)\n\n安装\n```\n$ hexo clean\n$ git clone https://github.com/wuchong/jacman.git themes/jacman\n```\n![](/img/jacman主题安装目录.png)\n\n\n常用命令\n```\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate#生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy#部署\n```\n\n部署文章到github.io\n```\nhexo clean\nhexo g\n拷贝Hexo文件夹下的public文件夹里的所有文件\n粘贴到yourname.github.io所在磁盘目录中，我的目录是：D:\\GitHub\\amao12580.github.io\n使用GitHub客户端进行提交到远程服务器\n打开yourname.github.io网址即可看到效果啦！\n```\n\n### 2.5为什么是Jacman?\n\n参见评价[Jacman基于Pacman修改的Hexo主题](http://wsgzao.github.io/post/hexo-jacman/)\n\n### 2.6私人定制\n在这里贴出我修改过的一些文件，很多修改都给出了备注。\n\nHexo主配置文件：D:\\GitHub\\Hexo\\\\_config.yml\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: Cat's Blog\nsubtitle: 一饮一啄，莫非前定.\n#为了更便于搜索引擎爬到，添加了网站的keywords\nkeywords: cat's,chengliang,amao12580,blog,developers\ndescription: Follw the https://xuanwo.org/2015/03/26/hexo-intor/\nauthor: Steven Cheng\nlanguage: zh-CN\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://amao12580.github.io\nroot: /\npermalink: post/:year/:month/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\nabout_dir: about\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n  - README.md\n  - 404.html\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\ndatetime_format: YYYY-MM-DD HH:mm:ss.SSS\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: jacman\nstylus:\n  compress: true\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n\n\n# Others\nindex_generator:\n  per_page: 5 ##首页默认10篇文章标题 如果值为0不分页\n\narchive_generator:\n    per_page: 0 ##归档页面默认10篇文章标题\n    yearly: true  ##生成年视图\n    monthly: true ##生成月视图\n\ntag_generator:\n    per_page: 0 ##标签分类页面默认10篇文章\n\ncategory_generator:\n    per_page: 0 ###分类页面默认10篇文章\n\nfeed:\n    type: atom ##feed类型 atom或者rss2\n    path: atom.xml ##feed路径\n    limit: 20  ##feed文章最小数量\n\n#访问zipperary/sitemap.xml即可看到站点地图。不过，sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。\n#sitemap\nsitemap:\n  - path: sitemap.xml\n\nbaidusitemap:\n - path: baidusitemap.xml\n```\n\nJacman主题的主配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\ _config.yml\n```\n##### Menu\nmenu:\n  主页 | Home: /\n  索引 | Index: /index\n  归档 | Archives: /archives\n  简介 | About: /about\n## you can create `tags` and `categories` folders in `../source`.\n## And create a `index.md` file in each of them.\n## set `front-matter`as\n## layout: tags (or categories)\n## title: tags (or categories)\n## ---\n\n#### Widgets\nwidgets:\n- github-card\n- category\n- tag\n- links\n- douban\n- rss\n- weibo\n  ## provide eight widgets:github-card,category,tag,rss,archive,tagcloud,links,weibo\n\n\n\n#### RSS\nrss: /atom.xml ## RSS address.\n\n#### Image\nimglogo:\n  enable: true             ## display image logo true/false.\n  src: img/logo.png        ## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.\nfavicon: img/favicon.ico   ## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.\napple_icon: img/jacman.jpg ## size:114px*114px,please put image into the theme folder `/jacman/source/img`.\nauthor_img: img/author.jpg ## size:220px*220px.display author avatar picture.if don't want to display,please don't set this.\nbanner_img: #img/banner.jpg ## size:1920px*200px+. Banner Picture\n### Theme Color\ntheme_color:\n    theme: '#2ca6cb'    ##the defaut theme color is blue\n\n# 代码高亮主题\n# available: default | night\nhighlight_theme: night\n\n#### index post is expanding or not\nindex:\n  expand: false           ## default is unexpanding,so you can only see the short description of each post.\n  excerpt_link: Read More\n\nclose_aside: true  #close sidebar in post page if true\nmathjax: true      #enable mathjax if true\n\n### Creative Commons License Support, see http://creativecommons.org/\n### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zero\ncreative_commons: none\n\n#### Author information\nauthor:\n  intro_line1:  \"Hello ,I'm steven. This is my blog on GitHub.\"    ## your introduction on the bottom of the page\n  intro_line2:  \"Whenever you feel like criticizing any one, just remember that all the people in this world haven’t had the advantages that you’ve had.\"  ## the 2nd line\n  intro_line3: \"每当你觉得想要批评什么人的时候，你切要记着，这个世界上的人并非都具备你禀有的条件。《了不起的盖茨比》\"\n  weibo: 3201133445     ## e.g. wuchong1014 or 2176287895 for http://weibo.com/2176287895\n  weibo_verifier: b3593ceb    ## e.g. b3593ceb Your weibo-show widget verifier ,if you use weibo-show it is needed.\n  tsina:      ## e.g. 2176287895  Your weibo ID,It will be used in share button.\n  douban:     ## e.g. wuchong1014 or your id for https://www.douban.com/people/wuchong1014\n  zhihu:      ## e.g. jark  for http://www.zhihu.com/people/jark\n  email : chengliangchengliang888@gmail.com     ## e.g. imjark@gmail.com\n  twitter:    ## e.g. jarkwu for https://twitter.com/jarkwu\n  github: amao12580     ## e.g. wuchong for https://github.com/wuchong\n  facebook:   ## e.g. imjark for https://facebook.com/imjark\n  linkedin:   ## e.g. wuchong1014 for https://www.linkedin.com/in/wuchong1014\n  google_plus:    ## e.g. \"111190881341800841449\" for https://plus.google.com/u/0/111190881341800841449, the \"\" is needed!\n  stackoverflow:  ## e.g. 3222790 for http://stackoverflow.com/users/3222790/jark\n## if you set them, the corresponding  share button will show on the footer\n\n#### Toc\ntoc:\n  article: true   ## show contents in article.\n  aside: true     ## show contents in aside.\n## you can set both of the value to true of neither of them.\n## if you don't want display contents in a specified post,you can modify `front-matter` and add `toc: false`.\n\n#### Links\nlinks:\n  码农圈: https://coderq.com,一个面向程序员交流分享的新一代社区\n  Jark's Blog: http://wuchong.me\n  GitHub: https://github.com/amao12580\n\n\n\n#### Comment\nduoshuo_shortname: amao12580   ## e.g. wuchong   your duoshuo short name.\ndisqus_shortname:     ## e.g. wuchong   your disqus short name.\n\n#### Share button\njiathis:\n  enable: false ## if you use jiathis as your share tool,the built-in share tool won't be display.\n  id:    ## e.g. 1889330 your jiathis ID.\n  tsina: ## e.g. 2176287895 Your weibo id,It will be used in share button.\n\n#### Analytics\ngoogle_analytics:\n  enable: true\n  id: UA-75497011-1        ## e.g. UA-46321946-2 your google analytics ID.\n  site: http://amao12580.github.io      ## e.g. wuchong.me your google analytics site or set the value as auto.\n## You MUST upgrade to Universal Analytics first!\n## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN\nbaidu_tongji:\n  enable: true\n  sitecode: e6d1f421bbc9962127a50488f9ed37d1 ## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site code\ncnzz_tongji:\n  enable: false\n  siteid:    ## e.g. 1253575964 your cnzz tongji site id\nibruce_tongji: # 不蒜子计数\n  enable: true\n\n#### Miscellaneous\nShowCustomFont: true  ## you can change custom font in `variable.styl` and `font.styl` which in the theme folder `/jacman/source/css`.\nfancybox: true        ## if you use gallery post or want use fancybox please set the value to true.\ntotop: true           ## if you want to scroll to top in every post set the value to true\n\n\n#### Custom Search\ngoogle_cse:\n  enable: false\n  cx:   ## e.g. 018294693190868310296:abnhpuysycw your Custom Search ID.\n## https://www.google.com/cse/\n## To enable the custom search You must create a \"search\" folder in '/source' and a \"index.md\" file\n## set the 'front-matter' as\n## layout: search\n## title: search\n## ---\nbaidu_search:     ## http://zn.baidu.com/\n  enable: false\n  id:   ## e.g. \"783281470518440642\"  for your baidu search id\n  site: http://zhannei.baidu.com/cse/search  ## your can change to your site instead of the default site\n\ntinysou_search:     ## http://tinysou.com/\n  enable: false\n  id:  ## e.g. \"4ac092ad8d749fdc6293\" for your tiny search id\n```\n\nJacman主题布局配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\layout\\layout.ejs\n\n```\n<% if (page.layout=='post' || page.layout=='photo'){ %>\n <%- partial('_partial/head') %>\n  <body>\n    <header>\n      <%- partial('_partial/header') %>\n    </header>\n    <div id=\"container\">\n      <%- body %>\n      <%- partial('_partial/sidebar',{item: page,table: true}) %>\n    </div>\n    <footer><%- partial('_partial/footer') %></footer>\n    <%- partial('_partial/after_footer') %>\n  </body>\n</html>\n<% } else if(page.layout=='page'){ %>\n  <% if(page.source.match(/\\.md$/)){ %>\n    <%- partial('_partial/head') %>\n      <body>\n        <header>\n          <%- partial('_partial/header') %>\n        </header>\n        <div id=\"container\">\n          <%- body %>\n        </div>\n        <footer><%- partial('_partial/footer') %></footer>\n        <%- partial('_partial/after_footer') %>\n      </body>\n     </html>\n     <% }else{ %>\n    <%- page.content %>\n  <% } %>\n<% } else if(page.layout=='search'){ %>\n<%- partial('_partial/head') %>\n    <body>\n      <header>\n        <%- partial('_partial/header') %>\n      </header>\n      <div id=\"container\">\n        <%- partial('_partial/search')%>\n      </div>\n      <footer><%- partial('_partial/footer') %></footer>\n      <%- partial('_partial/after_footer') %>\n    </body>\n   </html>\n<% } else if(page.layout=='tags'){ %>\n <%- partial('_partial/head') %>\n    <body>\n      <header>\n        <%- partial('_partial/header') %>\n      </header>\n      <div id=\"container\">\n          <%- partial('_partial/tags')%>\n      </div>\n      <footer><%- partial('_partial/footer') %></footer>\n      <%- partial('_partial/after_footer') %>\n    </body>\n   </html>\n<% } else if(page.layout=='categories'){ %>\n <%- partial('_partial/head') %>\n    <body>\n      <header>\n        <%- partial('_partial/header') %>\n      </header>\n      <div id=\"container\">\n          <%- partial('_partial/categories')%>\n      </div>\n      <footer><%- partial('_partial/footer') %></footer>\n      <%- partial('_partial/after_footer') %>\n    </body>\n   </html>\n<% } else if(page.category!=null||page.tag!=null||page.archive!=null) { %>\n  <%- partial('_partial/head') %>\n    <body>\n      <header>\n        <%- partial('_partial/header') %>\n      </header>\n      <div id=\"container\">\n        <%- body %>\n      </div>\n      <footer><%- partial('_partial/footer') %></footer>\n      <%- partial('_partial/after_footer') %>\n    </body>\n   </html>\n<% } else { %>\n <%- partial('_partial/head') %>\n  <body>\n    <header>\n      <%- partial('_partial/header') %>\n    </header>\n    <div id=\"container\">\n      <%- body %>\n      <%- partial('_partial/sidebar',{item: page,table: false}) %>\n    </div>\n    <footer><%- partial('_partial/footer') %></footer>\n    <%- partial('_partial/after_footer') %>\n    <a href=\"https://github.com/amao12580\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\"></a>\n  </body>\n </html>\n<% } %>\n```\nJacman主题页面尾部配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\layout\\\\_partial\\footer.ejs\n```\n<div id=\"footer\" >\n    <% if(theme.author_img){ %>\n    <div class=\"line\">\n        <span></span>\n        <div class=\"author\"></div>\n    </div>\n    <%; } %>\n    <% if(theme.author.intro_line1 || theme.author.intro_line2){ %>\n    <section class=\"info\">\n        <p> <%= theme.author.intro_line1 %> <br/>\n            <%= theme.author.intro_line2 %></p>\n    </section>\n     <%; } %>\n    <div class=\"social-font\" class=\"clearfix\">\n        <% if(theme.author.weibo){ %>\n        <a href=\"http://weibo.com/<%= theme.author.weibo %>\" target=\"_blank\" class=\"icon-weibo\" title=\"微博\"></a>\n        <%; } %>\n        <% if(theme.author.github){ %>\n        <a href=\"https://github.com/<%=theme.author.github %>\" target=\"_blank\" class=\"icon-github\" title=\"github\"></a>\n        <%; } %>\n        <% if(theme.author.stackoverflow){ %>\n        <a href=\"http://stackoverflow.com/users/<%=theme.author.stackoverflow %>\" target=\"_blank\" class=\"icon-stack-overflow\" title=\"stackoverflow\"></a>\n        <%; } %>\n        <% if(theme.author.twitter){ %>\n        <a href=\"https://twitter.com/<%=theme.author.twitter %>\" target=\"_blank\" class=\"icon-twitter\" title=\"twitter\"></a>\n        <%; } %>\n        <% if(theme.author.facebook){ %>\n        <a href=\"https://www.facebook.com/<%=theme.author.facebook %>\" target=\"_blank\" class=\"icon-facebook\" title=\"facebook\"></a>\n        <%; } %>\n        <% if(theme.author.linkedin){ %>\n        <a href=\"https://www.linkedin.com/in/<%=theme.author.linkedin %>\" target=\"_blank\" class=\"icon-linkedin\" title=\"linkedin\"></a>\n        <%; } %>\n        <% if(theme.author.douban){ %>\n        <a href=\"https://www.douban.com/people/<%=theme.author.douban %>\" target=\"_blank\" class=\"icon-douban\" title=\"豆瓣\"></a>\n        <%; } %>\n        <% if(theme.author.zhihu){ %>\n        <a href=\"http://www.zhihu.com/people/<%=theme.author.zhihu %>\" target=\"_blank\" class=\"icon-zhihu\" title=\"知乎\"></a>\n        <%; } %>\n        <% if(theme.author.google_plus){ %>\n        <a href=\"https://plus.google.com/<%=theme.author.google_plus %>?rel=author\" target=\"_blank\" class=\"icon-google_plus\" title=\"Google+\"></a>\n        <%; } %>\n        <% if(theme.author.email){ %>\n        <a href=\"mailto:<%=theme.author.email %>\" target=\"_blank\" class=\"icon-email\" title=\"Email Me\"></a>\n        <%; } %>\n    </div>\n            <%  Array.prototype.S=String.fromCharCode(2);\n              Array.prototype.in_array=function(e){ var r=new RegExp(this.S+e+this.S); return (r.test(this.S+this.join(this.S)+this.S)); };\n                var cc = new Array('by','by-nc','by-nc-nd','by-nc-sa','by-nd','by-sa','zero'); %>\n        <% if (cc.in_array(theme.creative_commons) ) { %>\n                <div class=\"cc-license\">\n          <a href=\"http://creativecommons.org/licenses/<%= theme.creative_commons %>/4.0\" class=\"cc-opacity\" target=\"_blank\">\n            <img src=\"<%- config.root %>img/cc-<%= theme.creative_commons %>.svg\" alt=\"Creative Commons\" />\n          </a>\n        </div>\n    <%; } %>\n\n        <p class=\"copyright\">\n        © <%= new Date().getFullYear() %>\n        <% if (config.author) { %>\n        <a href=\"<%= config.root %>about\" target=\"_blank\" title=\"<%= config.author %>\"><%= config.author %></a>\n        <%; } else { %>\n        <a href=\"<%= config.url %>\" title=\"<%= config.title %>\"><%= config.title %></a>\n        <%; } %>\n\n        <!-- 不蒜子统计 -->\n<% if (theme.ibruce_tongji.enable){ %>\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n<span id=\"busuanzi_container_site_pv\" style='display:none'>\n本站总访问量<span id=\"busuanzi_value_site_pv\"></span>,本站访客数<span id=\"busuanzi_value_site_uv\"></span>，本文总阅读量<span id=\"busuanzi_value_page_pv\"></span>\n</span>\n<%; } %>\n        </p>\n</div>\n\n```\n\n### 2.7备份的重要性\n刚开始折腾时，经常出现改了很多配置，一运行就报错了，但是无法定位是哪些配置的改动导致的？\n幸好我用Sublime Text 3修改的，有历史记录，这点真是太赞了！给你要的[链接](http://pan.baidu.com/s/1pLnDKW7)，密码：3ook\n\nHexo配置好后，最好做一次网盘私密备份，以免主机故障丢失。而且有了备份，在家或在公司，都可以愉快的写blog啦！\n\n## 3.可能遇到的问题及答案\n1.hexo系列命令无法执行：\n```\nD:\\GitHub> hexo c\nUsage: hexo <command>\n\nCommands:\n  help     Get help on a command.\n  init     Create a new Hexo folder.\n  version  Display version information.\n\nGlobal Options:\n  --config  Specify config file instead of using _config.yml\n  --cwd     Specify the CWD\n  --debug   Display all verbose messages in the terminal\n  --draft   Display draft posts\n  --safe    Disable all plugins and scripts\n  --silent  Hide output on console\n\nFor more help, you can use 'hexo help [command]' for the detailed information\nor you can check the docs: http://hexo.io/docs/\n```\n\n解决：请切换目录到Hexo安装目录后再执行。这是因为Hexo没有全局环境配置的问题。\n```\n cd .\\Hexo\n```\n2.关于404页面的处理\n搜索很多关于404页面的资料，都是把配置好的404.html，每次在hexo g命令后手工放在hexo的public目录下。这样子有个缺点，每次都需要手工操作一次，这对于程序员来说是极其不人道的，我想到一个点子：\n```\n将404.html文件放在hexo的source目录下\n在hexod的全局配置文件:_config.yml，配置skip_render\nskip_render:\n  - README.md\n  - 404.htm\n```\n\n3.如何在文章中插入图片？\n```\n在Hexo的source文件夹下，建一个文件夹“img”\n将想要插入到文章的图片，放到img文件夹下，图片最好是png格式，文件小而且不变形\n使用示例：![图片的名字](/img/图片001.png)\n```\n\n4.如何在文章中插入代码段？\n将需要显示为代码段的内容，用\\`\\`\\`前后包裹住\n![](/img/代码段.png)\n\n显示的效果是：\n```\n代码段1\n代码段2\n```","slug":"a-new-start","published":1,"updated":"2016-03-28T06:35:32.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimrk7x9c0006acnnn3a5swdo","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>　　转眼间3月份也即将过去了，在接受了众多的理论输入以及实践之后，决定要将一些值得分享的事情记录下来，一方面是避免自己重复的掉坑，另一方面也希望通过blog的方式锻炼自己的文字能力。输入+沉淀+输出，形成自我知识攫取过程的闭环。</p>\n<p>　　下面记录从零开始的Blogging with Hexo的搭建过程，有一些简单的问题，在文末也会给出答案。</p>\n<h2 id=\"1-你将要做什么？\"><a href=\"#1-你将要做什么？\" class=\"headerlink\" title=\"1.你将要做什么？\"></a>1.你将要做什么？</h2><p>　　跟我一起在GiHub上搭建免费无限流量博客，不限速，有版本追溯管理。sadly，免费的背后是低层次的服务。搭建的博客服务器在国外，国内访问的速度没法保障，后文会给出一定的解决方案。内容的维护只能以静态Html的方式发布，意味着没有数据库，因此带来了幂等性，没有各种Web攻击，算作是一件好事？</p>\n<p>　　搭建过程中需要的技术：GitHub的使用、安装NodeJS、安装Hexo及系列插件、安装及配置Jacman主题、新文章的发布、Markdown的持续提高。</p>\n<h3 id=\"1-1国内blog平台的现状\"><a href=\"#1-1国内blog平台的现状\" class=\"headerlink\" title=\"1.1国内blog平台的现状\"></a>1.1国内blog平台的现状</h3><p>国内的技术blog平台主要有：cnblogs、51cto、iteye、oschina、infoq等；排名没分先后，纯属个人想法。相信以上blogs，作为技术人，大家一定不陌生。平台型的blog，对个人的有利有弊，优势在于：免去软硬件维护管理的麻烦、不用担心流量和各种安全问题、；劣势也比较明显：内容版权、变现很困难、内容受限、内容面临下线风险</p>\n<p>引用<a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\" target=\"_blank\" rel=\"external\">阮一峰先生的总结</a>：</p>\n<ol>\n<li>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。</li>\n<li>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</li>\n<li>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</li>\n</ol>\n<p>即技术人对于blog的核心需求是：发布文章、维护文章、随时控制、免去其他管理，也就是输出可控的文章。</p>\n<h3 id=\"1-2如何选择适合自己的blog平台\"><a href=\"#1-2如何选择适合自己的blog平台\" class=\"headerlink\" title=\"1.2如何选择适合自己的blog平台\"></a>1.2如何选择适合自己的blog平台</h3><p>国内的blog平台少有让人长期安心逗留的，各种内容审查政策的强压，大环境的逐利性等因素，促使少有blog平台保持良心的同时持续改进其平台，在此不多言。<br>我们希望发出的文章，可以进入一个技术人大都汇聚的环境中，以提高影响力。这样的环境可以是个人blog、blogs平台、微信平台等等。如果你有足够的影响力，也希望在作者与读者之间建立交流通道，常见的就是文章的评论回复功能了，其他的也有读者QQ群等社区型交流方式。引申的说，对于不怀好意的评论者，还需要一个评论审核的功能，甚至禁止评论，这都能在下文中得到解决。</p>\n<h3 id=\"1-3为什么是Hexo？\"><a href=\"#1-3为什么是Hexo？\" class=\"headerlink\" title=\"1.3为什么是Hexo？\"></a>1.3为什么是Hexo？</h3><p>我们怎么评价Hexo？</p>\n<p>知乎：<a href=\"https://www.zhihu.com/question/19996679\" target=\"_blank\" rel=\"external\">jekyll vs Hexo</a></p>\n<h2 id=\"2-如何做？\"><a href=\"#2-如何做？\" class=\"headerlink\" title=\"2.如何做？\"></a>2.如何做？</h2><h3 id=\"2-1安装和配置NodeJS\"><a href=\"#2-1安装和配置NodeJS\" class=\"headerlink\" title=\"2.1安装和配置NodeJS\"></a>2.1安装和配置NodeJS</h3><ol>\n<li><p>确认你的配置是windows 7，虽然没有限制一定要windows，但是本教程基于windows。<img src=\"/img/计算机软硬件配置.png\" alt=\"我的系统环境\">。</p>\n</li>\n<li><p><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"external\">安装NodeJS</a><br>我的安装完成目录：</p>\n</li>\n</ol>\n<p><img src=\"/img/NodeJS安装完成.png\" alt=\"\"></p>\n<ol>\n<li><a href=\"http://www.cnblogs.com/enix/p/3635343.html\" target=\"_blank\" rel=\"external\">解决npm安装模块慢或失败的问题</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry=&quot;http://registry.npmjs.org&quot;//设置npm源地址</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>确认你的npm配置：</p>\n<p><img src=\"/img/npm配置信息.png\" alt=\"\"></p>\n<h3 id=\"2-2获取GitHub账号\"><a href=\"#2-2获取GitHub账号\" class=\"headerlink\" title=\"2.2获取GitHub账号\"></a>2.2获取GitHub账号</h3><p>GitHub账号和GitHub Pages 一般都应该有吧，已有的请自动无视这一部分。</p>\n<h3 id=\"2-2yourname-github-io\"><a href=\"#2-2yourname-github-io\" class=\"headerlink\" title=\"2.2yourname.github.io\"></a>2.2yourname.github.io</h3><ul>\n<li>首先注册一个『GitHub』帐号，已有的默认默认请忽略</li>\n<li>建立与你用户名对应的仓库，仓库名必须为『your_user_name.github.com』</li>\n</ul>\n<h3 id=\"2-3安装和配置windows-GitHub客户端\"><a href=\"#2-3安装和配置windows-GitHub客户端\" class=\"headerlink\" title=\"2.3安装和配置windows GitHub客户端\"></a>2.3安装和配置windows GitHub客户端</h3><p>不建议在<a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"external\">GitHub官网</a>下载最新客户端，官网下载的客户端大小不到1MB，在本地运行还需要链接Amazon下载具体的安装包，因为国内网络环境，经常下载到一半就断掉.</p>\n<p>我个人试了各种方法不得解，最后找到了离线安装版：已存入百度云：链接：<a href=\"http://pan.baidu.com/s/1eRmoG6Y\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1eRmoG6Y</a> 密码：3vus</p>\n<p>因为版本控制工具比较耗系统资源，请尽量安装在非系统所在盘，尽量选择剩余容量大的盘。<br>安装完成后，得到2个桌面图标：GitHub、Git Shell。前者是可视化版，后者是命令行版。</p>\n<p>我选择使用GitHub,打开后进行GitHub账号登录，第一次登录成功后，绑定邮箱会收到新邮件：[GitHub] A new public key was added to your account</p>\n<p>点击左上角“+”号，选择clone，选择自己的yourname.github.io。<br>在下一步中选择存放文件夹，我的选择是：<br><img src=\"/img/github目录.png\" alt=\"\"></p>\n<p>简单的使用windows GitHub客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在对话框顶部有“No uncommitted changes”和“History”，点击后可以进行切换。</span><br><span class=\"line\">在版本库所在的文件夹有了文件变化后，这里会有变化“28 uncommitted changes”和“History”，28是指的未提交的更改数量。</span><br><span class=\"line\">填写Summary和Description后，可以进行本地提交：Commit to master。</span><br><span class=\"line\">此时若还想提交到远程GitHub服务器，点击右上角“Sync”按钮进行同步。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4安装和配置Hexo\"><a href=\"#2-4安装和配置Hexo\" class=\"headerlink\" title=\"2.4安装和配置Hexo\"></a>2.4安装和配置Hexo</h3><p>安装和初始化Hexo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /d/</span><br><span class=\"line\">$ mkdir hexo</span><br><span class=\"line\">$ cd hexo</span><br><span class=\"line\">$ npm install -g hexo</span><br><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ hexo g # 或者hexo generate</span><br><span class=\"line\">$ hexo s # 或者hexo server，可以在http://localhost:4000/查看</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/hexo安装目录.png\" alt=\"\"></p>\n<p>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ git clone https://github.com/wuchong/jacman.git themes/jacman</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/jacman主题安装目录.png\" alt=\"\"></p>\n<p>常用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\">hexo g == hexo generate#生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure></p>\n<p>部署文章到github.io<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">拷贝Hexo文件夹下的public文件夹里的所有文件</span><br><span class=\"line\">粘贴到yourname.github.io所在磁盘目录中，我的目录是：D:\\GitHub\\amao12580.github.io</span><br><span class=\"line\">使用GitHub客户端进行提交到远程服务器</span><br><span class=\"line\">打开yourname.github.io网址即可看到效果啦！</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5为什么是Jacman\"><a href=\"#2-5为什么是Jacman\" class=\"headerlink\" title=\"2.5为什么是Jacman?\"></a>2.5为什么是Jacman?</h3><p>参见评价<a href=\"http://wsgzao.github.io/post/hexo-jacman/\" target=\"_blank\" rel=\"external\">Jacman基于Pacman修改的Hexo主题</a></p>\n<h3 id=\"2-6私人定制\"><a href=\"#2-6私人定制\" class=\"headerlink\" title=\"2.6私人定制\"></a>2.6私人定制</h3><p>在这里贴出我修改过的一些文件，很多修改都给出了备注。</p>\n<p>Hexo主配置文件：D:\\GitHub\\Hexo\\_config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Hexo Configuration</span><br><span class=\"line\">## Docs: https://hexo.io/docs/configuration.html</span><br><span class=\"line\">## Source: https://github.com/hexojs/hexo/</span><br><span class=\"line\"></span><br><span class=\"line\"># Site</span><br><span class=\"line\">title: Cat&apos;s Blog</span><br><span class=\"line\">subtitle: 一饮一啄，莫非前定.</span><br><span class=\"line\">#为了更便于搜索引擎爬到，添加了网站的keywords</span><br><span class=\"line\">keywords: cat&apos;s,chengliang,amao12580,blog,developers</span><br><span class=\"line\">description: Follw the https://xuanwo.org/2015/03/26/hexo-intor/</span><br><span class=\"line\">author: Steven Cheng</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: http://amao12580.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: post/:year/:month/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Directory</span><br><span class=\"line\">source_dir: source</span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">about_dir: about</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\">  - README.md</span><br><span class=\"line\">  - 404.html</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">external_link: true # Open external links in new tab</span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: false</span><br><span class=\"line\">post_asset_folder: false</span><br><span class=\"line\">relative_link: false</span><br><span class=\"line\">future: true</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\">  auto_detect: false</span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"># Date / Time format</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\">datetime_format: YYYY-MM-DD HH:mm:ss.SSS</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: jacman</span><br><span class=\"line\">stylus:</span><br><span class=\"line\">  compress: true</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Others</span><br><span class=\"line\">index_generator:</span><br><span class=\"line\">  per_page: 5 ##首页默认10篇文章标题 如果值为0不分页</span><br><span class=\"line\"></span><br><span class=\"line\">archive_generator:</span><br><span class=\"line\">    per_page: 0 ##归档页面默认10篇文章标题</span><br><span class=\"line\">    yearly: true  ##生成年视图</span><br><span class=\"line\">    monthly: true ##生成月视图</span><br><span class=\"line\"></span><br><span class=\"line\">tag_generator:</span><br><span class=\"line\">    per_page: 0 ##标签分类页面默认10篇文章</span><br><span class=\"line\"></span><br><span class=\"line\">category_generator:</span><br><span class=\"line\">    per_page: 0 ###分类页面默认10篇文章</span><br><span class=\"line\"></span><br><span class=\"line\">feed:</span><br><span class=\"line\">    type: atom ##feed类型 atom或者rss2</span><br><span class=\"line\">    path: atom.xml ##feed路径</span><br><span class=\"line\">    limit: 20  ##feed文章最小数量</span><br><span class=\"line\"></span><br><span class=\"line\">#访问zipperary/sitemap.xml即可看到站点地图。不过，sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。</span><br><span class=\"line\">#sitemap</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  - path: sitemap.xml</span><br><span class=\"line\"></span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\"> - path: baidusitemap.xml</span><br></pre></td></tr></table></figure></p>\n<p>Jacman主题的主配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\ _config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##### Menu</span><br><span class=\"line\">menu:</span><br><span class=\"line\">  主页 | Home: /</span><br><span class=\"line\">  索引 | Index: /index</span><br><span class=\"line\">  归档 | Archives: /archives</span><br><span class=\"line\">  简介 | About: /about</span><br><span class=\"line\">## you can create `tags` and `categories` folders in `../source`.</span><br><span class=\"line\">## And create a `index.md` file in each of them.</span><br><span class=\"line\">## set `front-matter`as</span><br><span class=\"line\">## layout: tags (or categories)</span><br><span class=\"line\">## title: tags (or categories)</span><br><span class=\"line\">## ---</span><br><span class=\"line\"></span><br><span class=\"line\">#### Widgets</span><br><span class=\"line\">widgets:</span><br><span class=\"line\">- github-card</span><br><span class=\"line\">- category</span><br><span class=\"line\">- tag</span><br><span class=\"line\">- links</span><br><span class=\"line\">- douban</span><br><span class=\"line\">- rss</span><br><span class=\"line\">- weibo</span><br><span class=\"line\">  ## provide eight widgets:github-card,category,tag,rss,archive,tagcloud,links,weibo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### RSS</span><br><span class=\"line\">rss: /atom.xml ## RSS address.</span><br><span class=\"line\"></span><br><span class=\"line\">#### Image</span><br><span class=\"line\">imglogo:</span><br><span class=\"line\">  enable: true             ## display image logo true/false.</span><br><span class=\"line\">  src: img/logo.png        ## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.</span><br><span class=\"line\">favicon: img/favicon.ico   ## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.</span><br><span class=\"line\">apple_icon: img/jacman.jpg ## size:114px*114px,please put image into the theme folder `/jacman/source/img`.</span><br><span class=\"line\">author_img: img/author.jpg ## size:220px*220px.display author avatar picture.if don&apos;t want to display,please don&apos;t set this.</span><br><span class=\"line\">banner_img: #img/banner.jpg ## size:1920px*200px+. Banner Picture</span><br><span class=\"line\">### Theme Color</span><br><span class=\"line\">theme_color:</span><br><span class=\"line\">    theme: &apos;#2ca6cb&apos;    ##the defaut theme color is blue</span><br><span class=\"line\"></span><br><span class=\"line\"># 代码高亮主题</span><br><span class=\"line\"># available: default | night</span><br><span class=\"line\">highlight_theme: night</span><br><span class=\"line\"></span><br><span class=\"line\">#### index post is expanding or not</span><br><span class=\"line\">index:</span><br><span class=\"line\">  expand: false           ## default is unexpanding,so you can only see the short description of each post.</span><br><span class=\"line\">  excerpt_link: Read More</span><br><span class=\"line\"></span><br><span class=\"line\">close_aside: true  #close sidebar in post page if true</span><br><span class=\"line\">mathjax: true      #enable mathjax if true</span><br><span class=\"line\"></span><br><span class=\"line\">### Creative Commons License Support, see http://creativecommons.org/</span><br><span class=\"line\">### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zero</span><br><span class=\"line\">creative_commons: none</span><br><span class=\"line\"></span><br><span class=\"line\">#### Author information</span><br><span class=\"line\">author:</span><br><span class=\"line\">  intro_line1:  &quot;Hello ,I&apos;m steven. This is my blog on GitHub.&quot;    ## your introduction on the bottom of the page</span><br><span class=\"line\">  intro_line2:  &quot;Whenever you feel like criticizing any one, just remember that all the people in this world haven’t had the advantages that you’ve had.&quot;  ## the 2nd line</span><br><span class=\"line\">  intro_line3: &quot;每当你觉得想要批评什么人的时候，你切要记着，这个世界上的人并非都具备你禀有的条件。《了不起的盖茨比》&quot;</span><br><span class=\"line\">  weibo: 3201133445     ## e.g. wuchong1014 or 2176287895 for http://weibo.com/2176287895</span><br><span class=\"line\">  weibo_verifier: b3593ceb    ## e.g. b3593ceb Your weibo-show widget verifier ,if you use weibo-show it is needed.</span><br><span class=\"line\">  tsina:      ## e.g. 2176287895  Your weibo ID,It will be used in share button.</span><br><span class=\"line\">  douban:     ## e.g. wuchong1014 or your id for https://www.douban.com/people/wuchong1014</span><br><span class=\"line\">  zhihu:      ## e.g. jark  for http://www.zhihu.com/people/jark</span><br><span class=\"line\">  email : chengliangchengliang888@gmail.com     ## e.g. imjark@gmail.com</span><br><span class=\"line\">  twitter:    ## e.g. jarkwu for https://twitter.com/jarkwu</span><br><span class=\"line\">  github: amao12580     ## e.g. wuchong for https://github.com/wuchong</span><br><span class=\"line\">  facebook:   ## e.g. imjark for https://facebook.com/imjark</span><br><span class=\"line\">  linkedin:   ## e.g. wuchong1014 for https://www.linkedin.com/in/wuchong1014</span><br><span class=\"line\">  google_plus:    ## e.g. &quot;111190881341800841449&quot; for https://plus.google.com/u/0/111190881341800841449, the &quot;&quot; is needed!</span><br><span class=\"line\">  stackoverflow:  ## e.g. 3222790 for http://stackoverflow.com/users/3222790/jark</span><br><span class=\"line\">## if you set them, the corresponding  share button will show on the footer</span><br><span class=\"line\"></span><br><span class=\"line\">#### Toc</span><br><span class=\"line\">toc:</span><br><span class=\"line\">  article: true   ## show contents in article.</span><br><span class=\"line\">  aside: true     ## show contents in aside.</span><br><span class=\"line\">## you can set both of the value to true of neither of them.</span><br><span class=\"line\">## if you don&apos;t want display contents in a specified post,you can modify `front-matter` and add `toc: false`.</span><br><span class=\"line\"></span><br><span class=\"line\">#### Links</span><br><span class=\"line\">links:</span><br><span class=\"line\">  码农圈: https://coderq.com,一个面向程序员交流分享的新一代社区</span><br><span class=\"line\">  Jark&apos;s Blog: http://wuchong.me</span><br><span class=\"line\">  GitHub: https://github.com/amao12580</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### Comment</span><br><span class=\"line\">duoshuo_shortname: amao12580   ## e.g. wuchong   your duoshuo short name.</span><br><span class=\"line\">disqus_shortname:     ## e.g. wuchong   your disqus short name.</span><br><span class=\"line\"></span><br><span class=\"line\">#### Share button</span><br><span class=\"line\">jiathis:</span><br><span class=\"line\">  enable: false ## if you use jiathis as your share tool,the built-in share tool won&apos;t be display.</span><br><span class=\"line\">  id:    ## e.g. 1889330 your jiathis ID.</span><br><span class=\"line\">  tsina: ## e.g. 2176287895 Your weibo id,It will be used in share button.</span><br><span class=\"line\"></span><br><span class=\"line\">#### Analytics</span><br><span class=\"line\">google_analytics:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  id: UA-75497011-1        ## e.g. UA-46321946-2 your google analytics ID.</span><br><span class=\"line\">  site: http://amao12580.github.io      ## e.g. wuchong.me your google analytics site or set the value as auto.</span><br><span class=\"line\">## You MUST upgrade to Universal Analytics first!</span><br><span class=\"line\">## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN</span><br><span class=\"line\">baidu_tongji:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  sitecode: e6d1f421bbc9962127a50488f9ed37d1 ## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site code</span><br><span class=\"line\">cnzz_tongji:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  siteid:    ## e.g. 1253575964 your cnzz tongji site id</span><br><span class=\"line\">ibruce_tongji: # 不蒜子计数</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\"></span><br><span class=\"line\">#### Miscellaneous</span><br><span class=\"line\">ShowCustomFont: true  ## you can change custom font in `variable.styl` and `font.styl` which in the theme folder `/jacman/source/css`.</span><br><span class=\"line\">fancybox: true        ## if you use gallery post or want use fancybox please set the value to true.</span><br><span class=\"line\">totop: true           ## if you want to scroll to top in every post set the value to true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### Custom Search</span><br><span class=\"line\">google_cse:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  cx:   ## e.g. 018294693190868310296:abnhpuysycw your Custom Search ID.</span><br><span class=\"line\">## https://www.google.com/cse/</span><br><span class=\"line\">## To enable the custom search You must create a &quot;search&quot; folder in &apos;/source&apos; and a &quot;index.md&quot; file</span><br><span class=\"line\">## set the &apos;front-matter&apos; as</span><br><span class=\"line\">## layout: search</span><br><span class=\"line\">## title: search</span><br><span class=\"line\">## ---</span><br><span class=\"line\">baidu_search:     ## http://zn.baidu.com/</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  id:   ## e.g. &quot;783281470518440642&quot;  for your baidu search id</span><br><span class=\"line\">  site: http://zhannei.baidu.com/cse/search  ## your can change to your site instead of the default site</span><br><span class=\"line\"></span><br><span class=\"line\">tinysou_search:     ## http://tinysou.com/</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  id:  ## e.g. &quot;4ac092ad8d749fdc6293&quot; for your tiny search id</span><br></pre></td></tr></table></figure></p>\n<p>Jacman主题布局配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\layout\\layout.ejs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (page.layout==&apos;post&apos; || page.layout==&apos;photo&apos;)&#123; %&gt;</span><br><span class=\"line\"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;header&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">    &lt;/header&gt;</span><br><span class=\"line\">    &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">      &lt;%- body %&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/sidebar&apos;,&#123;item: page,table: true&#125;) %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">    &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; else if(page.layout==&apos;page&apos;)&#123; %&gt;</span><br><span class=\"line\">  &lt;% if(page.source.match(/\\.md$/))&#123; %&gt;</span><br><span class=\"line\">    &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">      &lt;body&gt;</span><br><span class=\"line\">        &lt;header&gt;</span><br><span class=\"line\">          &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">        &lt;/header&gt;</span><br><span class=\"line\">        &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">          &lt;%- body %&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">      &lt;/body&gt;</span><br><span class=\"line\">     &lt;/html&gt;</span><br><span class=\"line\">     &lt;% &#125;else&#123; %&gt;</span><br><span class=\"line\">    &lt;%- page.content %&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; else if(page.layout==&apos;search&apos;)&#123; %&gt;</span><br><span class=\"line\">&lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;header&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">      &lt;/header&gt;</span><br><span class=\"line\">      &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/search&apos;)%&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">   &lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; else if(page.layout==&apos;tags&apos;)&#123; %&gt;</span><br><span class=\"line\"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;header&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">      &lt;/header&gt;</span><br><span class=\"line\">      &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">          &lt;%- partial(&apos;_partial/tags&apos;)%&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">   &lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; else if(page.layout==&apos;categories&apos;)&#123; %&gt;</span><br><span class=\"line\"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;header&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">      &lt;/header&gt;</span><br><span class=\"line\">      &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">          &lt;%- partial(&apos;_partial/categories&apos;)%&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">   &lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; else if(page.category!=null||page.tag!=null||page.archive!=null) &#123; %&gt;</span><br><span class=\"line\">  &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;header&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">      &lt;/header&gt;</span><br><span class=\"line\">      &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;%- body %&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">   &lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;header&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">    &lt;/header&gt;</span><br><span class=\"line\">    &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">      &lt;%- body %&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/sidebar&apos;,&#123;item: page,table: false&#125;) %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">    &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">    &lt;a href=&quot;https://github.com/amao12580&quot;&gt;&lt;img style=&quot;position: absolute; top: 0; right: 0; border: 0;&quot; src=&quot;https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67&quot; alt=&quot;Fork me on GitHub&quot; data-canonical-src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\"> &lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>Jacman主题页面尾部配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\layout\\_partial\\footer.ejs<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;footer&quot; &gt;</span><br><span class=\"line\">    &lt;% if(theme.author_img)&#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;line&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;&lt;/span&gt;</span><br><span class=\"line\">        &lt;div class=&quot;author&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;%; &#125; %&gt;</span><br><span class=\"line\">    &lt;% if(theme.author.intro_line1 || theme.author.intro_line2)&#123; %&gt;</span><br><span class=\"line\">    &lt;section class=&quot;info&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt; &lt;%= theme.author.intro_line1 %&gt; &lt;br/&gt;</span><br><span class=\"line\">            &lt;%= theme.author.intro_line2 %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/section&gt;</span><br><span class=\"line\">     &lt;%; &#125; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;social-font&quot; class=&quot;clearfix&quot;&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.weibo)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;http://weibo.com/&lt;%= theme.author.weibo %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-weibo&quot; title=&quot;微博&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.github)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://github.com/&lt;%=theme.author.github %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-github&quot; title=&quot;github&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.stackoverflow)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;http://stackoverflow.com/users/&lt;%=theme.author.stackoverflow %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-stack-overflow&quot; title=&quot;stackoverflow&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.twitter)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://twitter.com/&lt;%=theme.author.twitter %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-twitter&quot; title=&quot;twitter&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.facebook)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://www.facebook.com/&lt;%=theme.author.facebook %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-facebook&quot; title=&quot;facebook&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.linkedin)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://www.linkedin.com/in/&lt;%=theme.author.linkedin %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-linkedin&quot; title=&quot;linkedin&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.douban)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://www.douban.com/people/&lt;%=theme.author.douban %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-douban&quot; title=&quot;豆瓣&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.zhihu)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;http://www.zhihu.com/people/&lt;%=theme.author.zhihu %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-zhihu&quot; title=&quot;知乎&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.google_plus)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://plus.google.com/&lt;%=theme.author.google_plus %&gt;?rel=author&quot; target=&quot;_blank&quot; class=&quot;icon-google_plus&quot; title=&quot;Google+&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.email)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;mailto:&lt;%=theme.author.email %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-email&quot; title=&quot;Email Me&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">            &lt;%  Array.prototype.S=String.fromCharCode(2);</span><br><span class=\"line\">              Array.prototype.in_array=function(e)&#123; var r=new RegExp(this.S+e+this.S); return (r.test(this.S+this.join(this.S)+this.S)); &#125;;</span><br><span class=\"line\">                var cc = new Array(&apos;by&apos;,&apos;by-nc&apos;,&apos;by-nc-nd&apos;,&apos;by-nc-sa&apos;,&apos;by-nd&apos;,&apos;by-sa&apos;,&apos;zero&apos;); %&gt;</span><br><span class=\"line\">        &lt;% if (cc.in_array(theme.creative_commons) ) &#123; %&gt;</span><br><span class=\"line\">                &lt;div class=&quot;cc-license&quot;&gt;</span><br><span class=\"line\">          &lt;a href=&quot;http://creativecommons.org/licenses/&lt;%= theme.creative_commons %&gt;/4.0&quot; class=&quot;cc-opacity&quot; target=&quot;_blank&quot;&gt;</span><br><span class=\"line\">            &lt;img src=&quot;&lt;%- config.root %&gt;img/cc-&lt;%= theme.creative_commons %&gt;.svg&quot; alt=&quot;Creative Commons&quot; /&gt;</span><br><span class=\"line\">          &lt;/a&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;%; &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;p class=&quot;copyright&quot;&gt;</span><br><span class=\"line\">        © &lt;%= new Date().getFullYear() %&gt;</span><br><span class=\"line\">        &lt;% if (config.author) &#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;&lt;%= config.root %&gt;about&quot; target=&quot;_blank&quot; title=&quot;&lt;%= config.author %&gt;&quot;&gt;&lt;%= config.author %&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; else &#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;&lt;%= config.url %&gt;&quot; title=&quot;&lt;%= config.title %&gt;&quot;&gt;&lt;%= config.title %&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 不蒜子统计 --&gt;</span><br><span class=\"line\">&lt;% if (theme.ibruce_tongji.enable)&#123; %&gt;</span><br><span class=\"line\">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;span id=&quot;busuanzi_container_site_pv&quot; style=&apos;display:none&apos;&gt;</span><br><span class=\"line\">本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;,本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;，本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/span&gt;</span><br><span class=\"line\">&lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-7备份的重要性\"><a href=\"#2-7备份的重要性\" class=\"headerlink\" title=\"2.7备份的重要性\"></a>2.7备份的重要性</h3><p>刚开始折腾时，经常出现改了很多配置，一运行就报错了，但是无法定位是哪些配置的改动导致的？<br>幸好我用Sublime Text 3修改的，有历史记录，这点真是太赞了！给你要的<a href=\"http://pan.baidu.com/s/1pLnDKW7\" target=\"_blank\" rel=\"external\">链接</a>，密码：3ook</p>\n<p>Hexo配置好后，最好做一次网盘私密备份，以免主机故障丢失。而且有了备份，在家或在公司，都可以愉快的写blog啦！</p>\n<h2 id=\"3-可能遇到的问题及答案\"><a href=\"#3-可能遇到的问题及答案\" class=\"headerlink\" title=\"3.可能遇到的问题及答案\"></a>3.可能遇到的问题及答案</h2><p>1.hexo系列命令无法执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\GitHub&gt; hexo c</span><br><span class=\"line\">Usage: hexo &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  help     Get help on a command.</span><br><span class=\"line\">  init     Create a new Hexo folder.</span><br><span class=\"line\">  version  Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages in the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more help, you can use &apos;hexo help [command]&apos; for the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure></p>\n<p>解决：请切换目录到Hexo安装目录后再执行。这是因为Hexo没有全局环境配置的问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .\\Hexo</span><br></pre></td></tr></table></figure></p>\n<p>2.关于404页面的处理<br>搜索很多关于404页面的资料，都是把配置好的404.html，每次在hexo g命令后手工放在hexo的public目录下。这样子有个缺点，每次都需要手工操作一次，这对于程序员来说是极其不人道的，我想到一个点子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将404.html文件放在hexo的source目录下</span><br><span class=\"line\">在hexod的全局配置文件:_config.yml，配置skip_render</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\">  - README.md</span><br><span class=\"line\">  - 404.htm</span><br></pre></td></tr></table></figure></p>\n<p>3.如何在文章中插入图片？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Hexo的source文件夹下，建一个文件夹“img”</span><br><span class=\"line\">将想要插入到文章的图片，放到img文件夹下，图片最好是png格式，文件小而且不变形</span><br><span class=\"line\">使用示例：![图片的名字](/img/图片001.png)</span><br></pre></td></tr></table></figure></p>\n<p>4.如何在文章中插入代码段？<br>将需要显示为代码段的内容，用```前后包裹住<br><img src=\"/img/代码段.png\" alt=\"\"></p>\n<p>显示的效果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码段1</span><br><span class=\"line\">代码段2</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>　　转眼间3月份也即将过去了，在接受了众多的理论输入以及实践之后，决定要将一些值得分享的事情记录下来，一方面是避免自己重复的掉坑，另一方面也希望通过blog的方式锻炼自己的文字能力。输入+沉淀+输出，形成自我知识攫取过程的闭环。</p>\n<p>　　下面记录从零开始的Blogging with Hexo的搭建过程，有一些简单的问题，在文末也会给出答案。</p>\n<h2 id=\"1-你将要做什么？\"><a href=\"#1-你将要做什么？\" class=\"headerlink\" title=\"1.你将要做什么？\"></a>1.你将要做什么？</h2><p>　　跟我一起在GiHub上搭建免费无限流量博客，不限速，有版本追溯管理。sadly，免费的背后是低层次的服务。搭建的博客服务器在国外，国内访问的速度没法保障，后文会给出一定的解决方案。内容的维护只能以静态Html的方式发布，意味着没有数据库，因此带来了幂等性，没有各种Web攻击，算作是一件好事？</p>\n<p>　　搭建过程中需要的技术：GitHub的使用、安装NodeJS、安装Hexo及系列插件、安装及配置Jacman主题、新文章的发布、Markdown的持续提高。</p>\n<h3 id=\"1-1国内blog平台的现状\"><a href=\"#1-1国内blog平台的现状\" class=\"headerlink\" title=\"1.1国内blog平台的现状\"></a>1.1国内blog平台的现状</h3><p>国内的技术blog平台主要有：cnblogs、51cto、iteye、oschina、infoq等；排名没分先后，纯属个人想法。相信以上blogs，作为技术人，大家一定不陌生。平台型的blog，对个人的有利有弊，优势在于：免去软硬件维护管理的麻烦、不用担心流量和各种安全问题、；劣势也比较明显：内容版权、变现很困难、内容受限、内容面临下线风险</p>\n<p>引用<a href=\"http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\">阮一峰先生的总结</a>：</p>\n<ol>\n<li>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。</li>\n<li>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</li>\n<li>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</li>\n</ol>\n<p>即技术人对于blog的核心需求是：发布文章、维护文章、随时控制、免去其他管理，也就是输出可控的文章。</p>\n<h3 id=\"1-2如何选择适合自己的blog平台\"><a href=\"#1-2如何选择适合自己的blog平台\" class=\"headerlink\" title=\"1.2如何选择适合自己的blog平台\"></a>1.2如何选择适合自己的blog平台</h3><p>国内的blog平台少有让人长期安心逗留的，各种内容审查政策的强压，大环境的逐利性等因素，促使少有blog平台保持良心的同时持续改进其平台，在此不多言。<br>我们希望发出的文章，可以进入一个技术人大都汇聚的环境中，以提高影响力。这样的环境可以是个人blog、blogs平台、微信平台等等。如果你有足够的影响力，也希望在作者与读者之间建立交流通道，常见的就是文章的评论回复功能了，其他的也有读者QQ群等社区型交流方式。引申的说，对于不怀好意的评论者，还需要一个评论审核的功能，甚至禁止评论，这都能在下文中得到解决。</p>\n<h3 id=\"1-3为什么是Hexo？\"><a href=\"#1-3为什么是Hexo？\" class=\"headerlink\" title=\"1.3为什么是Hexo？\"></a>1.3为什么是Hexo？</h3><p>我们怎么评价Hexo？</p>\n<p>知乎：<a href=\"https://www.zhihu.com/question/19996679\">jekyll vs Hexo</a></p>\n<h2 id=\"2-如何做？\"><a href=\"#2-如何做？\" class=\"headerlink\" title=\"2.如何做？\"></a>2.如何做？</h2><h3 id=\"2-1安装和配置NodeJS\"><a href=\"#2-1安装和配置NodeJS\" class=\"headerlink\" title=\"2.1安装和配置NodeJS\"></a>2.1安装和配置NodeJS</h3><ol>\n<li><p>确认你的配置是windows 7，虽然没有限制一定要windows，但是本教程基于windows。<img src=\"/img/计算机软硬件配置.png\" alt=\"我的系统环境\">。</p>\n</li>\n<li><p><a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\">安装NodeJS</a><br>我的安装完成目录：</p>\n</li>\n</ol>\n<p><img src=\"/img/NodeJS安装完成.png\" alt=\"\"></p>\n<ol>\n<li><a href=\"http://www.cnblogs.com/enix/p/3635343.html\">解决npm安装模块慢或失败的问题</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry=&quot;http://registry.npmjs.org&quot;//设置npm源地址</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>确认你的npm配置：</p>\n<p><img src=\"/img/npm配置信息.png\" alt=\"\"></p>\n<h3 id=\"2-2获取GitHub账号\"><a href=\"#2-2获取GitHub账号\" class=\"headerlink\" title=\"2.2获取GitHub账号\"></a>2.2获取GitHub账号</h3><p>GitHub账号和GitHub Pages 一般都应该有吧，已有的请自动无视这一部分。</p>\n<h3 id=\"2-2yourname-github-io\"><a href=\"#2-2yourname-github-io\" class=\"headerlink\" title=\"2.2yourname.github.io\"></a>2.2yourname.github.io</h3><ul>\n<li>首先注册一个『GitHub』帐号，已有的默认默认请忽略</li>\n<li>建立与你用户名对应的仓库，仓库名必须为『your_user_name.github.com』</li>\n</ul>\n<h3 id=\"2-3安装和配置windows-GitHub客户端\"><a href=\"#2-3安装和配置windows-GitHub客户端\" class=\"headerlink\" title=\"2.3安装和配置windows GitHub客户端\"></a>2.3安装和配置windows GitHub客户端</h3><p>不建议在<a href=\"https://desktop.github.com/\">GitHub官网</a>下载最新客户端，官网下载的客户端大小不到1MB，在本地运行还需要链接Amazon下载具体的安装包，因为国内网络环境，经常下载到一半就断掉.</p>\n<p>我个人试了各种方法不得解，最后找到了离线安装版：已存入百度云：链接：<a href=\"http://pan.baidu.com/s/1eRmoG6Y\">http://pan.baidu.com/s/1eRmoG6Y</a> 密码：3vus</p>\n<p>因为版本控制工具比较耗系统资源，请尽量安装在非系统所在盘，尽量选择剩余容量大的盘。<br>安装完成后，得到2个桌面图标：GitHub、Git Shell。前者是可视化版，后者是命令行版。</p>\n<p>我选择使用GitHub,打开后进行GitHub账号登录，第一次登录成功后，绑定邮箱会收到新邮件：[GitHub] A new public key was added to your account</p>\n<p>点击左上角“+”号，选择clone，选择自己的yourname.github.io。<br>在下一步中选择存放文件夹，我的选择是：<br><img src=\"/img/github目录.png\" alt=\"\"></p>\n<p>简单的使用windows GitHub客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在对话框顶部有“No uncommitted changes”和“History”，点击后可以进行切换。</span><br><span class=\"line\">在版本库所在的文件夹有了文件变化后，这里会有变化“28 uncommitted changes”和“History”，28是指的未提交的更改数量。</span><br><span class=\"line\">填写Summary和Description后，可以进行本地提交：Commit to master。</span><br><span class=\"line\">此时若还想提交到远程GitHub服务器，点击右上角“Sync”按钮进行同步。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4安装和配置Hexo\"><a href=\"#2-4安装和配置Hexo\" class=\"headerlink\" title=\"2.4安装和配置Hexo\"></a>2.4安装和配置Hexo</h3><p>安装和初始化Hexo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /d/</span><br><span class=\"line\">$ mkdir hexo</span><br><span class=\"line\">$ cd hexo</span><br><span class=\"line\">$ npm install -g hexo</span><br><span class=\"line\">$ hexo init</span><br><span class=\"line\">$ hexo g # 或者hexo generate</span><br><span class=\"line\">$ hexo s # 或者hexo server，可以在http://localhost:4000/查看</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/hexo安装目录.png\" alt=\"\"></p>\n<p>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ git clone https://github.com/wuchong/jacman.git themes/jacman</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/jacman主题安装目录.png\" alt=\"\"></p>\n<p>常用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\">hexo g == hexo generate#生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure></p>\n<p>部署文章到github.io<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">拷贝Hexo文件夹下的public文件夹里的所有文件</span><br><span class=\"line\">粘贴到yourname.github.io所在磁盘目录中，我的目录是：D:\\GitHub\\amao12580.github.io</span><br><span class=\"line\">使用GitHub客户端进行提交到远程服务器</span><br><span class=\"line\">打开yourname.github.io网址即可看到效果啦！</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5为什么是Jacman\"><a href=\"#2-5为什么是Jacman\" class=\"headerlink\" title=\"2.5为什么是Jacman?\"></a>2.5为什么是Jacman?</h3><p>参见评价<a href=\"http://wsgzao.github.io/post/hexo-jacman/\">Jacman基于Pacman修改的Hexo主题</a></p>\n<h3 id=\"2-6私人定制\"><a href=\"#2-6私人定制\" class=\"headerlink\" title=\"2.6私人定制\"></a>2.6私人定制</h3><p>在这里贴出我修改过的一些文件，很多修改都给出了备注。</p>\n<p>Hexo主配置文件：D:\\GitHub\\Hexo\\_config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Hexo Configuration</span><br><span class=\"line\">## Docs: https://hexo.io/docs/configuration.html</span><br><span class=\"line\">## Source: https://github.com/hexojs/hexo/</span><br><span class=\"line\"></span><br><span class=\"line\"># Site</span><br><span class=\"line\">title: Cat&apos;s Blog</span><br><span class=\"line\">subtitle: 一饮一啄，莫非前定.</span><br><span class=\"line\">#为了更便于搜索引擎爬到，添加了网站的keywords</span><br><span class=\"line\">keywords: cat&apos;s,chengliang,amao12580,blog,developers</span><br><span class=\"line\">description: Follw the https://xuanwo.org/2015/03/26/hexo-intor/</span><br><span class=\"line\">author: Steven Cheng</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: http://amao12580.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: post/:year/:month/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Directory</span><br><span class=\"line\">source_dir: source</span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">about_dir: about</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\">  - README.md</span><br><span class=\"line\">  - 404.html</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">external_link: true # Open external links in new tab</span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: false</span><br><span class=\"line\">post_asset_folder: false</span><br><span class=\"line\">relative_link: false</span><br><span class=\"line\">future: true</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\">  auto_detect: false</span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"># Date / Time format</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\">datetime_format: YYYY-MM-DD HH:mm:ss.SSS</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: jacman</span><br><span class=\"line\">stylus:</span><br><span class=\"line\">  compress: true</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Others</span><br><span class=\"line\">index_generator:</span><br><span class=\"line\">  per_page: 5 ##首页默认10篇文章标题 如果值为0不分页</span><br><span class=\"line\"></span><br><span class=\"line\">archive_generator:</span><br><span class=\"line\">    per_page: 0 ##归档页面默认10篇文章标题</span><br><span class=\"line\">    yearly: true  ##生成年视图</span><br><span class=\"line\">    monthly: true ##生成月视图</span><br><span class=\"line\"></span><br><span class=\"line\">tag_generator:</span><br><span class=\"line\">    per_page: 0 ##标签分类页面默认10篇文章</span><br><span class=\"line\"></span><br><span class=\"line\">category_generator:</span><br><span class=\"line\">    per_page: 0 ###分类页面默认10篇文章</span><br><span class=\"line\"></span><br><span class=\"line\">feed:</span><br><span class=\"line\">    type: atom ##feed类型 atom或者rss2</span><br><span class=\"line\">    path: atom.xml ##feed路径</span><br><span class=\"line\">    limit: 20  ##feed文章最小数量</span><br><span class=\"line\"></span><br><span class=\"line\">#访问zipperary/sitemap.xml即可看到站点地图。不过，sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。</span><br><span class=\"line\">#sitemap</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  - path: sitemap.xml</span><br><span class=\"line\"></span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\"> - path: baidusitemap.xml</span><br></pre></td></tr></table></figure></p>\n<p>Jacman主题的主配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\ _config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##### Menu</span><br><span class=\"line\">menu:</span><br><span class=\"line\">  主页 | Home: /</span><br><span class=\"line\">  索引 | Index: /index</span><br><span class=\"line\">  归档 | Archives: /archives</span><br><span class=\"line\">  简介 | About: /about</span><br><span class=\"line\">## you can create `tags` and `categories` folders in `../source`.</span><br><span class=\"line\">## And create a `index.md` file in each of them.</span><br><span class=\"line\">## set `front-matter`as</span><br><span class=\"line\">## layout: tags (or categories)</span><br><span class=\"line\">## title: tags (or categories)</span><br><span class=\"line\">## ---</span><br><span class=\"line\"></span><br><span class=\"line\">#### Widgets</span><br><span class=\"line\">widgets:</span><br><span class=\"line\">- github-card</span><br><span class=\"line\">- category</span><br><span class=\"line\">- tag</span><br><span class=\"line\">- links</span><br><span class=\"line\">- douban</span><br><span class=\"line\">- rss</span><br><span class=\"line\">- weibo</span><br><span class=\"line\">  ## provide eight widgets:github-card,category,tag,rss,archive,tagcloud,links,weibo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### RSS</span><br><span class=\"line\">rss: /atom.xml ## RSS address.</span><br><span class=\"line\"></span><br><span class=\"line\">#### Image</span><br><span class=\"line\">imglogo:</span><br><span class=\"line\">  enable: true             ## display image logo true/false.</span><br><span class=\"line\">  src: img/logo.png        ## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.</span><br><span class=\"line\">favicon: img/favicon.ico   ## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.</span><br><span class=\"line\">apple_icon: img/jacman.jpg ## size:114px*114px,please put image into the theme folder `/jacman/source/img`.</span><br><span class=\"line\">author_img: img/author.jpg ## size:220px*220px.display author avatar picture.if don&apos;t want to display,please don&apos;t set this.</span><br><span class=\"line\">banner_img: #img/banner.jpg ## size:1920px*200px+. Banner Picture</span><br><span class=\"line\">### Theme Color</span><br><span class=\"line\">theme_color:</span><br><span class=\"line\">    theme: &apos;#2ca6cb&apos;    ##the defaut theme color is blue</span><br><span class=\"line\"></span><br><span class=\"line\"># 代码高亮主题</span><br><span class=\"line\"># available: default | night</span><br><span class=\"line\">highlight_theme: night</span><br><span class=\"line\"></span><br><span class=\"line\">#### index post is expanding or not</span><br><span class=\"line\">index:</span><br><span class=\"line\">  expand: false           ## default is unexpanding,so you can only see the short description of each post.</span><br><span class=\"line\">  excerpt_link: Read More</span><br><span class=\"line\"></span><br><span class=\"line\">close_aside: true  #close sidebar in post page if true</span><br><span class=\"line\">mathjax: true      #enable mathjax if true</span><br><span class=\"line\"></span><br><span class=\"line\">### Creative Commons License Support, see http://creativecommons.org/</span><br><span class=\"line\">### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zero</span><br><span class=\"line\">creative_commons: none</span><br><span class=\"line\"></span><br><span class=\"line\">#### Author information</span><br><span class=\"line\">author:</span><br><span class=\"line\">  intro_line1:  &quot;Hello ,I&apos;m steven. This is my blog on GitHub.&quot;    ## your introduction on the bottom of the page</span><br><span class=\"line\">  intro_line2:  &quot;Whenever you feel like criticizing any one, just remember that all the people in this world haven’t had the advantages that you’ve had.&quot;  ## the 2nd line</span><br><span class=\"line\">  intro_line3: &quot;每当你觉得想要批评什么人的时候，你切要记着，这个世界上的人并非都具备你禀有的条件。《了不起的盖茨比》&quot;</span><br><span class=\"line\">  weibo: 3201133445     ## e.g. wuchong1014 or 2176287895 for http://weibo.com/2176287895</span><br><span class=\"line\">  weibo_verifier: b3593ceb    ## e.g. b3593ceb Your weibo-show widget verifier ,if you use weibo-show it is needed.</span><br><span class=\"line\">  tsina:      ## e.g. 2176287895  Your weibo ID,It will be used in share button.</span><br><span class=\"line\">  douban:     ## e.g. wuchong1014 or your id for https://www.douban.com/people/wuchong1014</span><br><span class=\"line\">  zhihu:      ## e.g. jark  for http://www.zhihu.com/people/jark</span><br><span class=\"line\">  email : chengliangchengliang888@gmail.com     ## e.g. imjark@gmail.com</span><br><span class=\"line\">  twitter:    ## e.g. jarkwu for https://twitter.com/jarkwu</span><br><span class=\"line\">  github: amao12580     ## e.g. wuchong for https://github.com/wuchong</span><br><span class=\"line\">  facebook:   ## e.g. imjark for https://facebook.com/imjark</span><br><span class=\"line\">  linkedin:   ## e.g. wuchong1014 for https://www.linkedin.com/in/wuchong1014</span><br><span class=\"line\">  google_plus:    ## e.g. &quot;111190881341800841449&quot; for https://plus.google.com/u/0/111190881341800841449, the &quot;&quot; is needed!</span><br><span class=\"line\">  stackoverflow:  ## e.g. 3222790 for http://stackoverflow.com/users/3222790/jark</span><br><span class=\"line\">## if you set them, the corresponding  share button will show on the footer</span><br><span class=\"line\"></span><br><span class=\"line\">#### Toc</span><br><span class=\"line\">toc:</span><br><span class=\"line\">  article: true   ## show contents in article.</span><br><span class=\"line\">  aside: true     ## show contents in aside.</span><br><span class=\"line\">## you can set both of the value to true of neither of them.</span><br><span class=\"line\">## if you don&apos;t want display contents in a specified post,you can modify `front-matter` and add `toc: false`.</span><br><span class=\"line\"></span><br><span class=\"line\">#### Links</span><br><span class=\"line\">links:</span><br><span class=\"line\">  码农圈: https://coderq.com,一个面向程序员交流分享的新一代社区</span><br><span class=\"line\">  Jark&apos;s Blog: http://wuchong.me</span><br><span class=\"line\">  GitHub: https://github.com/amao12580</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### Comment</span><br><span class=\"line\">duoshuo_shortname: amao12580   ## e.g. wuchong   your duoshuo short name.</span><br><span class=\"line\">disqus_shortname:     ## e.g. wuchong   your disqus short name.</span><br><span class=\"line\"></span><br><span class=\"line\">#### Share button</span><br><span class=\"line\">jiathis:</span><br><span class=\"line\">  enable: false ## if you use jiathis as your share tool,the built-in share tool won&apos;t be display.</span><br><span class=\"line\">  id:    ## e.g. 1889330 your jiathis ID.</span><br><span class=\"line\">  tsina: ## e.g. 2176287895 Your weibo id,It will be used in share button.</span><br><span class=\"line\"></span><br><span class=\"line\">#### Analytics</span><br><span class=\"line\">google_analytics:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  id: UA-75497011-1        ## e.g. UA-46321946-2 your google analytics ID.</span><br><span class=\"line\">  site: http://amao12580.github.io      ## e.g. wuchong.me your google analytics site or set the value as auto.</span><br><span class=\"line\">## You MUST upgrade to Universal Analytics first!</span><br><span class=\"line\">## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN</span><br><span class=\"line\">baidu_tongji:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  sitecode: e6d1f421bbc9962127a50488f9ed37d1 ## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site code</span><br><span class=\"line\">cnzz_tongji:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  siteid:    ## e.g. 1253575964 your cnzz tongji site id</span><br><span class=\"line\">ibruce_tongji: # 不蒜子计数</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\"></span><br><span class=\"line\">#### Miscellaneous</span><br><span class=\"line\">ShowCustomFont: true  ## you can change custom font in `variable.styl` and `font.styl` which in the theme folder `/jacman/source/css`.</span><br><span class=\"line\">fancybox: true        ## if you use gallery post or want use fancybox please set the value to true.</span><br><span class=\"line\">totop: true           ## if you want to scroll to top in every post set the value to true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### Custom Search</span><br><span class=\"line\">google_cse:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  cx:   ## e.g. 018294693190868310296:abnhpuysycw your Custom Search ID.</span><br><span class=\"line\">## https://www.google.com/cse/</span><br><span class=\"line\">## To enable the custom search You must create a &quot;search&quot; folder in &apos;/source&apos; and a &quot;index.md&quot; file</span><br><span class=\"line\">## set the &apos;front-matter&apos; as</span><br><span class=\"line\">## layout: search</span><br><span class=\"line\">## title: search</span><br><span class=\"line\">## ---</span><br><span class=\"line\">baidu_search:     ## http://zn.baidu.com/</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  id:   ## e.g. &quot;783281470518440642&quot;  for your baidu search id</span><br><span class=\"line\">  site: http://zhannei.baidu.com/cse/search  ## your can change to your site instead of the default site</span><br><span class=\"line\"></span><br><span class=\"line\">tinysou_search:     ## http://tinysou.com/</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  id:  ## e.g. &quot;4ac092ad8d749fdc6293&quot; for your tiny search id</span><br></pre></td></tr></table></figure></p>\n<p>Jacman主题布局配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\layout\\layout.ejs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (page.layout==&apos;post&apos; || page.layout==&apos;photo&apos;)&#123; %&gt;</span><br><span class=\"line\"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;header&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">    &lt;/header&gt;</span><br><span class=\"line\">    &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">      &lt;%- body %&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/sidebar&apos;,&#123;item: page,table: true&#125;) %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">    &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; else if(page.layout==&apos;page&apos;)&#123; %&gt;</span><br><span class=\"line\">  &lt;% if(page.source.match(/\\.md$/))&#123; %&gt;</span><br><span class=\"line\">    &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">      &lt;body&gt;</span><br><span class=\"line\">        &lt;header&gt;</span><br><span class=\"line\">          &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">        &lt;/header&gt;</span><br><span class=\"line\">        &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">          &lt;%- body %&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">      &lt;/body&gt;</span><br><span class=\"line\">     &lt;/html&gt;</span><br><span class=\"line\">     &lt;% &#125;else&#123; %&gt;</span><br><span class=\"line\">    &lt;%- page.content %&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; else if(page.layout==&apos;search&apos;)&#123; %&gt;</span><br><span class=\"line\">&lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;header&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">      &lt;/header&gt;</span><br><span class=\"line\">      &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/search&apos;)%&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">   &lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; else if(page.layout==&apos;tags&apos;)&#123; %&gt;</span><br><span class=\"line\"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;header&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">      &lt;/header&gt;</span><br><span class=\"line\">      &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">          &lt;%- partial(&apos;_partial/tags&apos;)%&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">   &lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; else if(page.layout==&apos;categories&apos;)&#123; %&gt;</span><br><span class=\"line\"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;header&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">      &lt;/header&gt;</span><br><span class=\"line\">      &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">          &lt;%- partial(&apos;_partial/categories&apos;)%&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">   &lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; else if(page.category!=null||page.tag!=null||page.archive!=null) &#123; %&gt;</span><br><span class=\"line\">  &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">      &lt;header&gt;</span><br><span class=\"line\">        &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">      &lt;/header&gt;</span><br><span class=\"line\">      &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;%- body %&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">   &lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\"> &lt;%- partial(&apos;_partial/head&apos;) %&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;header&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/header&apos;) %&gt;</span><br><span class=\"line\">    &lt;/header&gt;</span><br><span class=\"line\">    &lt;div id=&quot;container&quot;&gt;</span><br><span class=\"line\">      &lt;%- body %&gt;</span><br><span class=\"line\">      &lt;%- partial(&apos;_partial/sidebar&apos;,&#123;item: page,table: false&#125;) %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;footer&gt;&lt;%- partial(&apos;_partial/footer&apos;) %&gt;&lt;/footer&gt;</span><br><span class=\"line\">    &lt;%- partial(&apos;_partial/after_footer&apos;) %&gt;</span><br><span class=\"line\">    &lt;a href=&quot;https://github.com/amao12580&quot;&gt;&lt;img style=&quot;position: absolute; top: 0; right: 0; border: 0;&quot; src=&quot;https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67&quot; alt=&quot;Fork me on GitHub&quot; data-canonical-src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\"> &lt;/html&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>Jacman主题页面尾部配置文件：D:\\GitHub\\Hexo\\themes\\jacman\\layout\\_partial\\footer.ejs<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;footer&quot; &gt;</span><br><span class=\"line\">    &lt;% if(theme.author_img)&#123; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;line&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;&lt;/span&gt;</span><br><span class=\"line\">        &lt;div class=&quot;author&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;%; &#125; %&gt;</span><br><span class=\"line\">    &lt;% if(theme.author.intro_line1 || theme.author.intro_line2)&#123; %&gt;</span><br><span class=\"line\">    &lt;section class=&quot;info&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt; &lt;%= theme.author.intro_line1 %&gt; &lt;br/&gt;</span><br><span class=\"line\">            &lt;%= theme.author.intro_line2 %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/section&gt;</span><br><span class=\"line\">     &lt;%; &#125; %&gt;</span><br><span class=\"line\">    &lt;div class=&quot;social-font&quot; class=&quot;clearfix&quot;&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.weibo)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;http://weibo.com/&lt;%= theme.author.weibo %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-weibo&quot; title=&quot;微博&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.github)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://github.com/&lt;%=theme.author.github %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-github&quot; title=&quot;github&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.stackoverflow)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;http://stackoverflow.com/users/&lt;%=theme.author.stackoverflow %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-stack-overflow&quot; title=&quot;stackoverflow&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.twitter)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://twitter.com/&lt;%=theme.author.twitter %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-twitter&quot; title=&quot;twitter&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.facebook)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://www.facebook.com/&lt;%=theme.author.facebook %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-facebook&quot; title=&quot;facebook&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.linkedin)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://www.linkedin.com/in/&lt;%=theme.author.linkedin %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-linkedin&quot; title=&quot;linkedin&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.douban)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://www.douban.com/people/&lt;%=theme.author.douban %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-douban&quot; title=&quot;豆瓣&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.zhihu)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;http://www.zhihu.com/people/&lt;%=theme.author.zhihu %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-zhihu&quot; title=&quot;知乎&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.google_plus)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;https://plus.google.com/&lt;%=theme.author.google_plus %&gt;?rel=author&quot; target=&quot;_blank&quot; class=&quot;icon-google_plus&quot; title=&quot;Google+&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;% if(theme.author.email)&#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;mailto:&lt;%=theme.author.email %&gt;&quot; target=&quot;_blank&quot; class=&quot;icon-email&quot; title=&quot;Email Me&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">            &lt;%  Array.prototype.S=String.fromCharCode(2);</span><br><span class=\"line\">              Array.prototype.in_array=function(e)&#123; var r=new RegExp(this.S+e+this.S); return (r.test(this.S+this.join(this.S)+this.S)); &#125;;</span><br><span class=\"line\">                var cc = new Array(&apos;by&apos;,&apos;by-nc&apos;,&apos;by-nc-nd&apos;,&apos;by-nc-sa&apos;,&apos;by-nd&apos;,&apos;by-sa&apos;,&apos;zero&apos;); %&gt;</span><br><span class=\"line\">        &lt;% if (cc.in_array(theme.creative_commons) ) &#123; %&gt;</span><br><span class=\"line\">                &lt;div class=&quot;cc-license&quot;&gt;</span><br><span class=\"line\">          &lt;a href=&quot;http://creativecommons.org/licenses/&lt;%= theme.creative_commons %&gt;/4.0&quot; class=&quot;cc-opacity&quot; target=&quot;_blank&quot;&gt;</span><br><span class=\"line\">            &lt;img src=&quot;&lt;%- config.root %&gt;img/cc-&lt;%= theme.creative_commons %&gt;.svg&quot; alt=&quot;Creative Commons&quot; /&gt;</span><br><span class=\"line\">          &lt;/a&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;%; &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;p class=&quot;copyright&quot;&gt;</span><br><span class=\"line\">        © &lt;%= new Date().getFullYear() %&gt;</span><br><span class=\"line\">        &lt;% if (config.author) &#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;&lt;%= config.root %&gt;about&quot; target=&quot;_blank&quot; title=&quot;&lt;%= config.author %&gt;&quot;&gt;&lt;%= config.author %&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; else &#123; %&gt;</span><br><span class=\"line\">        &lt;a href=&quot;&lt;%= config.url %&gt;&quot; title=&quot;&lt;%= config.title %&gt;&quot;&gt;&lt;%= config.title %&gt;&lt;/a&gt;</span><br><span class=\"line\">        &lt;%; &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 不蒜子统计 --&gt;</span><br><span class=\"line\">&lt;% if (theme.ibruce_tongji.enable)&#123; %&gt;</span><br><span class=\"line\">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;span id=&quot;busuanzi_container_site_pv&quot; style=&apos;display:none&apos;&gt;</span><br><span class=\"line\">本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;,本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;，本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/span&gt;</span><br><span class=\"line\">&lt;%; &#125; %&gt;</span><br><span class=\"line\">        &lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-7备份的重要性\"><a href=\"#2-7备份的重要性\" class=\"headerlink\" title=\"2.7备份的重要性\"></a>2.7备份的重要性</h3><p>刚开始折腾时，经常出现改了很多配置，一运行就报错了，但是无法定位是哪些配置的改动导致的？<br>幸好我用Sublime Text 3修改的，有历史记录，这点真是太赞了！给你要的<a href=\"http://pan.baidu.com/s/1pLnDKW7\">链接</a>，密码：3ook</p>\n<p>Hexo配置好后，最好做一次网盘私密备份，以免主机故障丢失。而且有了备份，在家或在公司，都可以愉快的写blog啦！</p>\n<h2 id=\"3-可能遇到的问题及答案\"><a href=\"#3-可能遇到的问题及答案\" class=\"headerlink\" title=\"3.可能遇到的问题及答案\"></a>3.可能遇到的问题及答案</h2><p>1.hexo系列命令无法执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\GitHub&gt; hexo c</span><br><span class=\"line\">Usage: hexo &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  help     Get help on a command.</span><br><span class=\"line\">  init     Create a new Hexo folder.</span><br><span class=\"line\">  version  Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">  --config  Specify config file instead of using _config.yml</span><br><span class=\"line\">  --cwd     Specify the CWD</span><br><span class=\"line\">  --debug   Display all verbose messages in the terminal</span><br><span class=\"line\">  --draft   Display draft posts</span><br><span class=\"line\">  --safe    Disable all plugins and scripts</span><br><span class=\"line\">  --silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more help, you can use &apos;hexo help [command]&apos; for the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure></p>\n<p>解决：请切换目录到Hexo安装目录后再执行。这是因为Hexo没有全局环境配置的问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .\\Hexo</span><br></pre></td></tr></table></figure></p>\n<p>2.关于404页面的处理<br>搜索很多关于404页面的资料，都是把配置好的404.html，每次在hexo g命令后手工放在hexo的public目录下。这样子有个缺点，每次都需要手工操作一次，这对于程序员来说是极其不人道的，我想到一个点子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将404.html文件放在hexo的source目录下</span><br><span class=\"line\">在hexod的全局配置文件:_config.yml，配置skip_render</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\">  - README.md</span><br><span class=\"line\">  - 404.htm</span><br></pre></td></tr></table></figure></p>\n<p>3.如何在文章中插入图片？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Hexo的source文件夹下，建一个文件夹“img”</span><br><span class=\"line\">将想要插入到文章的图片，放到img文件夹下，图片最好是png格式，文件小而且不变形</span><br><span class=\"line\">使用示例：![图片的名字](/img/图片001.png)</span><br></pre></td></tr></table></figure></p>\n<p>4.如何在文章中插入代码段？<br>将需要显示为代码段的内容，用```前后包裹住<br><img src=\"/img/代码段.png\" alt=\"\"></p>\n<p>显示的效果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码段1</span><br><span class=\"line\">代码段2</span><br></pre></td></tr></table></figure></p>\n"},{"title":"记一次redis成功调优的过程","date":"2016-03-23T08:09:12.000Z","description":"在最后一步提到RDB定期存盘，解决方案存在问题，强行关闭，会导致redis中的数据存在丢失风险，在这里建议有条件的，配置redis为1主1从，Master不进行任何形式的存盘，而Slave配置RDB和AOF方式的存盘，双保险。应用只连接Master即可。","_content":"\n## 我们怎么使用Redis？\n公司目前主力开发的产品，是一个典型的平台电商型产品，包含了平台运营方、商家、消费者等角色。\n\n公司提供电商平台，同时负责系统维护和系统保障；商家与公司进行签约后，入驻平台，将商品投放到平台进行展示；平台依据商家签约信息，进行商品与消费者之间的兴趣推荐，消费者通过商品与商家达成消费订单后，平台按单依据签约与商家抽取利润。商家发现日订单分析有了提升后，可能会与平台达成更多的合作。从而演变出了良好的商业发展模式。\n\n平台电商型产品中，非常满足80/20法则(又称为:[帕雷托法则](https://zh.wikipedia.org/wiki/%E5%B8%95%E9%9B%B7%E6%89%98%E6%B3%95%E5%88%99)),查询的业务量远远多于写入的业务量，为了提高[TPS](http://www.ha97.com/5095.html)，降低对数据库的访问。我们也采取常规的做法，选用redis进行缓存常用业务数据。其中典型的就有：1.图片的信息、2.登录后的用户信息、3.全局超时锁、4.验证码。\n\n关于redis的技术选型，其实在我参与产品开发之前就已经完成了，在这个产品里也作为缓存层在使用。产品目前还在雏形孵化阶段，没有考虑太多关于分布式以及高可用的方案，对redis的使用很粗糙，在团队内可能熟悉redis的Developer不多，或者说有空又有耐心还熟悉redis的Developer没有吧？后来与PM的沟通后得知确实如此！\n\n### 缓存图片信息\n目前有很多业务在使用该缓存：商品的图片编辑，商家店面形象的图文自我介绍，用户针对订单的图文评价.\n\n这一部分的数据，在产品启动时(没有黑科技，就是在web.xml，自定义listener。)，读取Mysql中的File表，load进redis，数据量约120W条，没有做任何的分库分表处理。\n\nFile表的结构如下：\n```\nCREATE TABLE `file` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '图片ID',\n  `uid` int(11) DEFAULT NULL COMMENT '上传用户Id',\n  `crc32` char(8) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'crc32校验和',\n  `url` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT '' COMMENT '对外访问的URL',\n  `path` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT '' COMMENT '存储的相对路径',\n  `filename` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '文件名字',\n  `size` int(11) DEFAULT NULL COMMENT '图片大小(单位byte)',\n  `ext` char(5) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '图片后缀',\n  `is_image` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否是图片，0为不是，1为是',\n  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `storage_type` tinyint(4) NOT NULL DEFAULT '0' COMMENT '图片存储介质，0为fileSystem，1阿里云,2表示ppw老数据',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `filename` (`filename`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=1146617 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='文件信息表';\n```\n\n\n有意思的是，每次产品启动时，读取到的所有File表记录，进行for循环，每一次循环中，访问一次redis。而在产品关闭时，删除redis的key，从而清除缓存？如果数据量愈来愈多，不就像做过山车一样，启动时加载全量数据，使用量飚的很高，关闭时删除全量缓存，使用量逐渐落回低谷(redis有[内存释放机制](http://wangneng-168.iteye.com/blog/2100379))。对于内存型中间件产品，这样的使用会带来很多的不可靠性。\n\n启动时加载数据到redis时的处理过程,部分为伪码：\n```\nFile表对应的实体类：\npublic class File{//与数据库字段名完全的一致\n    private int id;\n    private int uid;\n    private String crc32;\n    private String url;\n    private String path;\n    private String filename;\n    private int size;\n    private String ext;\n    private int is_image;\n    private Timestamp create_time;\n    private int storage_type;\n\n    //忽略 getter\\setter\n}\n\n\n//调用Dao层访问Mysql数据库，取回File表的所有记录，每条记录包含所有字段。\nList<File> files=this.fileDao.getAll();\n\n\n//读取File表的SQL：SELECT * FROM FILE;\n\nfor(int i=0;i<files.size();i++){\n    this.cacheDao.setOneFileToRedis(files.get(i).getId(),files.get(i).getUrl());//调用Dao层访问Redis，将数据存入redis\n    //WTF?只需要2个字段，然而取回了所有字段？而且不能批量存入redis?\n}\n\n\ncacheDao的实现\nprivate final static String PHOTO_CACHE_KEY=\"photos\";\npublic void setOneFileToRedis(int id,String url){\n    this.jedis.hset(PHOTO_CACHE_KEY, id.toString(), url);//1.使用[Hash数据结构](https://redis.readthedocs.org/en/2.4/hash.html)。2.没有设置key有效期，即永久有效。\n}\n\npublic String getOneFileInRedis(int id){\n    return this.jedis.hget(PHOTO_CACHE_KEY, id.toString());\n}\n```\n\n这样图片信息缓存的结构看起来是这样:\n![photos在redis的数据结构示例](/img/photos在redis的数据结构示例.png)\n实际的情况下，size远大于1000，上文说了约在120w左右，我的这个redis可视化工具(redisclient-win32.x86.2.0)无法获取size这样大的key，报SocketTimeOutException。猜测是向redis获取大key时，无法在一个socket包中写入，造成通讯失败。\n\n以上cacheDao的实现中，没有提供一次批量获取所需的多个图片信息，例如“public Map<Integer,String> getBatchFileInRedis(int[] ids)”，甚至在cache interface中都没有提供这样的接口定义。\n\n这样导致在上层逻辑中，出现大量一次性代码。因为调用不集中，给重构带来很大麻烦。\n```\n这是分页获取商品列表的伪代码实现\n\n与数据库product表对应的实体类\npublic class Product{\n    private int id;\n    private String name;\n    private long price;\n    private int photoId;\n\n    //忽略 getter\\setter\n}\n\n真实的返回到app端的对象\npublic class ProductFull{\n    private int id;\n    private String name;\n    private long price;\n    private int photoId;\n    private String photoUrl;\n\n    //忽略 getter\\setter\n}\npublic List<ProductFull> findProductByPage(int pageSize,int pageNo){\n    List<Product> products=this.productDao.findByPage(int pageSize,int pageNo);//调用Dao层访问Mysql\n    List<ProductFull> results=new ArrayList<>(products.size());\n    for(Product product:products){\n        ProductFull pf=new ProductFull();\n        pf.setId(product.getId());//其他的属性值都是类似的拷贝，或借助Apache-Common beanUtils组件进行拷贝。\n\n\n        String url=this.cacheDao.getOneFileInRedis(product.getPhotoId());//每一个循环项都访问了redis\n        pf.setPhotoUrl(url);\n        results.add(pf);\n    }\n    return results;\n}\n\n如果每个商品分页是10条，最坏情况下，需要访问1次Mysql+访问10次redis。非常严重的是，每个分页条数的大小由app端决定，服务端不限制，WTF?\n```\n\n### 缓存登录后的用户信息\n在这个产品面向消费者以及商家，都推出了不同的APP。互联网APP为了提高用户体验，以及降低用户登录登出频次(用户的登录/登出操作，对服务器是比较大的开销)，都会对一次登陆成功的用户，默认在一段时间不需要再次登录。即服务器分配Token给APP本地保存，同时服务器保存Token，设置该Token在一段时间不活动后自动失效，APP后续与服务器的通信中，都需要提交该Token鉴权。这是很常规的做法，短时间有效，而且是非关键性小数据，一次写入多次读取，对于服务器来说，没有比memcached或redis更合适的选择了，那为什么没有选择memcached？我个人的猜测是memcached更适合做Object Store Server，而且很重要的redis具有丰富数据结构与[扩容与容灾机制](http://www.cnblogs.com/EE-NovRain/p/3268476.html)。\n\n用户的第一次登录，服务端进行参数解析，鉴权后，就需要写入2次redis。\n用户的登出接口中，直接是删除当前会话的redis记录。\n\n第一次：写入本次登入的Token与用户信息的关联\n```\n登录成功后，从DB或Cache层获取用户数据，构造用户数据JSON\nString userLoginSuccessInfo=\"{\"uid\":12321,\"name\":\"张三\",\"sex\":0,\"avatar_id\":345643}\";\n\ncacheDao的实现\nprivate final static String SESSION_CACHE_KEY=\"session:\";\n//登录成功\npublic void setOneLoginSuccessToRedis(String token,String userLoginSuccessInfo){\n    this.jedis.setex(SESSION_CACHE_KEY+token, 30*24*60*60, userLoginSuccessInfo);//1.使用String数据结构。2.设置key有效期30天。\n}\n\n//鉴权\npublic String getOneLoginSuccessInRedis(String token){\n    return this.jedis.get(SESSION_CACHE_KEY+token);\n}\n\n//登出\npublic void logoutSuccessInRedis(String token){\n    this.jedis.del(SESSION_CACHE_KEY+token);\n}\n\n\n这个以\"session:\"开头的key里，并没有实现从uid如何获取token值？\n这会引发的问题：一个用户的多次登录，会生成多个以\"session:\"开头的key，没有覆盖之前登录的token。造成内存空间的浪费，以及不安全。正确的做法在下文会提到。\n```\n\n第二次：写入本次登入的用户id与24小时内的积分获取信息。\n\n有一个需求定义用户在登录后可以获取积分，但在24小时内的登录只算一次。\n\n那在服务器端的是实现是，用户第一次登录成功后，在redis写入一个与该用户相关的key，并设置24小时后失效，然后再增加积分。用户在24小时内进行第二次登录，先读取redis是否有相关的key，使用exist命令，如果已经有了，就不增加积分了。\n\n```\n登录成功后，从DB或Cache层获取用户数据，构造用户与积分业务数据JSON\nint uid=158263;\n\ncacheDao的实现\nprivate final static String USER_ACTIVITY_CACHE_KEY=\"daily_activity_\";\npublic void setOneUserWithActivityToRedis(int uid){\n    this.jedis.setex(USER_ACTIVITY_CACHE_KEY+uid, 24*60*60, \"\");//1.使用String数据结构。2.设置key有效期24h。3.value部分为空字符串？\n}\n\npublic boolean checkOneUserWithActivityToRedis(int uid){\n    this.jedis.exists(USER_ACTIVITY_CACHE_KEY+uid);\n}\n\n```\n这部分的业务属于典型案例，浪费内存空间。\n第一个问题，不应该使用长前缀，每个key都需要set进内存，长前缀意味着空间占用，以及效率低下。\n第二个问题，这不是明显可以使用[Sorted Set数据结构](https://redis.readthedocs.org/en/2.4/sorted_set.html)?，还可以省掉一次exists检查。\n\n虽然redis的TPS很高，但是我们依旧要避免滥用。\n\n## 这次的问题的描述？\n测试MM提出在性能测试环境中，有一些API在并发数到250~300时，出现很多报错。\n```\nredis的相关错误\nCould not get a resource from the pool\n```\n典型报错的接口有\n* 分页获取商品列表\n* 用户登录\n\n应用中配置redis连接池上限值是1000，而在redis server端配置maxClients=10000;区区这点并发，就耗尽redis连接池资源了？绝不可能，问题还在更远的地方等着我.\n\n性能测试环境配置\n```\n硬件配置\n操作系统    Linux Ubuntu 14.04.4 LTS\nCPU个数   4\nCPU时钟频率 2.6G\n内存  4G\n有无外部存储  云端存储\n\n软件配置\ndocker  1.9.1\nmysql   5.6\njdk 1.8.0_72\nsolr    5.3.0\nredis   3.0.5\n```\n## 如何一步步的解决问题？\n在描述问题产生背景时，其实也提到了很多不合理的地方，但*存在即合理*，处在现在的困境，一定有当时的无奈。现在我们一起来总结一下问题所在。\n### 对缓存图片的处理存在的问题\n* 产品初始化时全量塞入redis/产品停止运行是全量卸掉\n* 产品初始化时塞入redis时，没有做批量操作\n* 对批量获取图片信息不支持，在接口层面就已经没有定义，对于可预见的需求没有进行考虑，这是架构设计的缺陷。\n* 引申：大量的数据，放在一个key里，会出现问题，需要进行水平切分(Sharding)。\n\n#### 方案\n1.图片的Id数据在File表采用了*自增长*的方式生成，不会出现重复，并且有顺序。我们可以利用这一点，在产品初始化时，在Mysql数据库File表只查找2个字段：id/url。程序处理时，先写入reids一个key，使用Hash数据结构，isInitIng:photos-true，标明到正在初始化，其他产品节点不需要重复初始化。使用hmset的方式，一次性将多个键值对存入到redis。完成后，修改isInitIng:photos-false。当有了新图片时，先在Mysql数据库File表进行保存，得到这个图片的Id以及url，使用hset加入该图片到redis。如果需要修改某一张图片的url，也可以用hset。这样在产品停止运行时，是不需要删除redis关于图片的数据的。\n\n2.cache层加入新接口，支持批量获取图片信息\n```\nprivate final static String PHOTO_CACHE_KEY=\"photos\";\npublic void setFileToRedis(Map<Integer,String> photos){\n    this.jedis.hmset(PHOTO_CACHE_KEY, photos);\n}\n\npublic Map<Integer,String> getBatchFileInRedis(int[] ids){\n    return this.jedis.hmget(PHOTO_CACHE_KEY, coverArrayToString(ids));\n}\n\nprivate static String[] coverArrayToString(int[] ids){\n    String[] results=new String[ids.length];\n    for (int i = 0; i < ids.length; i++) {\n        results[i]=ids[i]+\"\";\n    }\n    return results;\n}\n```\n对之前循环调用的上层代码进行修改，改为调用批量获取接口。\n\n3.对于单个key承载大量的数据的情况，方案是对key下的values hash key进行分割，使用一定的算法将块状的数据均匀分布在多个key里。给一个[参考链接](http://blog.nosqlfan.com/html/3379.html)。\n\n### 对缓存用户登录的处理存在的问题\n* session的存储不合理，每次登陆都会生成一个新的key值\n* 对USER_ACTIVITY_CACHE_KEY在value部分的数据结构不合理，应采用Sorted Set\n* 对USER_ACTIVITY_CACHE_KEY的命名不合适，过长导致空间浪费和效率低下\n* 因采用错误数据结构，USER_ACTIVITY_CACHE_KEY需要进行多一次的exists判断。\n\n#### 方案\nsession的存储不合理的解决，通过新的key(uid:token)来反向标记uid与token的关系，2个key的超时时间保持一致，例如\n```\nuid:158742-token001\n```\n在写入SESSION_CACHE_KEY时，同时写入到redis，为保证2次写入的原子性，需要使用[redis的事务](https://redis.readthedocs.org/en/2.4/transaction.html)。如果支持用户的多设备在线，只需要将key(uid:token)更改为Sorted Set结构。因为不存在资源的争夺，这个事务几乎不会失败。在用户登出时，删除掉当前会话信息以及用户关联的会话信息(同样是使用redis事务)。\n```\ncacheDao的实现\nprivate final static String SESSION_CACHE_KEY=\"se:\";//全称：\"session:\"，改善key命名，按业务进行简略，提升网络传输和存储效率。\nprivate final static String USER_TOKEN_CACHE_KEY=\"u:t:\";//uid:token:\n//登录成功，保存用户登录Token。接收建议的token参数值，返回实际保存的token值。\npublic String setOneLoginSuccessToRedis(int uid,String token,String userLoginSuccessInfo){//重构\n    if(checkOneUserTokenExists(uid)){\n        token=getOneUserToken(uid);\n    }\n    long expireTime=30*24*60*60;//设置key有效期30天。\n    String ret=this.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);//乐观锁，重试，在这里几乎不存在\n    if(ret==null||!ret.equals(\"OK\")){\n        log.error(\"redis watch 操作失败.ret:{}\",ret);\n        this.jedis.unwatch();\n    }\n    Transaction tx = this.jedis.multi();\n    tx.setex(SESSION_CACHE_KEY+token, expireTime, userLoginSuccessInfo);\n    tx.setex(USER_TOKEN_CACHE_KEY+uid, expireTime, token);\n    List<Object> results = tx.exec();\n    return token;\n}\n\n//检查用户登录Token是否已经存在\npublic boolean checkOneUserTokenExists(int uid){//新方法\n    return this.jedis.exists(USER_TOKEN_CACHE_KEY+uid);\n}\n\n//获取用户登录Token信息\npublic String getOneUserToken(int uid){//新方法\n    return this.jedis.get(USER_TOKEN_CACHE_KEY+uid);\n}\n\n//鉴权\npublic String getOneLoginSuccessInRedis(String token){//不改动\n    return this.jedis.get(SESSION_CACHE_KEY+token);\n}\n\n//登出\npublic void logoutSuccessInRedis(String token){\n    String ret=this.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);//乐观锁，重试，在这里几乎不存在\n    if(ret==null||!ret.equals(\"OK\")){\n        log.error(\"redis watch 操作失败.ret:{}\",ret);\n        this.jedis.unwatch();\n    }\n    Transaction tx = this.jedis.multi();\n    tx.del(SESSION_CACHE_KEY+token);\n    tx.del(USER_TOKEN_CACHE_KEY+uid);\n    List<Object> results = tx.exec();\n}\n```\n#### 隐患和思考\n\nredis事务带来的问题，redis的事务设计比较暴力，这给应用层带来了麻烦。\n\n* Redis的基本事务（basic transaction）需要用到MULTI命令和EXEC命令，这种事务可以让一个客户端在不被其他客户端打断的情况下执行多个命令。和关系数据库那种可以在执行的过程中进行回滚（rollback）的事务不同，在Redis里面，被MULTI命令和EXEC命令包围的所有命令会一个接一个地执行，直到所有命令都执行完毕为止。当一个事务执行完毕之后，Redis才会处理其他客户端的命令。\n* [Redis 在事务失败时不进行回滚，而是继续执行余下的命令](http://redisdoc.com/topic/transaction.html)\n\n基于此，redis事务会在客户端高并发时，其他客户端命令产生阻塞，而且事务回滚需要应用层自己解决。关于事务无法自动回滚，这在NoSQL领域是常见问题了。\n\n#### redis时间线设计\n接下来对用户在24小时内的积分信息的处理进行改进，以及redis不支持对Set内的单个Element进行有效期设置，我们采用Sorted Set结构，结合Score特性和Quartz来达到元素过期被删除的目的。\n```\ncacheDao的实现\nprivate final static String USER_ACTIVITY_CACHE_KEY=\"a:d\";//全称：\"activity:daily:\"，改善key命名，按业务进行简略，提升网络传输和存储效率。\npublic void setOneUserWithActivityToRedis(int uid){\n    this.jedis.zadd(USER_ACTIVITY_CACHE_KEY,System.currentTimeMillis(),uid+\"\");\n}\n\npublic boolean checkOneUserWithActivityToRedis(int uid){\n    this.jedis.sismember(USER_ACTIVITY_CACHE_KEY,uid+\"\");\n    long score=this.jedis.zscore(USER_ACTIVITY_CACHE_KEY,uid+\"\");\n    if(score>0){\n        return true;\n    }\n    return false;\n}\n\n另外加入一个计划任务，借助Quartz即可。\nString corn=*/1 * * * * ?  //每1秒钟执行1次\npublic void cleanExpireUserWithActivity(){\n    long now=System.currentTimeMillis();\n    long 1MAgo=now-60*1000;//1分钟前的时间\n    long remCount=this.jedis.zremrangeByScore(USER_ACTIVITY_CACHE_KEY,1MAgo,now);\n    log.info(\"成功删除的元素数量是：{}，执行时间是：{}\",remCount,now);\n}\n```\n#### 隐患和思考\n在上文给出的代码中，我们做了一定的容错性，每次删除过去1分钟的所有Element，这样Quartz出现故障时，如果在1分钟内得到fixed，影响的数据只限于1分钟内的Element。每1秒钟触发一次Quartz与删除过去1分钟的所有Element，这2个维度的频率需要权衡。\n\n* 过高频率的访问redis是否会有稳定性问题？\n* 删除Element的时间区间过大，是否会影响redis执行效率(时间复杂度:[O(log(N)+M)](http://redisdoc.com/sorted_set/zrevrangebyscore.html))，导致阻塞？\n* 高频率删除Element，是否会影响redis的RDB与AOF备份，因此造成额外的问题？\n\n借助Quartz还有misfire的隐患，如何保障Quartz在每一秒钟都顺畅执行一次(Once and only once)，这涉及到操作系统、内存的可靠性，这是一个大的命题，我们不过多讨论。\n\n记录一下对这类问题的思考\n\n* 可以对这个计划任务进行多机并行运行。例如：A计划与B计划都处于运行状态，A在奇数秒触发，B在偶数秒触发。进一步降低2秒内misfire的概率。\n* 在Quartz启动Job时，检测到是业务高峰期，另开启一个异步线程，调用cleanExpireUserWithActivity方法，而cleanExpireUserWithActivity需要承受并发，即redis需要对zremrangeByScore命令支持并发，但redis是[单进程单线程模型](http://www.blogjava.net/caojianhua/archive/2013/01/28/394847.html)。\n* 异步线程受制于redis，还可以进行改进，使用队列，如ActiveMQ。调用cleanExpireUserWithActivity逻辑进行调整，将命令序列化后写入到点对点队列，另外使用程序监听队列(即消费者端)，有新命令时取出，这里实际调用cleanExpireUserWithActivity，仅在调用成功后释放命令。\n* 现在问题在于如何保障ActiveMQ的稳定运行了，应该还有改进方案。\n\n按照以上的方案进行重构后，性能得到显著提升，按理论来说稳定性会有提高，因为不具备稳定性测试的条件，没法比较。\n## 遇到了一些问题\n1.redis一次批量hmset过多时报错\nhmset操作时，对于一次传入参数数量上限有要求。这取决于你的网络环境下，socket一次写入的字节数上限。\n```\npublic String hmset(final String key, final Map<String, String> hash);\n```\n在我本机的环境下(应用与redis都在本机，不同端口，redis以默认配置运行)，Map<String, String> hash的size大于5w左右就会报错。\n```\nredis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketException: Software caused connection abort: socket write error\n    at redis.clients.jedis.Protocol.sendCommand(Protocol.java:98)\n    at redis.clients.jedis.Protocol.sendCommand(Protocol.java:78)\n    at redis.clients.jedis.Connection.sendCommand(Connection.java:101)\n    at redis.clients.jedis.BinaryClient.hmset(BinaryClient.java:246)\n    at redis.clients.jedis.Client.hmset(Client.java:171)\n    at redis.clients.jedis.Jedis.hmset(Jedis.java:652)\n```\n在这种情况下，必需要将大Map切分成一块块的Map，循环调用hmset\n```\nfinal static int maxEveryTurn=5000;//定义每次最多批量塞入redis的key数量\n    /**\n     * 批量存储到redis的key数量太多，必需切分成小块存储\n     */\n    private static void setTooManyToJedis(Jedis jedis, Map<String, String> map) {\n        int size=map.size();\n        int pieceNum=size/maxEveryTurn;\n        if(size>(pieceNum*maxEveryTurn)){\n            pieceNum+=1;\n        }\n        Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator();\n        List<Map<String, String>> list=new ArrayList<>(pieceNum);\n        for (int i=0;i<pieceNum;i++){\n            list.add(new HashMap<>(maxEveryTurn));\n        }\n        while (iterator.hasNext()) {\n            Map.Entry<String, String> entry = iterator.next();\n            String key = entry.getKey();\n            int hashCode = Math.abs(String.valueOf(key).hashCode());\n            int index=hashCode % pieceNum;\n            list.get(index).put(key, map.get(key));\n        }\n        map.clear();\n        for (Map<String, String> pieceMap:list){\n            setToJedis(jedis, pieceMap);\n        }\n        list.clear();\n    }\n```\n2.持续写redis时遇到rdb问题\n在完成以上方案的改进后，测试人员的用户登录这个接口在进行性能回归测试时，使用gatling配置250个工作线程进行并发，一共完成50w的用户登录后就算是结束，再根据生成的测试报告分析。\n刚开始每次压到20多w的用户登录时，就会报错，redis连接池无连接了。分析代码是配置了testOnBorrow:true，这个配置会在获取到连接后检查该连接的有效性，如果无效就丢弃，即在连接池删掉一个连接。而此时redis因为问题无法执行用户端的任何命令，所以所有连接都被当做无效连接被丢弃？直到连接池空了。\n```\n在redis命令行执行\nset test 12321\n返回错误：\n(error) MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.\n```\n\n这是因为默认的redis配置是以[RDB的方式](http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22)进行定期存盘，而存盘时，会拒绝所有外部命令的写入(存盘失败后也会拒绝写入)。因为目前在redis的数据都处于可丢，解决方式也相当的粗暴。\n```\n1.保证redis处于运行状态，查询系统6379端口的监听情况\n2.顺序执行以下命令行，遇到错误请终止\ndocker exec -it test_redis_1 /bin/bash\ncd usr/local/bin\n./redis-cli.sh\nconfig set stop-writes-on-bgsave-error no\nconfig set save \"\"\nquit\nexit\n```\n执行完以后，重启应用，再压测，呵呵，bug关闭。\n## 总结\n1.在最后一步提到RDB定期存盘，解决方案存在问题，强行关闭，会导致redis中的数据存在丢失风险，在这里建议有条件的，配置redis为1主1从，Master不进行任何形式的存盘，而Slave配置RDB和AOF方式的存盘，双保险。应用只连接Master即可。。注意Slave与Master第一次进行同步时会使用全量复制，对资源会有比较大的消耗，尽量选择在业务平峰期进行。\n引申阅读，Master在这里成为了单点，为了Master的高可用，还有进一步的方案，1个Master下挂2个Slave，其中1个Slave(称为A)负责2种方式的存盘，另一个Slave(称为B)作为Master的热备，在Master故障后，参与到投票，成为新的Master，而B节点切换到A，接受A的增量同步。注意自动failover时，外部需要关闭写入命令。完成failover后，使用ip映射切换，使应用层重新恢复使用，相应的，应用层需要做到一定的容错性。实际生产中，不会要求应用层去做容错性措施，会有各种中间件(twemproxy)自动处理。\n\n2.以上业务中对[redis的16个数据库](https://www.ttlsa.com/redis/redis-database/)没有使用好，可以按业务将数据存储到不同数据库，隔离影响。\n\n### 常用命令合集\n调试过程中，由于可视化工具对redis支持的不够好，使用了很多redis的命令行，现在我们总结一下吧！\n由于docker的风行，好处多多，我们在测试环境、线上环境也使用了docker/docker-compose\n#### docker\n```\ndocker-compose ps          //查看yml文件中所有容器的运行情况\ndocker-compose up -d xw    //将yml文件中容器名称定义为xw的容器，以后台运行的方式运行起来，如果是tomcat镜像，会调用tomcat的startup.sh.\ndocker-compose stop xw     //将yml文件中容器名称定义为xw的容器停止，如果是tomcat镜像，会调用tomcat的shutdown.sh\ndocker-compose stop        //查看yml文件中所有容器进行停止\ndocker-compose rm xw       //移除xw镜像\ndocker-compose build xw    //对xw进行镜像构建\n```\n#### ./redis-cli.sh/info\n```\nF:\\Redis> ./redis-cli\n127.0.0.1:6379> info\n# Server\nredis_version:3.0.501\nredis_git_sha1:00000000\nredis_git_dirty:0\nredis_build_id:ba05b51e58eb9205\nredis_mode:standalone\nos:Windows\narch_bits:64\nmultiplexing_api:WinSock_IOCP\nprocess_id:1552\nrun_id:d3f2efa1c6cf26c7cf9246c2fcaca89b8e109439\ntcp_port:6379\nuptime_in_seconds:462095\nuptime_in_days:5\nhz:10\nlru_clock:16404129\nconfig_file:F:\\Redis\\redis.windows.conf\n\n# Clients\nconnected_clients:1\nclient_longest_output_list:0\nclient_biggest_input_buf:0\nblocked_clients:0\n\n# Memory\nused_memory:842704\nused_memory_human:822.95K\nused_memory_rss:804920\nused_memory_peak:374731600\nused_memory_peak_human:357.37M\nused_memory_lua:36864\nmem_fragmentation_ratio:0.96\nmem_allocator:jemalloc-3.6.0\n\n# Persistence\nloading:0\nrdb_changes_since_last_save:0\nrdb_bgsave_in_progress:0\nrdb_last_save_time:1459242952\nrdb_last_bgsave_status:ok\nrdb_last_bgsave_time_sec:1\nrdb_current_bgsave_time_sec:-1\naof_enabled:0\naof_rewrite_in_progress:0\naof_rewrite_scheduled:0\naof_last_rewrite_time_sec:-1\naof_current_rewrite_time_sec:-1\naof_last_bgrewrite_status:ok\naof_last_write_status:ok\n\n# Stats\ntotal_connections_received:1010\ntotal_commands_processed:49859\ninstantaneous_ops_per_sec:0\ntotal_net_input_bytes:1822381802\ntotal_net_output_bytes:3650427\ninstantaneous_input_kbps:0.00\ninstantaneous_output_kbps:0.00\nrejected_connections:0\nsync_full:0\nsync_partial_ok:0\nsync_partial_err:0\nexpired_keys:1073\nevicted_keys:0\nkeyspace_hits:20782\nkeyspace_misses:738\npubsub_channels:0\npubsub_patterns:0\nlatest_fork_usec:388023\nmigrate_cached_sockets:0\n\n# Replication\nrole:master\nconnected_slaves:0\nmaster_repl_offset:0\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n\n# CPU\nused_cpu_sys:9.45\nused_cpu_user:38.25\nused_cpu_sys_children:0.00\nused_cpu_user_children:0.00\n\n# Cluster\ncluster_enabled:0\n\n# Keyspace\ndb0:keys=1,expires=0,avg_ttl=0\n```\n#### set/get\n```\n127.0.0.1:6379> set test 123456\nOK\n127.0.0.1:6379> get test\n\"123456\"\n```\n#### hset/hmset/hget/hmget\n```\n127.0.0.1:6379> hset testHash key1 value11\n(integer) 1\n127.0.0.1:6379> hget testHash\n(error) ERR wrong number of arguments for 'hget' command\n127.0.0.1:6379> hget testHash key1\n\"value11\"\n127.0.0.1:6379>\n\n127.0.0.1:6379> hset testHash key1 value11 key2 value22\n(error) ERR wrong number of arguments for 'hset' command\n127.0.0.1:6379> hmset testHash key1 value11 key2 value22\nOK\n127.0.0.1:6379> hmget testHash key1 key2\n1) \"value11\"\n2) \"value22\"\n```\n#### hlen/keys\n```\n127.0.0.1:6379> len test\n(error) ERR unknown command 'len'\n127.0.0.1:6379> hlen testHash\n(integer) 2\n127.0.0.1:6379> keys test\n1) \"test\"\n127.0.0.1:6379> keys testHash\n1) \"testHash\"\n127.0.0.1:6379> keys *\n1) \"testHash\"\n2) \"test\"\n3) \"message-queue-sms\"\n```\n#### config set/get\n```\n127.0.0.1:6379> config get *\n  1) \"dbfilename\"\n  2) \"dump.rdb\"\n  3) \"requirepass\"\n  4) \"\"\n  5) \"masterauth\"\n  6) \"\"\n  7) \"unixsocket\"\n  8) \"\"\n  9) \"logfile\"\n 10) \"\"\n 11) \"pidfile\"\n 12) \"/var/run/redis.pid\"\n 13) \"maxmemory\"\n 14) \"512000000\"\n 15) \"maxmemory-samples\"\n 16) \"5\"\n 17) \"timeout\"\n 18) \"0\"\n 19) \"tcp-keepalive\"\n 20) \"0\"\n 21) \"auto-aof-rewrite-percentage\"\n 22) \"100\"\n 23) \"auto-aof-rewrite-min-size\"\n 24) \"67108864\"\n 25) \"hash-max-ziplist-entries\"\n 26) \"512\"\n 27) \"hash-max-ziplist-value\"\n 28) \"64\"\n 29) \"list-max-ziplist-entries\"\n 30) \"512\"\n 31) \"list-max-ziplist-value\"\n 32) \"64\"\n 33) \"set-max-intset-entries\"\n 34) \"512\"\n 35) \"zset-max-ziplist-entries\"\n 36) \"128\"\n 37) \"zset-max-ziplist-value\"\n 38) \"64\"\n 39) \"hll-sparse-max-bytes\"\n 40) \"3000\"\n 41) \"lua-time-limit\"\n 42) \"5000\"\n 43) \"slowlog-log-slower-than\"\n 44) \"10000\"\n 45) \"latency-monitor-threshold\"\n 46) \"0\"\n 47) \"slowlog-max-len\"\n 48) \"128\"\n 49) \"port\"\n 50) \"6379\"\n 51) \"tcp-backlog\"\n 52) \"511\"\n 53) \"databases\"\n 54) \"16\"\n 55) \"repl-ping-slave-period\"\n 56) \"10\"\n 57) \"repl-timeout\"\n 58) \"60\"\n 59) \"repl-backlog-size\"\n 60) \"1048576\"\n 61) \"repl-backlog-ttl\"\n 62) \"3600\"\n 63) \"maxclients\"\n 64) \"10000\"\n 65) \"watchdog-period\"\n 66) \"0\"\n 67) \"slave-priority\"\n 68) \"100\"\n 69) \"min-slaves-to-write\"\n 70) \"0\"\n 71) \"min-slaves-max-lag\"\n 72) \"10\"\n 73) \"hz\"\n 74) \"10\"\n 75) \"cluster-node-timeout\"\n 76) \"15000\"\n 77) \"cluster-migration-barrier\"\n 78) \"1\"\n 79) \"cluster-slave-validity-factor\"\n 80) \"10\"\n 81) \"repl-diskless-sync-delay\"\n 82) \"5\"\n 83) \"cluster-require-full-coverage\"\n 84) \"yes\"\n 85) \"no-appendfsync-on-rewrite\"\n 86) \"no\"\n 87) \"slave-serve-stale-data\"\n 88) \"yes\"\n 89) \"slave-read-only\"\n 90) \"yes\"\n 91) \"stop-writes-on-bgsave-error\"\n 92) \"yes\"\n 93) \"daemonize\"\n 94) \"no\"\n 95) \"rdbcompression\"\n 96) \"yes\"\n 97) \"rdbchecksum\"\n 98) \"yes\"\n 99) \"activerehashing\"\n100) \"yes\"\n101) \"repl-disable-tcp-nodelay\"\n102) \"no\"\n103) \"repl-diskless-sync\"\n104) \"no\"\n105) \"aof-rewrite-incremental-fsync\"\n106) \"yes\"\n107) \"aof-load-truncated\"\n108) \"yes\"\n109) \"appendonly\"\n110) \"no\"\n111) \"dir\"\n112) \"F:\\\\Redis\"\n113) \"maxmemory-policy\"\n114) \"noeviction\"\n115) \"appendfsync\"\n116) \"everysec\"\n117) \"save\"\n118) \"jd 900 jd 300 jd 60\"\n119) \"loglevel\"\n120) \"verbose\"\n121) \"client-output-buffer-limit\"\n122) \"normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60\"\n123) \"unixsocketperm\"\n124) \"0\"\n125) \"slaveof\"\n126) \"\"\n127) \"notify-keyspace-events\"\n128) \"\"\n129) \"bind\"\n130) \"\"\n127.0.0.1:6379> config set save \"\"\nOK\n```\n#### flushdb/flushall\n```\n127.0.0.1:6379> flushdb\nOK\n127.0.0.1:6379> flushall\nOK\n```\n\n## 扩展阅读\n* redis删除有序集合部分过期元素：[http://caozm.blog.51cto.com/1118764/1389168](http://caozm.blog.51cto.com/1118764/1389168)\n* 节约内存：Instagram的Redis实践：[http://blog.nosqlfan.com/html/3379.html](http://blog.nosqlfan.com/html/3379.html)\n* redis持久化机制：[http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22](http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22)\n* Redis事务的分析及改进：[https://segmentfault.com/a/1190000002594059](https://segmentfault.com/a/1190000002594059)\n* redis 多数据库：[https://www.ttlsa.com/redis/redis-database/](https://www.ttlsa.com/redis/redis-database/)\n* 利用Sorted Set数据结构，为元素设置有效期：[http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set](http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set)\n* redis的Slave选举与优先级：[https://segmentfault.com/a/1190000002685515](https://segmentfault.com/a/1190000002685515)\n* 利用代理中间件实现大规模Redis集群：[http://www.imooc.com/article/4343](http://www.imooc.com/article/4343)","source":"_posts/A-successful-redis-tuning-record.md","raw":"---\ntitle: 记一次redis成功调优的过程\ndate: 2016-03-23 16:09:12\ntags:\n    - Redis\n    - Hash\n    - Sharding\n    - Twemproxy\ncategories:\n    - Record\ndescription: \"在最后一步提到RDB定期存盘，解决方案存在问题，强行关闭，会导致redis中的数据存在丢失风险，在这里建议有条件的，配置redis为1主1从，Master不进行任何形式的存盘，而Slave配置RDB和AOF方式的存盘，双保险。应用只连接Master即可。\"\n---\n\n## 我们怎么使用Redis？\n公司目前主力开发的产品，是一个典型的平台电商型产品，包含了平台运营方、商家、消费者等角色。\n\n公司提供电商平台，同时负责系统维护和系统保障；商家与公司进行签约后，入驻平台，将商品投放到平台进行展示；平台依据商家签约信息，进行商品与消费者之间的兴趣推荐，消费者通过商品与商家达成消费订单后，平台按单依据签约与商家抽取利润。商家发现日订单分析有了提升后，可能会与平台达成更多的合作。从而演变出了良好的商业发展模式。\n\n平台电商型产品中，非常满足80/20法则(又称为:[帕雷托法则](https://zh.wikipedia.org/wiki/%E5%B8%95%E9%9B%B7%E6%89%98%E6%B3%95%E5%88%99)),查询的业务量远远多于写入的业务量，为了提高[TPS](http://www.ha97.com/5095.html)，降低对数据库的访问。我们也采取常规的做法，选用redis进行缓存常用业务数据。其中典型的就有：1.图片的信息、2.登录后的用户信息、3.全局超时锁、4.验证码。\n\n关于redis的技术选型，其实在我参与产品开发之前就已经完成了，在这个产品里也作为缓存层在使用。产品目前还在雏形孵化阶段，没有考虑太多关于分布式以及高可用的方案，对redis的使用很粗糙，在团队内可能熟悉redis的Developer不多，或者说有空又有耐心还熟悉redis的Developer没有吧？后来与PM的沟通后得知确实如此！\n\n### 缓存图片信息\n目前有很多业务在使用该缓存：商品的图片编辑，商家店面形象的图文自我介绍，用户针对订单的图文评价.\n\n这一部分的数据，在产品启动时(没有黑科技，就是在web.xml，自定义listener。)，读取Mysql中的File表，load进redis，数据量约120W条，没有做任何的分库分表处理。\n\nFile表的结构如下：\n```\nCREATE TABLE `file` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '图片ID',\n  `uid` int(11) DEFAULT NULL COMMENT '上传用户Id',\n  `crc32` char(8) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'crc32校验和',\n  `url` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT '' COMMENT '对外访问的URL',\n  `path` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT '' COMMENT '存储的相对路径',\n  `filename` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '文件名字',\n  `size` int(11) DEFAULT NULL COMMENT '图片大小(单位byte)',\n  `ext` char(5) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '图片后缀',\n  `is_image` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否是图片，0为不是，1为是',\n  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `storage_type` tinyint(4) NOT NULL DEFAULT '0' COMMENT '图片存储介质，0为fileSystem，1阿里云,2表示ppw老数据',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `filename` (`filename`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=1146617 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='文件信息表';\n```\n\n\n有意思的是，每次产品启动时，读取到的所有File表记录，进行for循环，每一次循环中，访问一次redis。而在产品关闭时，删除redis的key，从而清除缓存？如果数据量愈来愈多，不就像做过山车一样，启动时加载全量数据，使用量飚的很高，关闭时删除全量缓存，使用量逐渐落回低谷(redis有[内存释放机制](http://wangneng-168.iteye.com/blog/2100379))。对于内存型中间件产品，这样的使用会带来很多的不可靠性。\n\n启动时加载数据到redis时的处理过程,部分为伪码：\n```\nFile表对应的实体类：\npublic class File{//与数据库字段名完全的一致\n    private int id;\n    private int uid;\n    private String crc32;\n    private String url;\n    private String path;\n    private String filename;\n    private int size;\n    private String ext;\n    private int is_image;\n    private Timestamp create_time;\n    private int storage_type;\n\n    //忽略 getter\\setter\n}\n\n\n//调用Dao层访问Mysql数据库，取回File表的所有记录，每条记录包含所有字段。\nList<File> files=this.fileDao.getAll();\n\n\n//读取File表的SQL：SELECT * FROM FILE;\n\nfor(int i=0;i<files.size();i++){\n    this.cacheDao.setOneFileToRedis(files.get(i).getId(),files.get(i).getUrl());//调用Dao层访问Redis，将数据存入redis\n    //WTF?只需要2个字段，然而取回了所有字段？而且不能批量存入redis?\n}\n\n\ncacheDao的实现\nprivate final static String PHOTO_CACHE_KEY=\"photos\";\npublic void setOneFileToRedis(int id,String url){\n    this.jedis.hset(PHOTO_CACHE_KEY, id.toString(), url);//1.使用[Hash数据结构](https://redis.readthedocs.org/en/2.4/hash.html)。2.没有设置key有效期，即永久有效。\n}\n\npublic String getOneFileInRedis(int id){\n    return this.jedis.hget(PHOTO_CACHE_KEY, id.toString());\n}\n```\n\n这样图片信息缓存的结构看起来是这样:\n![photos在redis的数据结构示例](/img/photos在redis的数据结构示例.png)\n实际的情况下，size远大于1000，上文说了约在120w左右，我的这个redis可视化工具(redisclient-win32.x86.2.0)无法获取size这样大的key，报SocketTimeOutException。猜测是向redis获取大key时，无法在一个socket包中写入，造成通讯失败。\n\n以上cacheDao的实现中，没有提供一次批量获取所需的多个图片信息，例如“public Map<Integer,String> getBatchFileInRedis(int[] ids)”，甚至在cache interface中都没有提供这样的接口定义。\n\n这样导致在上层逻辑中，出现大量一次性代码。因为调用不集中，给重构带来很大麻烦。\n```\n这是分页获取商品列表的伪代码实现\n\n与数据库product表对应的实体类\npublic class Product{\n    private int id;\n    private String name;\n    private long price;\n    private int photoId;\n\n    //忽略 getter\\setter\n}\n\n真实的返回到app端的对象\npublic class ProductFull{\n    private int id;\n    private String name;\n    private long price;\n    private int photoId;\n    private String photoUrl;\n\n    //忽略 getter\\setter\n}\npublic List<ProductFull> findProductByPage(int pageSize,int pageNo){\n    List<Product> products=this.productDao.findByPage(int pageSize,int pageNo);//调用Dao层访问Mysql\n    List<ProductFull> results=new ArrayList<>(products.size());\n    for(Product product:products){\n        ProductFull pf=new ProductFull();\n        pf.setId(product.getId());//其他的属性值都是类似的拷贝，或借助Apache-Common beanUtils组件进行拷贝。\n\n\n        String url=this.cacheDao.getOneFileInRedis(product.getPhotoId());//每一个循环项都访问了redis\n        pf.setPhotoUrl(url);\n        results.add(pf);\n    }\n    return results;\n}\n\n如果每个商品分页是10条，最坏情况下，需要访问1次Mysql+访问10次redis。非常严重的是，每个分页条数的大小由app端决定，服务端不限制，WTF?\n```\n\n### 缓存登录后的用户信息\n在这个产品面向消费者以及商家，都推出了不同的APP。互联网APP为了提高用户体验，以及降低用户登录登出频次(用户的登录/登出操作，对服务器是比较大的开销)，都会对一次登陆成功的用户，默认在一段时间不需要再次登录。即服务器分配Token给APP本地保存，同时服务器保存Token，设置该Token在一段时间不活动后自动失效，APP后续与服务器的通信中，都需要提交该Token鉴权。这是很常规的做法，短时间有效，而且是非关键性小数据，一次写入多次读取，对于服务器来说，没有比memcached或redis更合适的选择了，那为什么没有选择memcached？我个人的猜测是memcached更适合做Object Store Server，而且很重要的redis具有丰富数据结构与[扩容与容灾机制](http://www.cnblogs.com/EE-NovRain/p/3268476.html)。\n\n用户的第一次登录，服务端进行参数解析，鉴权后，就需要写入2次redis。\n用户的登出接口中，直接是删除当前会话的redis记录。\n\n第一次：写入本次登入的Token与用户信息的关联\n```\n登录成功后，从DB或Cache层获取用户数据，构造用户数据JSON\nString userLoginSuccessInfo=\"{\"uid\":12321,\"name\":\"张三\",\"sex\":0,\"avatar_id\":345643}\";\n\ncacheDao的实现\nprivate final static String SESSION_CACHE_KEY=\"session:\";\n//登录成功\npublic void setOneLoginSuccessToRedis(String token,String userLoginSuccessInfo){\n    this.jedis.setex(SESSION_CACHE_KEY+token, 30*24*60*60, userLoginSuccessInfo);//1.使用String数据结构。2.设置key有效期30天。\n}\n\n//鉴权\npublic String getOneLoginSuccessInRedis(String token){\n    return this.jedis.get(SESSION_CACHE_KEY+token);\n}\n\n//登出\npublic void logoutSuccessInRedis(String token){\n    this.jedis.del(SESSION_CACHE_KEY+token);\n}\n\n\n这个以\"session:\"开头的key里，并没有实现从uid如何获取token值？\n这会引发的问题：一个用户的多次登录，会生成多个以\"session:\"开头的key，没有覆盖之前登录的token。造成内存空间的浪费，以及不安全。正确的做法在下文会提到。\n```\n\n第二次：写入本次登入的用户id与24小时内的积分获取信息。\n\n有一个需求定义用户在登录后可以获取积分，但在24小时内的登录只算一次。\n\n那在服务器端的是实现是，用户第一次登录成功后，在redis写入一个与该用户相关的key，并设置24小时后失效，然后再增加积分。用户在24小时内进行第二次登录，先读取redis是否有相关的key，使用exist命令，如果已经有了，就不增加积分了。\n\n```\n登录成功后，从DB或Cache层获取用户数据，构造用户与积分业务数据JSON\nint uid=158263;\n\ncacheDao的实现\nprivate final static String USER_ACTIVITY_CACHE_KEY=\"daily_activity_\";\npublic void setOneUserWithActivityToRedis(int uid){\n    this.jedis.setex(USER_ACTIVITY_CACHE_KEY+uid, 24*60*60, \"\");//1.使用String数据结构。2.设置key有效期24h。3.value部分为空字符串？\n}\n\npublic boolean checkOneUserWithActivityToRedis(int uid){\n    this.jedis.exists(USER_ACTIVITY_CACHE_KEY+uid);\n}\n\n```\n这部分的业务属于典型案例，浪费内存空间。\n第一个问题，不应该使用长前缀，每个key都需要set进内存，长前缀意味着空间占用，以及效率低下。\n第二个问题，这不是明显可以使用[Sorted Set数据结构](https://redis.readthedocs.org/en/2.4/sorted_set.html)?，还可以省掉一次exists检查。\n\n虽然redis的TPS很高，但是我们依旧要避免滥用。\n\n## 这次的问题的描述？\n测试MM提出在性能测试环境中，有一些API在并发数到250~300时，出现很多报错。\n```\nredis的相关错误\nCould not get a resource from the pool\n```\n典型报错的接口有\n* 分页获取商品列表\n* 用户登录\n\n应用中配置redis连接池上限值是1000，而在redis server端配置maxClients=10000;区区这点并发，就耗尽redis连接池资源了？绝不可能，问题还在更远的地方等着我.\n\n性能测试环境配置\n```\n硬件配置\n操作系统    Linux Ubuntu 14.04.4 LTS\nCPU个数   4\nCPU时钟频率 2.6G\n内存  4G\n有无外部存储  云端存储\n\n软件配置\ndocker  1.9.1\nmysql   5.6\njdk 1.8.0_72\nsolr    5.3.0\nredis   3.0.5\n```\n## 如何一步步的解决问题？\n在描述问题产生背景时，其实也提到了很多不合理的地方，但*存在即合理*，处在现在的困境，一定有当时的无奈。现在我们一起来总结一下问题所在。\n### 对缓存图片的处理存在的问题\n* 产品初始化时全量塞入redis/产品停止运行是全量卸掉\n* 产品初始化时塞入redis时，没有做批量操作\n* 对批量获取图片信息不支持，在接口层面就已经没有定义，对于可预见的需求没有进行考虑，这是架构设计的缺陷。\n* 引申：大量的数据，放在一个key里，会出现问题，需要进行水平切分(Sharding)。\n\n#### 方案\n1.图片的Id数据在File表采用了*自增长*的方式生成，不会出现重复，并且有顺序。我们可以利用这一点，在产品初始化时，在Mysql数据库File表只查找2个字段：id/url。程序处理时，先写入reids一个key，使用Hash数据结构，isInitIng:photos-true，标明到正在初始化，其他产品节点不需要重复初始化。使用hmset的方式，一次性将多个键值对存入到redis。完成后，修改isInitIng:photos-false。当有了新图片时，先在Mysql数据库File表进行保存，得到这个图片的Id以及url，使用hset加入该图片到redis。如果需要修改某一张图片的url，也可以用hset。这样在产品停止运行时，是不需要删除redis关于图片的数据的。\n\n2.cache层加入新接口，支持批量获取图片信息\n```\nprivate final static String PHOTO_CACHE_KEY=\"photos\";\npublic void setFileToRedis(Map<Integer,String> photos){\n    this.jedis.hmset(PHOTO_CACHE_KEY, photos);\n}\n\npublic Map<Integer,String> getBatchFileInRedis(int[] ids){\n    return this.jedis.hmget(PHOTO_CACHE_KEY, coverArrayToString(ids));\n}\n\nprivate static String[] coverArrayToString(int[] ids){\n    String[] results=new String[ids.length];\n    for (int i = 0; i < ids.length; i++) {\n        results[i]=ids[i]+\"\";\n    }\n    return results;\n}\n```\n对之前循环调用的上层代码进行修改，改为调用批量获取接口。\n\n3.对于单个key承载大量的数据的情况，方案是对key下的values hash key进行分割，使用一定的算法将块状的数据均匀分布在多个key里。给一个[参考链接](http://blog.nosqlfan.com/html/3379.html)。\n\n### 对缓存用户登录的处理存在的问题\n* session的存储不合理，每次登陆都会生成一个新的key值\n* 对USER_ACTIVITY_CACHE_KEY在value部分的数据结构不合理，应采用Sorted Set\n* 对USER_ACTIVITY_CACHE_KEY的命名不合适，过长导致空间浪费和效率低下\n* 因采用错误数据结构，USER_ACTIVITY_CACHE_KEY需要进行多一次的exists判断。\n\n#### 方案\nsession的存储不合理的解决，通过新的key(uid:token)来反向标记uid与token的关系，2个key的超时时间保持一致，例如\n```\nuid:158742-token001\n```\n在写入SESSION_CACHE_KEY时，同时写入到redis，为保证2次写入的原子性，需要使用[redis的事务](https://redis.readthedocs.org/en/2.4/transaction.html)。如果支持用户的多设备在线，只需要将key(uid:token)更改为Sorted Set结构。因为不存在资源的争夺，这个事务几乎不会失败。在用户登出时，删除掉当前会话信息以及用户关联的会话信息(同样是使用redis事务)。\n```\ncacheDao的实现\nprivate final static String SESSION_CACHE_KEY=\"se:\";//全称：\"session:\"，改善key命名，按业务进行简略，提升网络传输和存储效率。\nprivate final static String USER_TOKEN_CACHE_KEY=\"u:t:\";//uid:token:\n//登录成功，保存用户登录Token。接收建议的token参数值，返回实际保存的token值。\npublic String setOneLoginSuccessToRedis(int uid,String token,String userLoginSuccessInfo){//重构\n    if(checkOneUserTokenExists(uid)){\n        token=getOneUserToken(uid);\n    }\n    long expireTime=30*24*60*60;//设置key有效期30天。\n    String ret=this.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);//乐观锁，重试，在这里几乎不存在\n    if(ret==null||!ret.equals(\"OK\")){\n        log.error(\"redis watch 操作失败.ret:{}\",ret);\n        this.jedis.unwatch();\n    }\n    Transaction tx = this.jedis.multi();\n    tx.setex(SESSION_CACHE_KEY+token, expireTime, userLoginSuccessInfo);\n    tx.setex(USER_TOKEN_CACHE_KEY+uid, expireTime, token);\n    List<Object> results = tx.exec();\n    return token;\n}\n\n//检查用户登录Token是否已经存在\npublic boolean checkOneUserTokenExists(int uid){//新方法\n    return this.jedis.exists(USER_TOKEN_CACHE_KEY+uid);\n}\n\n//获取用户登录Token信息\npublic String getOneUserToken(int uid){//新方法\n    return this.jedis.get(USER_TOKEN_CACHE_KEY+uid);\n}\n\n//鉴权\npublic String getOneLoginSuccessInRedis(String token){//不改动\n    return this.jedis.get(SESSION_CACHE_KEY+token);\n}\n\n//登出\npublic void logoutSuccessInRedis(String token){\n    String ret=this.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);//乐观锁，重试，在这里几乎不存在\n    if(ret==null||!ret.equals(\"OK\")){\n        log.error(\"redis watch 操作失败.ret:{}\",ret);\n        this.jedis.unwatch();\n    }\n    Transaction tx = this.jedis.multi();\n    tx.del(SESSION_CACHE_KEY+token);\n    tx.del(USER_TOKEN_CACHE_KEY+uid);\n    List<Object> results = tx.exec();\n}\n```\n#### 隐患和思考\n\nredis事务带来的问题，redis的事务设计比较暴力，这给应用层带来了麻烦。\n\n* Redis的基本事务（basic transaction）需要用到MULTI命令和EXEC命令，这种事务可以让一个客户端在不被其他客户端打断的情况下执行多个命令。和关系数据库那种可以在执行的过程中进行回滚（rollback）的事务不同，在Redis里面，被MULTI命令和EXEC命令包围的所有命令会一个接一个地执行，直到所有命令都执行完毕为止。当一个事务执行完毕之后，Redis才会处理其他客户端的命令。\n* [Redis 在事务失败时不进行回滚，而是继续执行余下的命令](http://redisdoc.com/topic/transaction.html)\n\n基于此，redis事务会在客户端高并发时，其他客户端命令产生阻塞，而且事务回滚需要应用层自己解决。关于事务无法自动回滚，这在NoSQL领域是常见问题了。\n\n#### redis时间线设计\n接下来对用户在24小时内的积分信息的处理进行改进，以及redis不支持对Set内的单个Element进行有效期设置，我们采用Sorted Set结构，结合Score特性和Quartz来达到元素过期被删除的目的。\n```\ncacheDao的实现\nprivate final static String USER_ACTIVITY_CACHE_KEY=\"a:d\";//全称：\"activity:daily:\"，改善key命名，按业务进行简略，提升网络传输和存储效率。\npublic void setOneUserWithActivityToRedis(int uid){\n    this.jedis.zadd(USER_ACTIVITY_CACHE_KEY,System.currentTimeMillis(),uid+\"\");\n}\n\npublic boolean checkOneUserWithActivityToRedis(int uid){\n    this.jedis.sismember(USER_ACTIVITY_CACHE_KEY,uid+\"\");\n    long score=this.jedis.zscore(USER_ACTIVITY_CACHE_KEY,uid+\"\");\n    if(score>0){\n        return true;\n    }\n    return false;\n}\n\n另外加入一个计划任务，借助Quartz即可。\nString corn=*/1 * * * * ?  //每1秒钟执行1次\npublic void cleanExpireUserWithActivity(){\n    long now=System.currentTimeMillis();\n    long 1MAgo=now-60*1000;//1分钟前的时间\n    long remCount=this.jedis.zremrangeByScore(USER_ACTIVITY_CACHE_KEY,1MAgo,now);\n    log.info(\"成功删除的元素数量是：{}，执行时间是：{}\",remCount,now);\n}\n```\n#### 隐患和思考\n在上文给出的代码中，我们做了一定的容错性，每次删除过去1分钟的所有Element，这样Quartz出现故障时，如果在1分钟内得到fixed，影响的数据只限于1分钟内的Element。每1秒钟触发一次Quartz与删除过去1分钟的所有Element，这2个维度的频率需要权衡。\n\n* 过高频率的访问redis是否会有稳定性问题？\n* 删除Element的时间区间过大，是否会影响redis执行效率(时间复杂度:[O(log(N)+M)](http://redisdoc.com/sorted_set/zrevrangebyscore.html))，导致阻塞？\n* 高频率删除Element，是否会影响redis的RDB与AOF备份，因此造成额外的问题？\n\n借助Quartz还有misfire的隐患，如何保障Quartz在每一秒钟都顺畅执行一次(Once and only once)，这涉及到操作系统、内存的可靠性，这是一个大的命题，我们不过多讨论。\n\n记录一下对这类问题的思考\n\n* 可以对这个计划任务进行多机并行运行。例如：A计划与B计划都处于运行状态，A在奇数秒触发，B在偶数秒触发。进一步降低2秒内misfire的概率。\n* 在Quartz启动Job时，检测到是业务高峰期，另开启一个异步线程，调用cleanExpireUserWithActivity方法，而cleanExpireUserWithActivity需要承受并发，即redis需要对zremrangeByScore命令支持并发，但redis是[单进程单线程模型](http://www.blogjava.net/caojianhua/archive/2013/01/28/394847.html)。\n* 异步线程受制于redis，还可以进行改进，使用队列，如ActiveMQ。调用cleanExpireUserWithActivity逻辑进行调整，将命令序列化后写入到点对点队列，另外使用程序监听队列(即消费者端)，有新命令时取出，这里实际调用cleanExpireUserWithActivity，仅在调用成功后释放命令。\n* 现在问题在于如何保障ActiveMQ的稳定运行了，应该还有改进方案。\n\n按照以上的方案进行重构后，性能得到显著提升，按理论来说稳定性会有提高，因为不具备稳定性测试的条件，没法比较。\n## 遇到了一些问题\n1.redis一次批量hmset过多时报错\nhmset操作时，对于一次传入参数数量上限有要求。这取决于你的网络环境下，socket一次写入的字节数上限。\n```\npublic String hmset(final String key, final Map<String, String> hash);\n```\n在我本机的环境下(应用与redis都在本机，不同端口，redis以默认配置运行)，Map<String, String> hash的size大于5w左右就会报错。\n```\nredis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketException: Software caused connection abort: socket write error\n    at redis.clients.jedis.Protocol.sendCommand(Protocol.java:98)\n    at redis.clients.jedis.Protocol.sendCommand(Protocol.java:78)\n    at redis.clients.jedis.Connection.sendCommand(Connection.java:101)\n    at redis.clients.jedis.BinaryClient.hmset(BinaryClient.java:246)\n    at redis.clients.jedis.Client.hmset(Client.java:171)\n    at redis.clients.jedis.Jedis.hmset(Jedis.java:652)\n```\n在这种情况下，必需要将大Map切分成一块块的Map，循环调用hmset\n```\nfinal static int maxEveryTurn=5000;//定义每次最多批量塞入redis的key数量\n    /**\n     * 批量存储到redis的key数量太多，必需切分成小块存储\n     */\n    private static void setTooManyToJedis(Jedis jedis, Map<String, String> map) {\n        int size=map.size();\n        int pieceNum=size/maxEveryTurn;\n        if(size>(pieceNum*maxEveryTurn)){\n            pieceNum+=1;\n        }\n        Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator();\n        List<Map<String, String>> list=new ArrayList<>(pieceNum);\n        for (int i=0;i<pieceNum;i++){\n            list.add(new HashMap<>(maxEveryTurn));\n        }\n        while (iterator.hasNext()) {\n            Map.Entry<String, String> entry = iterator.next();\n            String key = entry.getKey();\n            int hashCode = Math.abs(String.valueOf(key).hashCode());\n            int index=hashCode % pieceNum;\n            list.get(index).put(key, map.get(key));\n        }\n        map.clear();\n        for (Map<String, String> pieceMap:list){\n            setToJedis(jedis, pieceMap);\n        }\n        list.clear();\n    }\n```\n2.持续写redis时遇到rdb问题\n在完成以上方案的改进后，测试人员的用户登录这个接口在进行性能回归测试时，使用gatling配置250个工作线程进行并发，一共完成50w的用户登录后就算是结束，再根据生成的测试报告分析。\n刚开始每次压到20多w的用户登录时，就会报错，redis连接池无连接了。分析代码是配置了testOnBorrow:true，这个配置会在获取到连接后检查该连接的有效性，如果无效就丢弃，即在连接池删掉一个连接。而此时redis因为问题无法执行用户端的任何命令，所以所有连接都被当做无效连接被丢弃？直到连接池空了。\n```\n在redis命令行执行\nset test 12321\n返回错误：\n(error) MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.\n```\n\n这是因为默认的redis配置是以[RDB的方式](http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22)进行定期存盘，而存盘时，会拒绝所有外部命令的写入(存盘失败后也会拒绝写入)。因为目前在redis的数据都处于可丢，解决方式也相当的粗暴。\n```\n1.保证redis处于运行状态，查询系统6379端口的监听情况\n2.顺序执行以下命令行，遇到错误请终止\ndocker exec -it test_redis_1 /bin/bash\ncd usr/local/bin\n./redis-cli.sh\nconfig set stop-writes-on-bgsave-error no\nconfig set save \"\"\nquit\nexit\n```\n执行完以后，重启应用，再压测，呵呵，bug关闭。\n## 总结\n1.在最后一步提到RDB定期存盘，解决方案存在问题，强行关闭，会导致redis中的数据存在丢失风险，在这里建议有条件的，配置redis为1主1从，Master不进行任何形式的存盘，而Slave配置RDB和AOF方式的存盘，双保险。应用只连接Master即可。。注意Slave与Master第一次进行同步时会使用全量复制，对资源会有比较大的消耗，尽量选择在业务平峰期进行。\n引申阅读，Master在这里成为了单点，为了Master的高可用，还有进一步的方案，1个Master下挂2个Slave，其中1个Slave(称为A)负责2种方式的存盘，另一个Slave(称为B)作为Master的热备，在Master故障后，参与到投票，成为新的Master，而B节点切换到A，接受A的增量同步。注意自动failover时，外部需要关闭写入命令。完成failover后，使用ip映射切换，使应用层重新恢复使用，相应的，应用层需要做到一定的容错性。实际生产中，不会要求应用层去做容错性措施，会有各种中间件(twemproxy)自动处理。\n\n2.以上业务中对[redis的16个数据库](https://www.ttlsa.com/redis/redis-database/)没有使用好，可以按业务将数据存储到不同数据库，隔离影响。\n\n### 常用命令合集\n调试过程中，由于可视化工具对redis支持的不够好，使用了很多redis的命令行，现在我们总结一下吧！\n由于docker的风行，好处多多，我们在测试环境、线上环境也使用了docker/docker-compose\n#### docker\n```\ndocker-compose ps          //查看yml文件中所有容器的运行情况\ndocker-compose up -d xw    //将yml文件中容器名称定义为xw的容器，以后台运行的方式运行起来，如果是tomcat镜像，会调用tomcat的startup.sh.\ndocker-compose stop xw     //将yml文件中容器名称定义为xw的容器停止，如果是tomcat镜像，会调用tomcat的shutdown.sh\ndocker-compose stop        //查看yml文件中所有容器进行停止\ndocker-compose rm xw       //移除xw镜像\ndocker-compose build xw    //对xw进行镜像构建\n```\n#### ./redis-cli.sh/info\n```\nF:\\Redis> ./redis-cli\n127.0.0.1:6379> info\n# Server\nredis_version:3.0.501\nredis_git_sha1:00000000\nredis_git_dirty:0\nredis_build_id:ba05b51e58eb9205\nredis_mode:standalone\nos:Windows\narch_bits:64\nmultiplexing_api:WinSock_IOCP\nprocess_id:1552\nrun_id:d3f2efa1c6cf26c7cf9246c2fcaca89b8e109439\ntcp_port:6379\nuptime_in_seconds:462095\nuptime_in_days:5\nhz:10\nlru_clock:16404129\nconfig_file:F:\\Redis\\redis.windows.conf\n\n# Clients\nconnected_clients:1\nclient_longest_output_list:0\nclient_biggest_input_buf:0\nblocked_clients:0\n\n# Memory\nused_memory:842704\nused_memory_human:822.95K\nused_memory_rss:804920\nused_memory_peak:374731600\nused_memory_peak_human:357.37M\nused_memory_lua:36864\nmem_fragmentation_ratio:0.96\nmem_allocator:jemalloc-3.6.0\n\n# Persistence\nloading:0\nrdb_changes_since_last_save:0\nrdb_bgsave_in_progress:0\nrdb_last_save_time:1459242952\nrdb_last_bgsave_status:ok\nrdb_last_bgsave_time_sec:1\nrdb_current_bgsave_time_sec:-1\naof_enabled:0\naof_rewrite_in_progress:0\naof_rewrite_scheduled:0\naof_last_rewrite_time_sec:-1\naof_current_rewrite_time_sec:-1\naof_last_bgrewrite_status:ok\naof_last_write_status:ok\n\n# Stats\ntotal_connections_received:1010\ntotal_commands_processed:49859\ninstantaneous_ops_per_sec:0\ntotal_net_input_bytes:1822381802\ntotal_net_output_bytes:3650427\ninstantaneous_input_kbps:0.00\ninstantaneous_output_kbps:0.00\nrejected_connections:0\nsync_full:0\nsync_partial_ok:0\nsync_partial_err:0\nexpired_keys:1073\nevicted_keys:0\nkeyspace_hits:20782\nkeyspace_misses:738\npubsub_channels:0\npubsub_patterns:0\nlatest_fork_usec:388023\nmigrate_cached_sockets:0\n\n# Replication\nrole:master\nconnected_slaves:0\nmaster_repl_offset:0\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n\n# CPU\nused_cpu_sys:9.45\nused_cpu_user:38.25\nused_cpu_sys_children:0.00\nused_cpu_user_children:0.00\n\n# Cluster\ncluster_enabled:0\n\n# Keyspace\ndb0:keys=1,expires=0,avg_ttl=0\n```\n#### set/get\n```\n127.0.0.1:6379> set test 123456\nOK\n127.0.0.1:6379> get test\n\"123456\"\n```\n#### hset/hmset/hget/hmget\n```\n127.0.0.1:6379> hset testHash key1 value11\n(integer) 1\n127.0.0.1:6379> hget testHash\n(error) ERR wrong number of arguments for 'hget' command\n127.0.0.1:6379> hget testHash key1\n\"value11\"\n127.0.0.1:6379>\n\n127.0.0.1:6379> hset testHash key1 value11 key2 value22\n(error) ERR wrong number of arguments for 'hset' command\n127.0.0.1:6379> hmset testHash key1 value11 key2 value22\nOK\n127.0.0.1:6379> hmget testHash key1 key2\n1) \"value11\"\n2) \"value22\"\n```\n#### hlen/keys\n```\n127.0.0.1:6379> len test\n(error) ERR unknown command 'len'\n127.0.0.1:6379> hlen testHash\n(integer) 2\n127.0.0.1:6379> keys test\n1) \"test\"\n127.0.0.1:6379> keys testHash\n1) \"testHash\"\n127.0.0.1:6379> keys *\n1) \"testHash\"\n2) \"test\"\n3) \"message-queue-sms\"\n```\n#### config set/get\n```\n127.0.0.1:6379> config get *\n  1) \"dbfilename\"\n  2) \"dump.rdb\"\n  3) \"requirepass\"\n  4) \"\"\n  5) \"masterauth\"\n  6) \"\"\n  7) \"unixsocket\"\n  8) \"\"\n  9) \"logfile\"\n 10) \"\"\n 11) \"pidfile\"\n 12) \"/var/run/redis.pid\"\n 13) \"maxmemory\"\n 14) \"512000000\"\n 15) \"maxmemory-samples\"\n 16) \"5\"\n 17) \"timeout\"\n 18) \"0\"\n 19) \"tcp-keepalive\"\n 20) \"0\"\n 21) \"auto-aof-rewrite-percentage\"\n 22) \"100\"\n 23) \"auto-aof-rewrite-min-size\"\n 24) \"67108864\"\n 25) \"hash-max-ziplist-entries\"\n 26) \"512\"\n 27) \"hash-max-ziplist-value\"\n 28) \"64\"\n 29) \"list-max-ziplist-entries\"\n 30) \"512\"\n 31) \"list-max-ziplist-value\"\n 32) \"64\"\n 33) \"set-max-intset-entries\"\n 34) \"512\"\n 35) \"zset-max-ziplist-entries\"\n 36) \"128\"\n 37) \"zset-max-ziplist-value\"\n 38) \"64\"\n 39) \"hll-sparse-max-bytes\"\n 40) \"3000\"\n 41) \"lua-time-limit\"\n 42) \"5000\"\n 43) \"slowlog-log-slower-than\"\n 44) \"10000\"\n 45) \"latency-monitor-threshold\"\n 46) \"0\"\n 47) \"slowlog-max-len\"\n 48) \"128\"\n 49) \"port\"\n 50) \"6379\"\n 51) \"tcp-backlog\"\n 52) \"511\"\n 53) \"databases\"\n 54) \"16\"\n 55) \"repl-ping-slave-period\"\n 56) \"10\"\n 57) \"repl-timeout\"\n 58) \"60\"\n 59) \"repl-backlog-size\"\n 60) \"1048576\"\n 61) \"repl-backlog-ttl\"\n 62) \"3600\"\n 63) \"maxclients\"\n 64) \"10000\"\n 65) \"watchdog-period\"\n 66) \"0\"\n 67) \"slave-priority\"\n 68) \"100\"\n 69) \"min-slaves-to-write\"\n 70) \"0\"\n 71) \"min-slaves-max-lag\"\n 72) \"10\"\n 73) \"hz\"\n 74) \"10\"\n 75) \"cluster-node-timeout\"\n 76) \"15000\"\n 77) \"cluster-migration-barrier\"\n 78) \"1\"\n 79) \"cluster-slave-validity-factor\"\n 80) \"10\"\n 81) \"repl-diskless-sync-delay\"\n 82) \"5\"\n 83) \"cluster-require-full-coverage\"\n 84) \"yes\"\n 85) \"no-appendfsync-on-rewrite\"\n 86) \"no\"\n 87) \"slave-serve-stale-data\"\n 88) \"yes\"\n 89) \"slave-read-only\"\n 90) \"yes\"\n 91) \"stop-writes-on-bgsave-error\"\n 92) \"yes\"\n 93) \"daemonize\"\n 94) \"no\"\n 95) \"rdbcompression\"\n 96) \"yes\"\n 97) \"rdbchecksum\"\n 98) \"yes\"\n 99) \"activerehashing\"\n100) \"yes\"\n101) \"repl-disable-tcp-nodelay\"\n102) \"no\"\n103) \"repl-diskless-sync\"\n104) \"no\"\n105) \"aof-rewrite-incremental-fsync\"\n106) \"yes\"\n107) \"aof-load-truncated\"\n108) \"yes\"\n109) \"appendonly\"\n110) \"no\"\n111) \"dir\"\n112) \"F:\\\\Redis\"\n113) \"maxmemory-policy\"\n114) \"noeviction\"\n115) \"appendfsync\"\n116) \"everysec\"\n117) \"save\"\n118) \"jd 900 jd 300 jd 60\"\n119) \"loglevel\"\n120) \"verbose\"\n121) \"client-output-buffer-limit\"\n122) \"normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60\"\n123) \"unixsocketperm\"\n124) \"0\"\n125) \"slaveof\"\n126) \"\"\n127) \"notify-keyspace-events\"\n128) \"\"\n129) \"bind\"\n130) \"\"\n127.0.0.1:6379> config set save \"\"\nOK\n```\n#### flushdb/flushall\n```\n127.0.0.1:6379> flushdb\nOK\n127.0.0.1:6379> flushall\nOK\n```\n\n## 扩展阅读\n* redis删除有序集合部分过期元素：[http://caozm.blog.51cto.com/1118764/1389168](http://caozm.blog.51cto.com/1118764/1389168)\n* 节约内存：Instagram的Redis实践：[http://blog.nosqlfan.com/html/3379.html](http://blog.nosqlfan.com/html/3379.html)\n* redis持久化机制：[http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22](http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22)\n* Redis事务的分析及改进：[https://segmentfault.com/a/1190000002594059](https://segmentfault.com/a/1190000002594059)\n* redis 多数据库：[https://www.ttlsa.com/redis/redis-database/](https://www.ttlsa.com/redis/redis-database/)\n* 利用Sorted Set数据结构，为元素设置有效期：[http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set](http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set)\n* redis的Slave选举与优先级：[https://segmentfault.com/a/1190000002685515](https://segmentfault.com/a/1190000002685515)\n* 利用代理中间件实现大规模Redis集群：[http://www.imooc.com/article/4343](http://www.imooc.com/article/4343)","slug":"A-successful-redis-tuning-record","published":1,"updated":"2016-04-02T10:51:14.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimrk7x9e0008acnngf3uikg4","content":"<h2 id=\"我们怎么使用Redis？\"><a href=\"#我们怎么使用Redis？\" class=\"headerlink\" title=\"我们怎么使用Redis？\"></a>我们怎么使用Redis？</h2><p>公司目前主力开发的产品，是一个典型的平台电商型产品，包含了平台运营方、商家、消费者等角色。</p>\n<p>公司提供电商平台，同时负责系统维护和系统保障；商家与公司进行签约后，入驻平台，将商品投放到平台进行展示；平台依据商家签约信息，进行商品与消费者之间的兴趣推荐，消费者通过商品与商家达成消费订单后，平台按单依据签约与商家抽取利润。商家发现日订单分析有了提升后，可能会与平台达成更多的合作。从而演变出了良好的商业发展模式。</p>\n<p>平台电商型产品中，非常满足80/20法则(又称为:<a href=\"https://zh.wikipedia.org/wiki/%E5%B8%95%E9%9B%B7%E6%89%98%E6%B3%95%E5%88%99\" target=\"_blank\" rel=\"external\">帕雷托法则</a>),查询的业务量远远多于写入的业务量，为了提高<a href=\"http://www.ha97.com/5095.html\" target=\"_blank\" rel=\"external\">TPS</a>，降低对数据库的访问。我们也采取常规的做法，选用redis进行缓存常用业务数据。其中典型的就有：1.图片的信息、2.登录后的用户信息、3.全局超时锁、4.验证码。</p>\n<p>关于redis的技术选型，其实在我参与产品开发之前就已经完成了，在这个产品里也作为缓存层在使用。产品目前还在雏形孵化阶段，没有考虑太多关于分布式以及高可用的方案，对redis的使用很粗糙，在团队内可能熟悉redis的Developer不多，或者说有空又有耐心还熟悉redis的Developer没有吧？后来与PM的沟通后得知确实如此！</p>\n<h3 id=\"缓存图片信息\"><a href=\"#缓存图片信息\" class=\"headerlink\" title=\"缓存图片信息\"></a>缓存图片信息</h3><p>目前有很多业务在使用该缓存：商品的图片编辑，商家店面形象的图文自我介绍，用户针对订单的图文评价.</p>\n<p>这一部分的数据，在产品启动时(没有黑科技，就是在web.xml，自定义listener。)，读取Mysql中的File表，load进redis，数据量约120W条，没有做任何的分库分表处理。</p>\n<p>File表的结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `file` (</span><br><span class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;图片ID&apos;,</span><br><span class=\"line\">  `uid` int(11) DEFAULT NULL COMMENT &apos;上传用户Id&apos;,</span><br><span class=\"line\">  `crc32` char(8) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &apos;crc32校验和&apos;,</span><br><span class=\"line\">  `url` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT &apos;&apos; COMMENT &apos;对外访问的URL&apos;,</span><br><span class=\"line\">  `path` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT &apos;&apos; COMMENT &apos;存储的相对路径&apos;,</span><br><span class=\"line\">  `filename` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &apos;&apos; COMMENT &apos;文件名字&apos;,</span><br><span class=\"line\">  `size` int(11) DEFAULT NULL COMMENT &apos;图片大小(单位byte)&apos;,</span><br><span class=\"line\">  `ext` char(5) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &apos;&apos; COMMENT &apos;图片后缀&apos;,</span><br><span class=\"line\">  `is_image` tinyint(4) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;是否是图片，0为不是，1为是&apos;,</span><br><span class=\"line\">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class=\"line\">  `storage_type` tinyint(4) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;图片存储介质，0为fileSystem，1阿里云,2表示ppw老数据&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  UNIQUE KEY `filename` (`filename`) USING BTREE</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=1146617 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&apos;文件信息表&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>有意思的是，每次产品启动时，读取到的所有File表记录，进行for循环，每一次循环中，访问一次redis。而在产品关闭时，删除redis的key，从而清除缓存？如果数据量愈来愈多，不就像做过山车一样，启动时加载全量数据，使用量飚的很高，关闭时删除全量缓存，使用量逐渐落回低谷(redis有<a href=\"http://wangneng-168.iteye.com/blog/2100379\" target=\"_blank\" rel=\"external\">内存释放机制</a>)。对于内存型中间件产品，这样的使用会带来很多的不可靠性。</p>\n<p>启动时加载数据到redis时的处理过程,部分为伪码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File表对应的实体类：</span><br><span class=\"line\">public class File&#123;//与数据库字段名完全的一致</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private int uid;</span><br><span class=\"line\">    private String crc32;</span><br><span class=\"line\">    private String url;</span><br><span class=\"line\">    private String path;</span><br><span class=\"line\">    private String filename;</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\">    private String ext;</span><br><span class=\"line\">    private int is_image;</span><br><span class=\"line\">    private Timestamp create_time;</span><br><span class=\"line\">    private int storage_type;</span><br><span class=\"line\"></span><br><span class=\"line\">    //忽略 getter\\setter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//调用Dao层访问Mysql数据库，取回File表的所有记录，每条记录包含所有字段。</span><br><span class=\"line\">List&lt;File&gt; files=this.fileDao.getAll();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//读取File表的SQL：SELECT * FROM FILE;</span><br><span class=\"line\"></span><br><span class=\"line\">for(int i=0;i&lt;files.size();i++)&#123;</span><br><span class=\"line\">    this.cacheDao.setOneFileToRedis(files.get(i).getId(),files.get(i).getUrl());//调用Dao层访问Redis，将数据存入redis</span><br><span class=\"line\">    //WTF?只需要2个字段，然而取回了所有字段？而且不能批量存入redis?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cacheDao的实现</span><br><span class=\"line\">private final static String PHOTO_CACHE_KEY=&quot;photos&quot;;</span><br><span class=\"line\">public void setOneFileToRedis(int id,String url)&#123;</span><br><span class=\"line\">    this.jedis.hset(PHOTO_CACHE_KEY, id.toString(), url);//1.使用[Hash数据结构](https://redis.readthedocs.org/en/2.4/hash.html)。2.没有设置key有效期，即永久有效。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public String getOneFileInRedis(int id)&#123;</span><br><span class=\"line\">    return this.jedis.hget(PHOTO_CACHE_KEY, id.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样图片信息缓存的结构看起来是这样:<br><img src=\"/img/photos在redis的数据结构示例.png\" alt=\"photos在redis的数据结构示例\"><br>实际的情况下，size远大于1000，上文说了约在120w左右，我的这个redis可视化工具(redisclient-win32.x86.2.0)无法获取size这样大的key，报SocketTimeOutException。猜测是向redis获取大key时，无法在一个socket包中写入，造成通讯失败。</p>\n<p>以上cacheDao的实现中，没有提供一次批量获取所需的多个图片信息，例如“public Map<integer,string> getBatchFileInRedis(int[] ids)”，甚至在cache interface中都没有提供这样的接口定义。</integer,string></p>\n<p>这样导致在上层逻辑中，出现大量一次性代码。因为调用不集中，给重构带来很大麻烦。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是分页获取商品列表的伪代码实现</span><br><span class=\"line\"></span><br><span class=\"line\">与数据库product表对应的实体类</span><br><span class=\"line\">public class Product&#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private long price;</span><br><span class=\"line\">    private int photoId;</span><br><span class=\"line\"></span><br><span class=\"line\">    //忽略 getter\\setter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">真实的返回到app端的对象</span><br><span class=\"line\">public class ProductFull&#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private long price;</span><br><span class=\"line\">    private int photoId;</span><br><span class=\"line\">    private String photoUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    //忽略 getter\\setter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public List&lt;ProductFull&gt; findProductByPage(int pageSize,int pageNo)&#123;</span><br><span class=\"line\">    List&lt;Product&gt; products=this.productDao.findByPage(int pageSize,int pageNo);//调用Dao层访问Mysql</span><br><span class=\"line\">    List&lt;ProductFull&gt; results=new ArrayList&lt;&gt;(products.size());</span><br><span class=\"line\">    for(Product product:products)&#123;</span><br><span class=\"line\">        ProductFull pf=new ProductFull();</span><br><span class=\"line\">        pf.setId(product.getId());//其他的属性值都是类似的拷贝，或借助Apache-Common beanUtils组件进行拷贝。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        String url=this.cacheDao.getOneFileInRedis(product.getPhotoId());//每一个循环项都访问了redis</span><br><span class=\"line\">        pf.setPhotoUrl(url);</span><br><span class=\"line\">        results.add(pf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return results;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">如果每个商品分页是10条，最坏情况下，需要访问1次Mysql+访问10次redis。非常严重的是，每个分页条数的大小由app端决定，服务端不限制，WTF?</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"缓存登录后的用户信息\"><a href=\"#缓存登录后的用户信息\" class=\"headerlink\" title=\"缓存登录后的用户信息\"></a>缓存登录后的用户信息</h3><p>在这个产品面向消费者以及商家，都推出了不同的APP。互联网APP为了提高用户体验，以及降低用户登录登出频次(用户的登录/登出操作，对服务器是比较大的开销)，都会对一次登陆成功的用户，默认在一段时间不需要再次登录。即服务器分配Token给APP本地保存，同时服务器保存Token，设置该Token在一段时间不活动后自动失效，APP后续与服务器的通信中，都需要提交该Token鉴权。这是很常规的做法，短时间有效，而且是非关键性小数据，一次写入多次读取，对于服务器来说，没有比memcached或redis更合适的选择了，那为什么没有选择memcached？我个人的猜测是memcached更适合做Object Store Server，而且很重要的redis具有丰富数据结构与<a href=\"http://www.cnblogs.com/EE-NovRain/p/3268476.html\" target=\"_blank\" rel=\"external\">扩容与容灾机制</a>。</p>\n<p>用户的第一次登录，服务端进行参数解析，鉴权后，就需要写入2次redis。<br>用户的登出接口中，直接是删除当前会话的redis记录。</p>\n<p>第一次：写入本次登入的Token与用户信息的关联<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录成功后，从DB或Cache层获取用户数据，构造用户数据JSON</span><br><span class=\"line\">String userLoginSuccessInfo=&quot;&#123;&quot;uid&quot;:12321,&quot;name&quot;:&quot;张三&quot;,&quot;sex&quot;:0,&quot;avatar_id&quot;:345643&#125;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">cacheDao的实现</span><br><span class=\"line\">private final static String SESSION_CACHE_KEY=&quot;session:&quot;;</span><br><span class=\"line\">//登录成功</span><br><span class=\"line\">public void setOneLoginSuccessToRedis(String token,String userLoginSuccessInfo)&#123;</span><br><span class=\"line\">    this.jedis.setex(SESSION_CACHE_KEY+token, 30*24*60*60, userLoginSuccessInfo);//1.使用String数据结构。2.设置key有效期30天。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//鉴权</span><br><span class=\"line\">public String getOneLoginSuccessInRedis(String token)&#123;</span><br><span class=\"line\">    return this.jedis.get(SESSION_CACHE_KEY+token);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//登出</span><br><span class=\"line\">public void logoutSuccessInRedis(String token)&#123;</span><br><span class=\"line\">    this.jedis.del(SESSION_CACHE_KEY+token);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">这个以&quot;session:&quot;开头的key里，并没有实现从uid如何获取token值？</span><br><span class=\"line\">这会引发的问题：一个用户的多次登录，会生成多个以&quot;session:&quot;开头的key，没有覆盖之前登录的token。造成内存空间的浪费，以及不安全。正确的做法在下文会提到。</span><br></pre></td></tr></table></figure></p>\n<p>第二次：写入本次登入的用户id与24小时内的积分获取信息。</p>\n<p>有一个需求定义用户在登录后可以获取积分，但在24小时内的登录只算一次。</p>\n<p>那在服务器端的是实现是，用户第一次登录成功后，在redis写入一个与该用户相关的key，并设置24小时后失效，然后再增加积分。用户在24小时内进行第二次登录，先读取redis是否有相关的key，使用exist命令，如果已经有了，就不增加积分了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录成功后，从DB或Cache层获取用户数据，构造用户与积分业务数据JSON</span><br><span class=\"line\">int uid=158263;</span><br><span class=\"line\"></span><br><span class=\"line\">cacheDao的实现</span><br><span class=\"line\">private final static String USER_ACTIVITY_CACHE_KEY=&quot;daily_activity_&quot;;</span><br><span class=\"line\">public void setOneUserWithActivityToRedis(int uid)&#123;</span><br><span class=\"line\">    this.jedis.setex(USER_ACTIVITY_CACHE_KEY+uid, 24*60*60, &quot;&quot;);//1.使用String数据结构。2.设置key有效期24h。3.value部分为空字符串？</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean checkOneUserWithActivityToRedis(int uid)&#123;</span><br><span class=\"line\">    this.jedis.exists(USER_ACTIVITY_CACHE_KEY+uid);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这部分的业务属于典型案例，浪费内存空间。<br>第一个问题，不应该使用长前缀，每个key都需要set进内存，长前缀意味着空间占用，以及效率低下。<br>第二个问题，这不是明显可以使用<a href=\"https://redis.readthedocs.org/en/2.4/sorted_set.html\" target=\"_blank\" rel=\"external\">Sorted Set数据结构</a>?，还可以省掉一次exists检查。</p>\n<p>虽然redis的TPS很高，但是我们依旧要避免滥用。</p>\n<h2 id=\"这次的问题的描述？\"><a href=\"#这次的问题的描述？\" class=\"headerlink\" title=\"这次的问题的描述？\"></a>这次的问题的描述？</h2><p>测试MM提出在性能测试环境中，有一些API在并发数到250~300时，出现很多报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis的相关错误</span><br><span class=\"line\">Could not get a resource from the pool</span><br></pre></td></tr></table></figure></p>\n<p>典型报错的接口有</p>\n<ul>\n<li>分页获取商品列表</li>\n<li>用户登录</li>\n</ul>\n<p>应用中配置redis连接池上限值是1000，而在redis server端配置maxClients=10000;区区这点并发，就耗尽redis连接池资源了？绝不可能，问题还在更远的地方等着我.</p>\n<p>性能测试环境配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">硬件配置</span><br><span class=\"line\">操作系统    Linux Ubuntu 14.04.4 LTS</span><br><span class=\"line\">CPU个数   4</span><br><span class=\"line\">CPU时钟频率 2.6G</span><br><span class=\"line\">内存  4G</span><br><span class=\"line\">有无外部存储  云端存储</span><br><span class=\"line\"></span><br><span class=\"line\">软件配置</span><br><span class=\"line\">docker  1.9.1</span><br><span class=\"line\">mysql   5.6</span><br><span class=\"line\">jdk 1.8.0_72</span><br><span class=\"line\">solr    5.3.0</span><br><span class=\"line\">redis   3.0.5</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如何一步步的解决问题？\"><a href=\"#如何一步步的解决问题？\" class=\"headerlink\" title=\"如何一步步的解决问题？\"></a>如何一步步的解决问题？</h2><p>在描述问题产生背景时，其实也提到了很多不合理的地方，但<em>存在即合理</em>，处在现在的困境，一定有当时的无奈。现在我们一起来总结一下问题所在。</p>\n<h3 id=\"对缓存图片的处理存在的问题\"><a href=\"#对缓存图片的处理存在的问题\" class=\"headerlink\" title=\"对缓存图片的处理存在的问题\"></a>对缓存图片的处理存在的问题</h3><ul>\n<li>产品初始化时全量塞入redis/产品停止运行是全量卸掉</li>\n<li>产品初始化时塞入redis时，没有做批量操作</li>\n<li>对批量获取图片信息不支持，在接口层面就已经没有定义，对于可预见的需求没有进行考虑，这是架构设计的缺陷。</li>\n<li>引申：大量的数据，放在一个key里，会出现问题，需要进行水平切分(Sharding)。</li>\n</ul>\n<h4 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h4><p>1.图片的Id数据在File表采用了<em>自增长</em>的方式生成，不会出现重复，并且有顺序。我们可以利用这一点，在产品初始化时，在Mysql数据库File表只查找2个字段：id/url。程序处理时，先写入reids一个key，使用Hash数据结构，isInitIng:photos-true，标明到正在初始化，其他产品节点不需要重复初始化。使用hmset的方式，一次性将多个键值对存入到redis。完成后，修改isInitIng:photos-false。当有了新图片时，先在Mysql数据库File表进行保存，得到这个图片的Id以及url，使用hset加入该图片到redis。如果需要修改某一张图片的url，也可以用hset。这样在产品停止运行时，是不需要删除redis关于图片的数据的。</p>\n<p>2.cache层加入新接口，支持批量获取图片信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final static String PHOTO_CACHE_KEY=&quot;photos&quot;;</span><br><span class=\"line\">public void setFileToRedis(Map&lt;Integer,String&gt; photos)&#123;</span><br><span class=\"line\">    this.jedis.hmset(PHOTO_CACHE_KEY, photos);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Map&lt;Integer,String&gt; getBatchFileInRedis(int[] ids)&#123;</span><br><span class=\"line\">    return this.jedis.hmget(PHOTO_CACHE_KEY, coverArrayToString(ids));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static String[] coverArrayToString(int[] ids)&#123;</span><br><span class=\"line\">    String[] results=new String[ids.length];</span><br><span class=\"line\">    for (int i = 0; i &lt; ids.length; i++) &#123;</span><br><span class=\"line\">        results[i]=ids[i]+&quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对之前循环调用的上层代码进行修改，改为调用批量获取接口。</p>\n<p>3.对于单个key承载大量的数据的情况，方案是对key下的values hash key进行分割，使用一定的算法将块状的数据均匀分布在多个key里。给一个<a href=\"http://blog.nosqlfan.com/html/3379.html\" target=\"_blank\" rel=\"external\">参考链接</a>。</p>\n<h3 id=\"对缓存用户登录的处理存在的问题\"><a href=\"#对缓存用户登录的处理存在的问题\" class=\"headerlink\" title=\"对缓存用户登录的处理存在的问题\"></a>对缓存用户登录的处理存在的问题</h3><ul>\n<li>session的存储不合理，每次登陆都会生成一个新的key值</li>\n<li>对USER_ACTIVITY_CACHE_KEY在value部分的数据结构不合理，应采用Sorted Set</li>\n<li>对USER_ACTIVITY_CACHE_KEY的命名不合适，过长导致空间浪费和效率低下</li>\n<li>因采用错误数据结构，USER_ACTIVITY_CACHE_KEY需要进行多一次的exists判断。</li>\n</ul>\n<h4 id=\"方案-1\"><a href=\"#方案-1\" class=\"headerlink\" title=\"方案\"></a>方案</h4><p>session的存储不合理的解决，通过新的key(uid:token)来反向标记uid与token的关系，2个key的超时时间保持一致，例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uid:158742-token001</span><br></pre></td></tr></table></figure></p>\n<p>在写入SESSION_CACHE_KEY时，同时写入到redis，为保证2次写入的原子性，需要使用<a href=\"https://redis.readthedocs.org/en/2.4/transaction.html\" target=\"_blank\" rel=\"external\">redis的事务</a>。如果支持用户的多设备在线，只需要将key(uid:token)更改为Sorted Set结构。因为不存在资源的争夺，这个事务几乎不会失败。在用户登出时，删除掉当前会话信息以及用户关联的会话信息(同样是使用redis事务)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cacheDao的实现</span><br><span class=\"line\">private final static String SESSION_CACHE_KEY=&quot;se:&quot;;//全称：&quot;session:&quot;，改善key命名，按业务进行简略，提升网络传输和存储效率。</span><br><span class=\"line\">private final static String USER_TOKEN_CACHE_KEY=&quot;u:t:&quot;;//uid:token:</span><br><span class=\"line\">//登录成功，保存用户登录Token。接收建议的token参数值，返回实际保存的token值。</span><br><span class=\"line\">public String setOneLoginSuccessToRedis(int uid,String token,String userLoginSuccessInfo)&#123;//重构</span><br><span class=\"line\">    if(checkOneUserTokenExists(uid))&#123;</span><br><span class=\"line\">        token=getOneUserToken(uid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    long expireTime=30*24*60*60;//设置key有效期30天。</span><br><span class=\"line\">    String ret=this.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);//乐观锁，重试，在这里几乎不存在</span><br><span class=\"line\">    if(ret==null||!ret.equals(&quot;OK&quot;))&#123;</span><br><span class=\"line\">        log.error(&quot;redis watch 操作失败.ret:&#123;&#125;&quot;,ret);</span><br><span class=\"line\">        this.jedis.unwatch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Transaction tx = this.jedis.multi();</span><br><span class=\"line\">    tx.setex(SESSION_CACHE_KEY+token, expireTime, userLoginSuccessInfo);</span><br><span class=\"line\">    tx.setex(USER_TOKEN_CACHE_KEY+uid, expireTime, token);</span><br><span class=\"line\">    List&lt;Object&gt; results = tx.exec();</span><br><span class=\"line\">    return token;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//检查用户登录Token是否已经存在</span><br><span class=\"line\">public boolean checkOneUserTokenExists(int uid)&#123;//新方法</span><br><span class=\"line\">    return this.jedis.exists(USER_TOKEN_CACHE_KEY+uid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取用户登录Token信息</span><br><span class=\"line\">public String getOneUserToken(int uid)&#123;//新方法</span><br><span class=\"line\">    return this.jedis.get(USER_TOKEN_CACHE_KEY+uid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//鉴权</span><br><span class=\"line\">public String getOneLoginSuccessInRedis(String token)&#123;//不改动</span><br><span class=\"line\">    return this.jedis.get(SESSION_CACHE_KEY+token);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//登出</span><br><span class=\"line\">public void logoutSuccessInRedis(String token)&#123;</span><br><span class=\"line\">    String ret=this.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);//乐观锁，重试，在这里几乎不存在</span><br><span class=\"line\">    if(ret==null||!ret.equals(&quot;OK&quot;))&#123;</span><br><span class=\"line\">        log.error(&quot;redis watch 操作失败.ret:&#123;&#125;&quot;,ret);</span><br><span class=\"line\">        this.jedis.unwatch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Transaction tx = this.jedis.multi();</span><br><span class=\"line\">    tx.del(SESSION_CACHE_KEY+token);</span><br><span class=\"line\">    tx.del(USER_TOKEN_CACHE_KEY+uid);</span><br><span class=\"line\">    List&lt;Object&gt; results = tx.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"隐患和思考\"><a href=\"#隐患和思考\" class=\"headerlink\" title=\"隐患和思考\"></a>隐患和思考</h4><p>redis事务带来的问题，redis的事务设计比较暴力，这给应用层带来了麻烦。</p>\n<ul>\n<li>Redis的基本事务（basic transaction）需要用到MULTI命令和EXEC命令，这种事务可以让一个客户端在不被其他客户端打断的情况下执行多个命令。和关系数据库那种可以在执行的过程中进行回滚（rollback）的事务不同，在Redis里面，被MULTI命令和EXEC命令包围的所有命令会一个接一个地执行，直到所有命令都执行完毕为止。当一个事务执行完毕之后，Redis才会处理其他客户端的命令。</li>\n<li><a href=\"http://redisdoc.com/topic/transaction.html\" target=\"_blank\" rel=\"external\">Redis 在事务失败时不进行回滚，而是继续执行余下的命令</a></li>\n</ul>\n<p>基于此，redis事务会在客户端高并发时，其他客户端命令产生阻塞，而且事务回滚需要应用层自己解决。关于事务无法自动回滚，这在NoSQL领域是常见问题了。</p>\n<h4 id=\"redis时间线设计\"><a href=\"#redis时间线设计\" class=\"headerlink\" title=\"redis时间线设计\"></a>redis时间线设计</h4><p>接下来对用户在24小时内的积分信息的处理进行改进，以及redis不支持对Set内的单个Element进行有效期设置，我们采用Sorted Set结构，结合Score特性和Quartz来达到元素过期被删除的目的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cacheDao的实现</span><br><span class=\"line\">private final static String USER_ACTIVITY_CACHE_KEY=&quot;a:d&quot;;//全称：&quot;activity:daily:&quot;，改善key命名，按业务进行简略，提升网络传输和存储效率。</span><br><span class=\"line\">public void setOneUserWithActivityToRedis(int uid)&#123;</span><br><span class=\"line\">    this.jedis.zadd(USER_ACTIVITY_CACHE_KEY,System.currentTimeMillis(),uid+&quot;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean checkOneUserWithActivityToRedis(int uid)&#123;</span><br><span class=\"line\">    this.jedis.sismember(USER_ACTIVITY_CACHE_KEY,uid+&quot;&quot;);</span><br><span class=\"line\">    long score=this.jedis.zscore(USER_ACTIVITY_CACHE_KEY,uid+&quot;&quot;);</span><br><span class=\"line\">    if(score&gt;0)&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">另外加入一个计划任务，借助Quartz即可。</span><br><span class=\"line\">String corn=*/1 * * * * ?  //每1秒钟执行1次</span><br><span class=\"line\">public void cleanExpireUserWithActivity()&#123;</span><br><span class=\"line\">    long now=System.currentTimeMillis();</span><br><span class=\"line\">    long 1MAgo=now-60*1000;//1分钟前的时间</span><br><span class=\"line\">    long remCount=this.jedis.zremrangeByScore(USER_ACTIVITY_CACHE_KEY,1MAgo,now);</span><br><span class=\"line\">    log.info(&quot;成功删除的元素数量是：&#123;&#125;，执行时间是：&#123;&#125;&quot;,remCount,now);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"隐患和思考-1\"><a href=\"#隐患和思考-1\" class=\"headerlink\" title=\"隐患和思考\"></a>隐患和思考</h4><p>在上文给出的代码中，我们做了一定的容错性，每次删除过去1分钟的所有Element，这样Quartz出现故障时，如果在1分钟内得到fixed，影响的数据只限于1分钟内的Element。每1秒钟触发一次Quartz与删除过去1分钟的所有Element，这2个维度的频率需要权衡。</p>\n<ul>\n<li>过高频率的访问redis是否会有稳定性问题？</li>\n<li>删除Element的时间区间过大，是否会影响redis执行效率(时间复杂度:<a href=\"http://redisdoc.com/sorted_set/zrevrangebyscore.html\" target=\"_blank\" rel=\"external\">O(log(N)+M)</a>)，导致阻塞？</li>\n<li>高频率删除Element，是否会影响redis的RDB与AOF备份，因此造成额外的问题？</li>\n</ul>\n<p>借助Quartz还有misfire的隐患，如何保障Quartz在每一秒钟都顺畅执行一次(Once and only once)，这涉及到操作系统、内存的可靠性，这是一个大的命题，我们不过多讨论。</p>\n<p>记录一下对这类问题的思考</p>\n<ul>\n<li>可以对这个计划任务进行多机并行运行。例如：A计划与B计划都处于运行状态，A在奇数秒触发，B在偶数秒触发。进一步降低2秒内misfire的概率。</li>\n<li>在Quartz启动Job时，检测到是业务高峰期，另开启一个异步线程，调用cleanExpireUserWithActivity方法，而cleanExpireUserWithActivity需要承受并发，即redis需要对zremrangeByScore命令支持并发，但redis是<a href=\"http://www.blogjava.net/caojianhua/archive/2013/01/28/394847.html\" target=\"_blank\" rel=\"external\">单进程单线程模型</a>。</li>\n<li>异步线程受制于redis，还可以进行改进，使用队列，如ActiveMQ。调用cleanExpireUserWithActivity逻辑进行调整，将命令序列化后写入到点对点队列，另外使用程序监听队列(即消费者端)，有新命令时取出，这里实际调用cleanExpireUserWithActivity，仅在调用成功后释放命令。</li>\n<li>现在问题在于如何保障ActiveMQ的稳定运行了，应该还有改进方案。</li>\n</ul>\n<p>按照以上的方案进行重构后，性能得到显著提升，按理论来说稳定性会有提高，因为不具备稳定性测试的条件，没法比较。</p>\n<h2 id=\"遇到了一些问题\"><a href=\"#遇到了一些问题\" class=\"headerlink\" title=\"遇到了一些问题\"></a>遇到了一些问题</h2><p>1.redis一次批量hmset过多时报错<br>hmset操作时，对于一次传入参数数量上限有要求。这取决于你的网络环境下，socket一次写入的字节数上限。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String hmset(final String key, final Map&lt;String, String&gt; hash);</span><br></pre></td></tr></table></figure></p>\n<p>在我本机的环境下(应用与redis都在本机，不同端口，redis以默认配置运行)，Map<string, string=\"\"> hash的size大于5w左右就会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketException: Software caused connection abort: socket write error</span><br><span class=\"line\">    at redis.clients.jedis.Protocol.sendCommand(Protocol.java:98)</span><br><span class=\"line\">    at redis.clients.jedis.Protocol.sendCommand(Protocol.java:78)</span><br><span class=\"line\">    at redis.clients.jedis.Connection.sendCommand(Connection.java:101)</span><br><span class=\"line\">    at redis.clients.jedis.BinaryClient.hmset(BinaryClient.java:246)</span><br><span class=\"line\">    at redis.clients.jedis.Client.hmset(Client.java:171)</span><br><span class=\"line\">    at redis.clients.jedis.Jedis.hmset(Jedis.java:652)</span><br></pre></td></tr></table></figure></string,></p>\n<p>在这种情况下，必需要将大Map切分成一块块的Map，循环调用hmset<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final static int maxEveryTurn=5000;//定义每次最多批量塞入redis的key数量</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 批量存储到redis的key数量太多，必需切分成小块存储</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void setTooManyToJedis(Jedis jedis, Map&lt;String, String&gt; map) &#123;</span><br><span class=\"line\">        int size=map.size();</span><br><span class=\"line\">        int pieceNum=size/maxEveryTurn;</span><br><span class=\"line\">        if(size&gt;(pieceNum*maxEveryTurn))&#123;</span><br><span class=\"line\">            pieceNum+=1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; list=new ArrayList&lt;&gt;(pieceNum);</span><br><span class=\"line\">        for (int i=0;i&lt;pieceNum;i++)&#123;</span><br><span class=\"line\">            list.add(new HashMap&lt;&gt;(maxEveryTurn));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while (iterator.hasNext()) &#123;</span><br><span class=\"line\">            Map.Entry&lt;String, String&gt; entry = iterator.next();</span><br><span class=\"line\">            String key = entry.getKey();</span><br><span class=\"line\">            int hashCode = Math.abs(String.valueOf(key).hashCode());</span><br><span class=\"line\">            int index=hashCode % pieceNum;</span><br><span class=\"line\">            list.get(index).put(key, map.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.clear();</span><br><span class=\"line\">        for (Map&lt;String, String&gt; pieceMap:list)&#123;</span><br><span class=\"line\">            setToJedis(jedis, pieceMap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.clear();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.持续写redis时遇到rdb问题<br>在完成以上方案的改进后，测试人员的用户登录这个接口在进行性能回归测试时，使用gatling配置250个工作线程进行并发，一共完成50w的用户登录后就算是结束，再根据生成的测试报告分析。<br>刚开始每次压到20多w的用户登录时，就会报错，redis连接池无连接了。分析代码是配置了testOnBorrow:true，这个配置会在获取到连接后检查该连接的有效性，如果无效就丢弃，即在连接池删掉一个连接。而此时redis因为问题无法执行用户端的任何命令，所以所有连接都被当做无效连接被丢弃？直到连接池空了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在redis命令行执行</span><br><span class=\"line\">set test 12321</span><br><span class=\"line\">返回错误：</span><br><span class=\"line\">(error) MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.</span><br></pre></td></tr></table></figure></p>\n<p>这是因为默认的redis配置是以<a href=\"http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22\" target=\"_blank\" rel=\"external\">RDB的方式</a>进行定期存盘，而存盘时，会拒绝所有外部命令的写入(存盘失败后也会拒绝写入)。因为目前在redis的数据都处于可丢，解决方式也相当的粗暴。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.保证redis处于运行状态，查询系统6379端口的监听情况</span><br><span class=\"line\">2.顺序执行以下命令行，遇到错误请终止</span><br><span class=\"line\">docker exec -it test_redis_1 /bin/bash</span><br><span class=\"line\">cd usr/local/bin</span><br><span class=\"line\">./redis-cli.sh</span><br><span class=\"line\">config set stop-writes-on-bgsave-error no</span><br><span class=\"line\">config set save &quot;&quot;</span><br><span class=\"line\">quit</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure></p>\n<p>执行完以后，重启应用，再压测，呵呵，bug关闭。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.在最后一步提到RDB定期存盘，解决方案存在问题，强行关闭，会导致redis中的数据存在丢失风险，在这里建议有条件的，配置redis为1主1从，Master不进行任何形式的存盘，而Slave配置RDB和AOF方式的存盘，双保险。应用只连接Master即可。。注意Slave与Master第一次进行同步时会使用全量复制，对资源会有比较大的消耗，尽量选择在业务平峰期进行。<br>引申阅读，Master在这里成为了单点，为了Master的高可用，还有进一步的方案，1个Master下挂2个Slave，其中1个Slave(称为A)负责2种方式的存盘，另一个Slave(称为B)作为Master的热备，在Master故障后，参与到投票，成为新的Master，而B节点切换到A，接受A的增量同步。注意自动failover时，外部需要关闭写入命令。完成failover后，使用ip映射切换，使应用层重新恢复使用，相应的，应用层需要做到一定的容错性。实际生产中，不会要求应用层去做容错性措施，会有各种中间件(twemproxy)自动处理。</p>\n<p>2.以上业务中对<a href=\"https://www.ttlsa.com/redis/redis-database/\" target=\"_blank\" rel=\"external\">redis的16个数据库</a>没有使用好，可以按业务将数据存储到不同数据库，隔离影响。</p>\n<h3 id=\"常用命令合集\"><a href=\"#常用命令合集\" class=\"headerlink\" title=\"常用命令合集\"></a>常用命令合集</h3><p>调试过程中，由于可视化工具对redis支持的不够好，使用了很多redis的命令行，现在我们总结一下吧！<br>由于docker的风行，好处多多，我们在测试环境、线上环境也使用了docker/docker-compose</p>\n<h4 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose ps          //查看yml文件中所有容器的运行情况</span><br><span class=\"line\">docker-compose up -d xw    //将yml文件中容器名称定义为xw的容器，以后台运行的方式运行起来，如果是tomcat镜像，会调用tomcat的startup.sh.</span><br><span class=\"line\">docker-compose stop xw     //将yml文件中容器名称定义为xw的容器停止，如果是tomcat镜像，会调用tomcat的shutdown.sh</span><br><span class=\"line\">docker-compose stop        //查看yml文件中所有容器进行停止</span><br><span class=\"line\">docker-compose rm xw       //移除xw镜像</span><br><span class=\"line\">docker-compose build xw    //对xw进行镜像构建</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis-cli-sh-info\"><a href=\"#redis-cli-sh-info\" class=\"headerlink\" title=\"./redis-cli.sh/info\"></a>./redis-cli.sh/info</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F:\\Redis&gt; ./redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; info</span><br><span class=\"line\"># Server</span><br><span class=\"line\">redis_version:3.0.501</span><br><span class=\"line\">redis_git_sha1:00000000</span><br><span class=\"line\">redis_git_dirty:0</span><br><span class=\"line\">redis_build_id:ba05b51e58eb9205</span><br><span class=\"line\">redis_mode:standalone</span><br><span class=\"line\">os:Windows</span><br><span class=\"line\">arch_bits:64</span><br><span class=\"line\">multiplexing_api:WinSock_IOCP</span><br><span class=\"line\">process_id:1552</span><br><span class=\"line\">run_id:d3f2efa1c6cf26c7cf9246c2fcaca89b8e109439</span><br><span class=\"line\">tcp_port:6379</span><br><span class=\"line\">uptime_in_seconds:462095</span><br><span class=\"line\">uptime_in_days:5</span><br><span class=\"line\">hz:10</span><br><span class=\"line\">lru_clock:16404129</span><br><span class=\"line\">config_file:F:\\Redis\\redis.windows.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># Clients</span><br><span class=\"line\">connected_clients:1</span><br><span class=\"line\">client_longest_output_list:0</span><br><span class=\"line\">client_biggest_input_buf:0</span><br><span class=\"line\">blocked_clients:0</span><br><span class=\"line\"></span><br><span class=\"line\"># Memory</span><br><span class=\"line\">used_memory:842704</span><br><span class=\"line\">used_memory_human:822.95K</span><br><span class=\"line\">used_memory_rss:804920</span><br><span class=\"line\">used_memory_peak:374731600</span><br><span class=\"line\">used_memory_peak_human:357.37M</span><br><span class=\"line\">used_memory_lua:36864</span><br><span class=\"line\">mem_fragmentation_ratio:0.96</span><br><span class=\"line\">mem_allocator:jemalloc-3.6.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Persistence</span><br><span class=\"line\">loading:0</span><br><span class=\"line\">rdb_changes_since_last_save:0</span><br><span class=\"line\">rdb_bgsave_in_progress:0</span><br><span class=\"line\">rdb_last_save_time:1459242952</span><br><span class=\"line\">rdb_last_bgsave_status:ok</span><br><span class=\"line\">rdb_last_bgsave_time_sec:1</span><br><span class=\"line\">rdb_current_bgsave_time_sec:-1</span><br><span class=\"line\">aof_enabled:0</span><br><span class=\"line\">aof_rewrite_in_progress:0</span><br><span class=\"line\">aof_rewrite_scheduled:0</span><br><span class=\"line\">aof_last_rewrite_time_sec:-1</span><br><span class=\"line\">aof_current_rewrite_time_sec:-1</span><br><span class=\"line\">aof_last_bgrewrite_status:ok</span><br><span class=\"line\">aof_last_write_status:ok</span><br><span class=\"line\"></span><br><span class=\"line\"># Stats</span><br><span class=\"line\">total_connections_received:1010</span><br><span class=\"line\">total_commands_processed:49859</span><br><span class=\"line\">instantaneous_ops_per_sec:0</span><br><span class=\"line\">total_net_input_bytes:1822381802</span><br><span class=\"line\">total_net_output_bytes:3650427</span><br><span class=\"line\">instantaneous_input_kbps:0.00</span><br><span class=\"line\">instantaneous_output_kbps:0.00</span><br><span class=\"line\">rejected_connections:0</span><br><span class=\"line\">sync_full:0</span><br><span class=\"line\">sync_partial_ok:0</span><br><span class=\"line\">sync_partial_err:0</span><br><span class=\"line\">expired_keys:1073</span><br><span class=\"line\">evicted_keys:0</span><br><span class=\"line\">keyspace_hits:20782</span><br><span class=\"line\">keyspace_misses:738</span><br><span class=\"line\">pubsub_channels:0</span><br><span class=\"line\">pubsub_patterns:0</span><br><span class=\"line\">latest_fork_usec:388023</span><br><span class=\"line\">migrate_cached_sockets:0</span><br><span class=\"line\"></span><br><span class=\"line\"># Replication</span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">repl_backlog_active:0</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:0</span><br><span class=\"line\">repl_backlog_histlen:0</span><br><span class=\"line\"></span><br><span class=\"line\"># CPU</span><br><span class=\"line\">used_cpu_sys:9.45</span><br><span class=\"line\">used_cpu_user:38.25</span><br><span class=\"line\">used_cpu_sys_children:0.00</span><br><span class=\"line\">used_cpu_user_children:0.00</span><br><span class=\"line\"></span><br><span class=\"line\"># Cluster</span><br><span class=\"line\">cluster_enabled:0</span><br><span class=\"line\"></span><br><span class=\"line\"># Keyspace</span><br><span class=\"line\">db0:keys=1,expires=0,avg_ttl=0</span><br></pre></td></tr></table></figure>\n<h4 id=\"set-get\"><a href=\"#set-get\" class=\"headerlink\" title=\"set/get\"></a>set/get</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set test 123456</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get test</span><br><span class=\"line\">&quot;123456&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hset-hmset-hget-hmget\"><a href=\"#hset-hmset-hget-hmget\" class=\"headerlink\" title=\"hset/hmset/hget/hmget\"></a>hset/hmset/hget/hmget</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset testHash key1 value11</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget testHash</span><br><span class=\"line\">(error) ERR wrong number of arguments for &apos;hget&apos; command</span><br><span class=\"line\">127.0.0.1:6379&gt; hget testHash key1</span><br><span class=\"line\">&quot;value11&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; hset testHash key1 value11 key2 value22</span><br><span class=\"line\">(error) ERR wrong number of arguments for &apos;hset&apos; command</span><br><span class=\"line\">127.0.0.1:6379&gt; hmset testHash key1 value11 key2 value22</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget testHash key1 key2</span><br><span class=\"line\">1) &quot;value11&quot;</span><br><span class=\"line\">2) &quot;value22&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hlen-keys\"><a href=\"#hlen-keys\" class=\"headerlink\" title=\"hlen/keys\"></a>hlen/keys</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; len test</span><br><span class=\"line\">(error) ERR unknown command &apos;len&apos;</span><br><span class=\"line\">127.0.0.1:6379&gt; hlen testHash</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; keys test</span><br><span class=\"line\">1) &quot;test&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; keys testHash</span><br><span class=\"line\">1) &quot;testHash&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) &quot;testHash&quot;</span><br><span class=\"line\">2) &quot;test&quot;</span><br><span class=\"line\">3) &quot;message-queue-sms&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"config-set-get\"><a href=\"#config-set-get\" class=\"headerlink\" title=\"config set/get\"></a>config set/get</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; config get *</span><br><span class=\"line\">  1) &quot;dbfilename&quot;</span><br><span class=\"line\">  2) &quot;dump.rdb&quot;</span><br><span class=\"line\">  3) &quot;requirepass&quot;</span><br><span class=\"line\">  4) &quot;&quot;</span><br><span class=\"line\">  5) &quot;masterauth&quot;</span><br><span class=\"line\">  6) &quot;&quot;</span><br><span class=\"line\">  7) &quot;unixsocket&quot;</span><br><span class=\"line\">  8) &quot;&quot;</span><br><span class=\"line\">  9) &quot;logfile&quot;</span><br><span class=\"line\"> 10) &quot;&quot;</span><br><span class=\"line\"> 11) &quot;pidfile&quot;</span><br><span class=\"line\"> 12) &quot;/var/run/redis.pid&quot;</span><br><span class=\"line\"> 13) &quot;maxmemory&quot;</span><br><span class=\"line\"> 14) &quot;512000000&quot;</span><br><span class=\"line\"> 15) &quot;maxmemory-samples&quot;</span><br><span class=\"line\"> 16) &quot;5&quot;</span><br><span class=\"line\"> 17) &quot;timeout&quot;</span><br><span class=\"line\"> 18) &quot;0&quot;</span><br><span class=\"line\"> 19) &quot;tcp-keepalive&quot;</span><br><span class=\"line\"> 20) &quot;0&quot;</span><br><span class=\"line\"> 21) &quot;auto-aof-rewrite-percentage&quot;</span><br><span class=\"line\"> 22) &quot;100&quot;</span><br><span class=\"line\"> 23) &quot;auto-aof-rewrite-min-size&quot;</span><br><span class=\"line\"> 24) &quot;67108864&quot;</span><br><span class=\"line\"> 25) &quot;hash-max-ziplist-entries&quot;</span><br><span class=\"line\"> 26) &quot;512&quot;</span><br><span class=\"line\"> 27) &quot;hash-max-ziplist-value&quot;</span><br><span class=\"line\"> 28) &quot;64&quot;</span><br><span class=\"line\"> 29) &quot;list-max-ziplist-entries&quot;</span><br><span class=\"line\"> 30) &quot;512&quot;</span><br><span class=\"line\"> 31) &quot;list-max-ziplist-value&quot;</span><br><span class=\"line\"> 32) &quot;64&quot;</span><br><span class=\"line\"> 33) &quot;set-max-intset-entries&quot;</span><br><span class=\"line\"> 34) &quot;512&quot;</span><br><span class=\"line\"> 35) &quot;zset-max-ziplist-entries&quot;</span><br><span class=\"line\"> 36) &quot;128&quot;</span><br><span class=\"line\"> 37) &quot;zset-max-ziplist-value&quot;</span><br><span class=\"line\"> 38) &quot;64&quot;</span><br><span class=\"line\"> 39) &quot;hll-sparse-max-bytes&quot;</span><br><span class=\"line\"> 40) &quot;3000&quot;</span><br><span class=\"line\"> 41) &quot;lua-time-limit&quot;</span><br><span class=\"line\"> 42) &quot;5000&quot;</span><br><span class=\"line\"> 43) &quot;slowlog-log-slower-than&quot;</span><br><span class=\"line\"> 44) &quot;10000&quot;</span><br><span class=\"line\"> 45) &quot;latency-monitor-threshold&quot;</span><br><span class=\"line\"> 46) &quot;0&quot;</span><br><span class=\"line\"> 47) &quot;slowlog-max-len&quot;</span><br><span class=\"line\"> 48) &quot;128&quot;</span><br><span class=\"line\"> 49) &quot;port&quot;</span><br><span class=\"line\"> 50) &quot;6379&quot;</span><br><span class=\"line\"> 51) &quot;tcp-backlog&quot;</span><br><span class=\"line\"> 52) &quot;511&quot;</span><br><span class=\"line\"> 53) &quot;databases&quot;</span><br><span class=\"line\"> 54) &quot;16&quot;</span><br><span class=\"line\"> 55) &quot;repl-ping-slave-period&quot;</span><br><span class=\"line\"> 56) &quot;10&quot;</span><br><span class=\"line\"> 57) &quot;repl-timeout&quot;</span><br><span class=\"line\"> 58) &quot;60&quot;</span><br><span class=\"line\"> 59) &quot;repl-backlog-size&quot;</span><br><span class=\"line\"> 60) &quot;1048576&quot;</span><br><span class=\"line\"> 61) &quot;repl-backlog-ttl&quot;</span><br><span class=\"line\"> 62) &quot;3600&quot;</span><br><span class=\"line\"> 63) &quot;maxclients&quot;</span><br><span class=\"line\"> 64) &quot;10000&quot;</span><br><span class=\"line\"> 65) &quot;watchdog-period&quot;</span><br><span class=\"line\"> 66) &quot;0&quot;</span><br><span class=\"line\"> 67) &quot;slave-priority&quot;</span><br><span class=\"line\"> 68) &quot;100&quot;</span><br><span class=\"line\"> 69) &quot;min-slaves-to-write&quot;</span><br><span class=\"line\"> 70) &quot;0&quot;</span><br><span class=\"line\"> 71) &quot;min-slaves-max-lag&quot;</span><br><span class=\"line\"> 72) &quot;10&quot;</span><br><span class=\"line\"> 73) &quot;hz&quot;</span><br><span class=\"line\"> 74) &quot;10&quot;</span><br><span class=\"line\"> 75) &quot;cluster-node-timeout&quot;</span><br><span class=\"line\"> 76) &quot;15000&quot;</span><br><span class=\"line\"> 77) &quot;cluster-migration-barrier&quot;</span><br><span class=\"line\"> 78) &quot;1&quot;</span><br><span class=\"line\"> 79) &quot;cluster-slave-validity-factor&quot;</span><br><span class=\"line\"> 80) &quot;10&quot;</span><br><span class=\"line\"> 81) &quot;repl-diskless-sync-delay&quot;</span><br><span class=\"line\"> 82) &quot;5&quot;</span><br><span class=\"line\"> 83) &quot;cluster-require-full-coverage&quot;</span><br><span class=\"line\"> 84) &quot;yes&quot;</span><br><span class=\"line\"> 85) &quot;no-appendfsync-on-rewrite&quot;</span><br><span class=\"line\"> 86) &quot;no&quot;</span><br><span class=\"line\"> 87) &quot;slave-serve-stale-data&quot;</span><br><span class=\"line\"> 88) &quot;yes&quot;</span><br><span class=\"line\"> 89) &quot;slave-read-only&quot;</span><br><span class=\"line\"> 90) &quot;yes&quot;</span><br><span class=\"line\"> 91) &quot;stop-writes-on-bgsave-error&quot;</span><br><span class=\"line\"> 92) &quot;yes&quot;</span><br><span class=\"line\"> 93) &quot;daemonize&quot;</span><br><span class=\"line\"> 94) &quot;no&quot;</span><br><span class=\"line\"> 95) &quot;rdbcompression&quot;</span><br><span class=\"line\"> 96) &quot;yes&quot;</span><br><span class=\"line\"> 97) &quot;rdbchecksum&quot;</span><br><span class=\"line\"> 98) &quot;yes&quot;</span><br><span class=\"line\"> 99) &quot;activerehashing&quot;</span><br><span class=\"line\">100) &quot;yes&quot;</span><br><span class=\"line\">101) &quot;repl-disable-tcp-nodelay&quot;</span><br><span class=\"line\">102) &quot;no&quot;</span><br><span class=\"line\">103) &quot;repl-diskless-sync&quot;</span><br><span class=\"line\">104) &quot;no&quot;</span><br><span class=\"line\">105) &quot;aof-rewrite-incremental-fsync&quot;</span><br><span class=\"line\">106) &quot;yes&quot;</span><br><span class=\"line\">107) &quot;aof-load-truncated&quot;</span><br><span class=\"line\">108) &quot;yes&quot;</span><br><span class=\"line\">109) &quot;appendonly&quot;</span><br><span class=\"line\">110) &quot;no&quot;</span><br><span class=\"line\">111) &quot;dir&quot;</span><br><span class=\"line\">112) &quot;F:\\\\Redis&quot;</span><br><span class=\"line\">113) &quot;maxmemory-policy&quot;</span><br><span class=\"line\">114) &quot;noeviction&quot;</span><br><span class=\"line\">115) &quot;appendfsync&quot;</span><br><span class=\"line\">116) &quot;everysec&quot;</span><br><span class=\"line\">117) &quot;save&quot;</span><br><span class=\"line\">118) &quot;jd 900 jd 300 jd 60&quot;</span><br><span class=\"line\">119) &quot;loglevel&quot;</span><br><span class=\"line\">120) &quot;verbose&quot;</span><br><span class=\"line\">121) &quot;client-output-buffer-limit&quot;</span><br><span class=\"line\">122) &quot;normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60&quot;</span><br><span class=\"line\">123) &quot;unixsocketperm&quot;</span><br><span class=\"line\">124) &quot;0&quot;</span><br><span class=\"line\">125) &quot;slaveof&quot;</span><br><span class=\"line\">126) &quot;&quot;</span><br><span class=\"line\">127) &quot;notify-keyspace-events&quot;</span><br><span class=\"line\">128) &quot;&quot;</span><br><span class=\"line\">129) &quot;bind&quot;</span><br><span class=\"line\">130) &quot;&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; config set save &quot;&quot;</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<h4 id=\"flushdb-flushall\"><a href=\"#flushdb-flushall\" class=\"headerlink\" title=\"flushdb/flushall\"></a>flushdb/flushall</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; flushdb</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; flushall</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li>redis删除有序集合部分过期元素：<a href=\"http://caozm.blog.51cto.com/1118764/1389168\" target=\"_blank\" rel=\"external\">http://caozm.blog.51cto.com/1118764/1389168</a></li>\n<li>节约内存：Instagram的Redis实践：<a href=\"http://blog.nosqlfan.com/html/3379.html\" target=\"_blank\" rel=\"external\">http://blog.nosqlfan.com/html/3379.html</a></li>\n<li>redis持久化机制：<a href=\"http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22\" target=\"_blank\" rel=\"external\">http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22</a></li>\n<li>Redis事务的分析及改进：<a href=\"https://segmentfault.com/a/1190000002594059\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000002594059</a></li>\n<li>redis 多数据库：<a href=\"https://www.ttlsa.com/redis/redis-database/\" target=\"_blank\" rel=\"external\">https://www.ttlsa.com/redis/redis-database/</a></li>\n<li>利用Sorted Set数据结构，为元素设置有效期：<a href=\"http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set</a></li>\n<li>redis的Slave选举与优先级：<a href=\"https://segmentfault.com/a/1190000002685515\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000002685515</a></li>\n<li>利用代理中间件实现大规模Redis集群：<a href=\"http://www.imooc.com/article/4343\" target=\"_blank\" rel=\"external\">http://www.imooc.com/article/4343</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"我们怎么使用Redis？\"><a href=\"#我们怎么使用Redis？\" class=\"headerlink\" title=\"我们怎么使用Redis？\"></a>我们怎么使用Redis？</h2><p>公司目前主力开发的产品，是一个典型的平台电商型产品，包含了平台运营方、商家、消费者等角色。</p>\n<p>公司提供电商平台，同时负责系统维护和系统保障；商家与公司进行签约后，入驻平台，将商品投放到平台进行展示；平台依据商家签约信息，进行商品与消费者之间的兴趣推荐，消费者通过商品与商家达成消费订单后，平台按单依据签约与商家抽取利润。商家发现日订单分析有了提升后，可能会与平台达成更多的合作。从而演变出了良好的商业发展模式。</p>\n<p>平台电商型产品中，非常满足80/20法则(又称为:<a href=\"https://zh.wikipedia.org/wiki/%E5%B8%95%E9%9B%B7%E6%89%98%E6%B3%95%E5%88%99\">帕雷托法则</a>),查询的业务量远远多于写入的业务量，为了提高<a href=\"http://www.ha97.com/5095.html\">TPS</a>，降低对数据库的访问。我们也采取常规的做法，选用redis进行缓存常用业务数据。其中典型的就有：1.图片的信息、2.登录后的用户信息、3.全局超时锁、4.验证码。</p>\n<p>关于redis的技术选型，其实在我参与产品开发之前就已经完成了，在这个产品里也作为缓存层在使用。产品目前还在雏形孵化阶段，没有考虑太多关于分布式以及高可用的方案，对redis的使用很粗糙，在团队内可能熟悉redis的Developer不多，或者说有空又有耐心还熟悉redis的Developer没有吧？后来与PM的沟通后得知确实如此！</p>\n<h3 id=\"缓存图片信息\"><a href=\"#缓存图片信息\" class=\"headerlink\" title=\"缓存图片信息\"></a>缓存图片信息</h3><p>目前有很多业务在使用该缓存：商品的图片编辑，商家店面形象的图文自我介绍，用户针对订单的图文评价.</p>\n<p>这一部分的数据，在产品启动时(没有黑科技，就是在web.xml，自定义listener。)，读取Mysql中的File表，load进redis，数据量约120W条，没有做任何的分库分表处理。</p>\n<p>File表的结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `file` (</span><br><span class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;图片ID&apos;,</span><br><span class=\"line\">  `uid` int(11) DEFAULT NULL COMMENT &apos;上传用户Id&apos;,</span><br><span class=\"line\">  `crc32` char(8) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &apos;crc32校验和&apos;,</span><br><span class=\"line\">  `url` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT &apos;&apos; COMMENT &apos;对外访问的URL&apos;,</span><br><span class=\"line\">  `path` varchar(256) COLLATE utf8mb4_unicode_ci DEFAULT &apos;&apos; COMMENT &apos;存储的相对路径&apos;,</span><br><span class=\"line\">  `filename` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &apos;&apos; COMMENT &apos;文件名字&apos;,</span><br><span class=\"line\">  `size` int(11) DEFAULT NULL COMMENT &apos;图片大小(单位byte)&apos;,</span><br><span class=\"line\">  `ext` char(5) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT &apos;&apos; COMMENT &apos;图片后缀&apos;,</span><br><span class=\"line\">  `is_image` tinyint(4) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;是否是图片，0为不是，1为是&apos;,</span><br><span class=\"line\">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class=\"line\">  `storage_type` tinyint(4) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;图片存储介质，0为fileSystem，1阿里云,2表示ppw老数据&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  UNIQUE KEY `filename` (`filename`) USING BTREE</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=1146617 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT=&apos;文件信息表&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>有意思的是，每次产品启动时，读取到的所有File表记录，进行for循环，每一次循环中，访问一次redis。而在产品关闭时，删除redis的key，从而清除缓存？如果数据量愈来愈多，不就像做过山车一样，启动时加载全量数据，使用量飚的很高，关闭时删除全量缓存，使用量逐渐落回低谷(redis有<a href=\"http://wangneng-168.iteye.com/blog/2100379\">内存释放机制</a>)。对于内存型中间件产品，这样的使用会带来很多的不可靠性。</p>\n<p>启动时加载数据到redis时的处理过程,部分为伪码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File表对应的实体类：</span><br><span class=\"line\">public class File&#123;//与数据库字段名完全的一致</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private int uid;</span><br><span class=\"line\">    private String crc32;</span><br><span class=\"line\">    private String url;</span><br><span class=\"line\">    private String path;</span><br><span class=\"line\">    private String filename;</span><br><span class=\"line\">    private int size;</span><br><span class=\"line\">    private String ext;</span><br><span class=\"line\">    private int is_image;</span><br><span class=\"line\">    private Timestamp create_time;</span><br><span class=\"line\">    private int storage_type;</span><br><span class=\"line\"></span><br><span class=\"line\">    //忽略 getter\\setter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//调用Dao层访问Mysql数据库，取回File表的所有记录，每条记录包含所有字段。</span><br><span class=\"line\">List&lt;File&gt; files=this.fileDao.getAll();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//读取File表的SQL：SELECT * FROM FILE;</span><br><span class=\"line\"></span><br><span class=\"line\">for(int i=0;i&lt;files.size();i++)&#123;</span><br><span class=\"line\">    this.cacheDao.setOneFileToRedis(files.get(i).getId(),files.get(i).getUrl());//调用Dao层访问Redis，将数据存入redis</span><br><span class=\"line\">    //WTF?只需要2个字段，然而取回了所有字段？而且不能批量存入redis?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cacheDao的实现</span><br><span class=\"line\">private final static String PHOTO_CACHE_KEY=&quot;photos&quot;;</span><br><span class=\"line\">public void setOneFileToRedis(int id,String url)&#123;</span><br><span class=\"line\">    this.jedis.hset(PHOTO_CACHE_KEY, id.toString(), url);//1.使用[Hash数据结构](https://redis.readthedocs.org/en/2.4/hash.html)。2.没有设置key有效期，即永久有效。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public String getOneFileInRedis(int id)&#123;</span><br><span class=\"line\">    return this.jedis.hget(PHOTO_CACHE_KEY, id.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样图片信息缓存的结构看起来是这样:<br><img src=\"/img/photos在redis的数据结构示例.png\" alt=\"photos在redis的数据结构示例\"><br>实际的情况下，size远大于1000，上文说了约在120w左右，我的这个redis可视化工具(redisclient-win32.x86.2.0)无法获取size这样大的key，报SocketTimeOutException。猜测是向redis获取大key时，无法在一个socket包中写入，造成通讯失败。</p>\n<p>以上cacheDao的实现中，没有提供一次批量获取所需的多个图片信息，例如“public Map<Integer,String> getBatchFileInRedis(int[] ids)”，甚至在cache interface中都没有提供这样的接口定义。</p>\n<p>这样导致在上层逻辑中，出现大量一次性代码。因为调用不集中，给重构带来很大麻烦。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是分页获取商品列表的伪代码实现</span><br><span class=\"line\"></span><br><span class=\"line\">与数据库product表对应的实体类</span><br><span class=\"line\">public class Product&#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private long price;</span><br><span class=\"line\">    private int photoId;</span><br><span class=\"line\"></span><br><span class=\"line\">    //忽略 getter\\setter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">真实的返回到app端的对象</span><br><span class=\"line\">public class ProductFull&#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private long price;</span><br><span class=\"line\">    private int photoId;</span><br><span class=\"line\">    private String photoUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    //忽略 getter\\setter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public List&lt;ProductFull&gt; findProductByPage(int pageSize,int pageNo)&#123;</span><br><span class=\"line\">    List&lt;Product&gt; products=this.productDao.findByPage(int pageSize,int pageNo);//调用Dao层访问Mysql</span><br><span class=\"line\">    List&lt;ProductFull&gt; results=new ArrayList&lt;&gt;(products.size());</span><br><span class=\"line\">    for(Product product:products)&#123;</span><br><span class=\"line\">        ProductFull pf=new ProductFull();</span><br><span class=\"line\">        pf.setId(product.getId());//其他的属性值都是类似的拷贝，或借助Apache-Common beanUtils组件进行拷贝。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        String url=this.cacheDao.getOneFileInRedis(product.getPhotoId());//每一个循环项都访问了redis</span><br><span class=\"line\">        pf.setPhotoUrl(url);</span><br><span class=\"line\">        results.add(pf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return results;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">如果每个商品分页是10条，最坏情况下，需要访问1次Mysql+访问10次redis。非常严重的是，每个分页条数的大小由app端决定，服务端不限制，WTF?</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"缓存登录后的用户信息\"><a href=\"#缓存登录后的用户信息\" class=\"headerlink\" title=\"缓存登录后的用户信息\"></a>缓存登录后的用户信息</h3><p>在这个产品面向消费者以及商家，都推出了不同的APP。互联网APP为了提高用户体验，以及降低用户登录登出频次(用户的登录/登出操作，对服务器是比较大的开销)，都会对一次登陆成功的用户，默认在一段时间不需要再次登录。即服务器分配Token给APP本地保存，同时服务器保存Token，设置该Token在一段时间不活动后自动失效，APP后续与服务器的通信中，都需要提交该Token鉴权。这是很常规的做法，短时间有效，而且是非关键性小数据，一次写入多次读取，对于服务器来说，没有比memcached或redis更合适的选择了，那为什么没有选择memcached？我个人的猜测是memcached更适合做Object Store Server，而且很重要的redis具有丰富数据结构与<a href=\"http://www.cnblogs.com/EE-NovRain/p/3268476.html\">扩容与容灾机制</a>。</p>\n<p>用户的第一次登录，服务端进行参数解析，鉴权后，就需要写入2次redis。<br>用户的登出接口中，直接是删除当前会话的redis记录。</p>\n<p>第一次：写入本次登入的Token与用户信息的关联<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录成功后，从DB或Cache层获取用户数据，构造用户数据JSON</span><br><span class=\"line\">String userLoginSuccessInfo=&quot;&#123;&quot;uid&quot;:12321,&quot;name&quot;:&quot;张三&quot;,&quot;sex&quot;:0,&quot;avatar_id&quot;:345643&#125;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">cacheDao的实现</span><br><span class=\"line\">private final static String SESSION_CACHE_KEY=&quot;session:&quot;;</span><br><span class=\"line\">//登录成功</span><br><span class=\"line\">public void setOneLoginSuccessToRedis(String token,String userLoginSuccessInfo)&#123;</span><br><span class=\"line\">    this.jedis.setex(SESSION_CACHE_KEY+token, 30*24*60*60, userLoginSuccessInfo);//1.使用String数据结构。2.设置key有效期30天。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//鉴权</span><br><span class=\"line\">public String getOneLoginSuccessInRedis(String token)&#123;</span><br><span class=\"line\">    return this.jedis.get(SESSION_CACHE_KEY+token);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//登出</span><br><span class=\"line\">public void logoutSuccessInRedis(String token)&#123;</span><br><span class=\"line\">    this.jedis.del(SESSION_CACHE_KEY+token);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">这个以&quot;session:&quot;开头的key里，并没有实现从uid如何获取token值？</span><br><span class=\"line\">这会引发的问题：一个用户的多次登录，会生成多个以&quot;session:&quot;开头的key，没有覆盖之前登录的token。造成内存空间的浪费，以及不安全。正确的做法在下文会提到。</span><br></pre></td></tr></table></figure></p>\n<p>第二次：写入本次登入的用户id与24小时内的积分获取信息。</p>\n<p>有一个需求定义用户在登录后可以获取积分，但在24小时内的登录只算一次。</p>\n<p>那在服务器端的是实现是，用户第一次登录成功后，在redis写入一个与该用户相关的key，并设置24小时后失效，然后再增加积分。用户在24小时内进行第二次登录，先读取redis是否有相关的key，使用exist命令，如果已经有了，就不增加积分了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录成功后，从DB或Cache层获取用户数据，构造用户与积分业务数据JSON</span><br><span class=\"line\">int uid=158263;</span><br><span class=\"line\"></span><br><span class=\"line\">cacheDao的实现</span><br><span class=\"line\">private final static String USER_ACTIVITY_CACHE_KEY=&quot;daily_activity_&quot;;</span><br><span class=\"line\">public void setOneUserWithActivityToRedis(int uid)&#123;</span><br><span class=\"line\">    this.jedis.setex(USER_ACTIVITY_CACHE_KEY+uid, 24*60*60, &quot;&quot;);//1.使用String数据结构。2.设置key有效期24h。3.value部分为空字符串？</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean checkOneUserWithActivityToRedis(int uid)&#123;</span><br><span class=\"line\">    this.jedis.exists(USER_ACTIVITY_CACHE_KEY+uid);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这部分的业务属于典型案例，浪费内存空间。<br>第一个问题，不应该使用长前缀，每个key都需要set进内存，长前缀意味着空间占用，以及效率低下。<br>第二个问题，这不是明显可以使用<a href=\"https://redis.readthedocs.org/en/2.4/sorted_set.html\">Sorted Set数据结构</a>?，还可以省掉一次exists检查。</p>\n<p>虽然redis的TPS很高，但是我们依旧要避免滥用。</p>\n<h2 id=\"这次的问题的描述？\"><a href=\"#这次的问题的描述？\" class=\"headerlink\" title=\"这次的问题的描述？\"></a>这次的问题的描述？</h2><p>测试MM提出在性能测试环境中，有一些API在并发数到250~300时，出现很多报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis的相关错误</span><br><span class=\"line\">Could not get a resource from the pool</span><br></pre></td></tr></table></figure></p>\n<p>典型报错的接口有</p>\n<ul>\n<li>分页获取商品列表</li>\n<li>用户登录</li>\n</ul>\n<p>应用中配置redis连接池上限值是1000，而在redis server端配置maxClients=10000;区区这点并发，就耗尽redis连接池资源了？绝不可能，问题还在更远的地方等着我.</p>\n<p>性能测试环境配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">硬件配置</span><br><span class=\"line\">操作系统    Linux Ubuntu 14.04.4 LTS</span><br><span class=\"line\">CPU个数   4</span><br><span class=\"line\">CPU时钟频率 2.6G</span><br><span class=\"line\">内存  4G</span><br><span class=\"line\">有无外部存储  云端存储</span><br><span class=\"line\"></span><br><span class=\"line\">软件配置</span><br><span class=\"line\">docker  1.9.1</span><br><span class=\"line\">mysql   5.6</span><br><span class=\"line\">jdk 1.8.0_72</span><br><span class=\"line\">solr    5.3.0</span><br><span class=\"line\">redis   3.0.5</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如何一步步的解决问题？\"><a href=\"#如何一步步的解决问题？\" class=\"headerlink\" title=\"如何一步步的解决问题？\"></a>如何一步步的解决问题？</h2><p>在描述问题产生背景时，其实也提到了很多不合理的地方，但<em>存在即合理</em>，处在现在的困境，一定有当时的无奈。现在我们一起来总结一下问题所在。</p>\n<h3 id=\"对缓存图片的处理存在的问题\"><a href=\"#对缓存图片的处理存在的问题\" class=\"headerlink\" title=\"对缓存图片的处理存在的问题\"></a>对缓存图片的处理存在的问题</h3><ul>\n<li>产品初始化时全量塞入redis/产品停止运行是全量卸掉</li>\n<li>产品初始化时塞入redis时，没有做批量操作</li>\n<li>对批量获取图片信息不支持，在接口层面就已经没有定义，对于可预见的需求没有进行考虑，这是架构设计的缺陷。</li>\n<li>引申：大量的数据，放在一个key里，会出现问题，需要进行水平切分(Sharding)。</li>\n</ul>\n<h4 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h4><p>1.图片的Id数据在File表采用了<em>自增长</em>的方式生成，不会出现重复，并且有顺序。我们可以利用这一点，在产品初始化时，在Mysql数据库File表只查找2个字段：id/url。程序处理时，先写入reids一个key，使用Hash数据结构，isInitIng:photos-true，标明到正在初始化，其他产品节点不需要重复初始化。使用hmset的方式，一次性将多个键值对存入到redis。完成后，修改isInitIng:photos-false。当有了新图片时，先在Mysql数据库File表进行保存，得到这个图片的Id以及url，使用hset加入该图片到redis。如果需要修改某一张图片的url，也可以用hset。这样在产品停止运行时，是不需要删除redis关于图片的数据的。</p>\n<p>2.cache层加入新接口，支持批量获取图片信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final static String PHOTO_CACHE_KEY=&quot;photos&quot;;</span><br><span class=\"line\">public void setFileToRedis(Map&lt;Integer,String&gt; photos)&#123;</span><br><span class=\"line\">    this.jedis.hmset(PHOTO_CACHE_KEY, photos);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Map&lt;Integer,String&gt; getBatchFileInRedis(int[] ids)&#123;</span><br><span class=\"line\">    return this.jedis.hmget(PHOTO_CACHE_KEY, coverArrayToString(ids));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static String[] coverArrayToString(int[] ids)&#123;</span><br><span class=\"line\">    String[] results=new String[ids.length];</span><br><span class=\"line\">    for (int i = 0; i &lt; ids.length; i++) &#123;</span><br><span class=\"line\">        results[i]=ids[i]+&quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对之前循环调用的上层代码进行修改，改为调用批量获取接口。</p>\n<p>3.对于单个key承载大量的数据的情况，方案是对key下的values hash key进行分割，使用一定的算法将块状的数据均匀分布在多个key里。给一个<a href=\"http://blog.nosqlfan.com/html/3379.html\">参考链接</a>。</p>\n<h3 id=\"对缓存用户登录的处理存在的问题\"><a href=\"#对缓存用户登录的处理存在的问题\" class=\"headerlink\" title=\"对缓存用户登录的处理存在的问题\"></a>对缓存用户登录的处理存在的问题</h3><ul>\n<li>session的存储不合理，每次登陆都会生成一个新的key值</li>\n<li>对USER_ACTIVITY_CACHE_KEY在value部分的数据结构不合理，应采用Sorted Set</li>\n<li>对USER_ACTIVITY_CACHE_KEY的命名不合适，过长导致空间浪费和效率低下</li>\n<li>因采用错误数据结构，USER_ACTIVITY_CACHE_KEY需要进行多一次的exists判断。</li>\n</ul>\n<h4 id=\"方案-1\"><a href=\"#方案-1\" class=\"headerlink\" title=\"方案\"></a>方案</h4><p>session的存储不合理的解决，通过新的key(uid:token)来反向标记uid与token的关系，2个key的超时时间保持一致，例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uid:158742-token001</span><br></pre></td></tr></table></figure></p>\n<p>在写入SESSION_CACHE_KEY时，同时写入到redis，为保证2次写入的原子性，需要使用<a href=\"https://redis.readthedocs.org/en/2.4/transaction.html\">redis的事务</a>。如果支持用户的多设备在线，只需要将key(uid:token)更改为Sorted Set结构。因为不存在资源的争夺，这个事务几乎不会失败。在用户登出时，删除掉当前会话信息以及用户关联的会话信息(同样是使用redis事务)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cacheDao的实现</span><br><span class=\"line\">private final static String SESSION_CACHE_KEY=&quot;se:&quot;;//全称：&quot;session:&quot;，改善key命名，按业务进行简略，提升网络传输和存储效率。</span><br><span class=\"line\">private final static String USER_TOKEN_CACHE_KEY=&quot;u:t:&quot;;//uid:token:</span><br><span class=\"line\">//登录成功，保存用户登录Token。接收建议的token参数值，返回实际保存的token值。</span><br><span class=\"line\">public String setOneLoginSuccessToRedis(int uid,String token,String userLoginSuccessInfo)&#123;//重构</span><br><span class=\"line\">    if(checkOneUserTokenExists(uid))&#123;</span><br><span class=\"line\">        token=getOneUserToken(uid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    long expireTime=30*24*60*60;//设置key有效期30天。</span><br><span class=\"line\">    String ret=this.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);//乐观锁，重试，在这里几乎不存在</span><br><span class=\"line\">    if(ret==null||!ret.equals(&quot;OK&quot;))&#123;</span><br><span class=\"line\">        log.error(&quot;redis watch 操作失败.ret:&#123;&#125;&quot;,ret);</span><br><span class=\"line\">        this.jedis.unwatch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Transaction tx = this.jedis.multi();</span><br><span class=\"line\">    tx.setex(SESSION_CACHE_KEY+token, expireTime, userLoginSuccessInfo);</span><br><span class=\"line\">    tx.setex(USER_TOKEN_CACHE_KEY+uid, expireTime, token);</span><br><span class=\"line\">    List&lt;Object&gt; results = tx.exec();</span><br><span class=\"line\">    return token;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//检查用户登录Token是否已经存在</span><br><span class=\"line\">public boolean checkOneUserTokenExists(int uid)&#123;//新方法</span><br><span class=\"line\">    return this.jedis.exists(USER_TOKEN_CACHE_KEY+uid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取用户登录Token信息</span><br><span class=\"line\">public String getOneUserToken(int uid)&#123;//新方法</span><br><span class=\"line\">    return this.jedis.get(USER_TOKEN_CACHE_KEY+uid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//鉴权</span><br><span class=\"line\">public String getOneLoginSuccessInRedis(String token)&#123;//不改动</span><br><span class=\"line\">    return this.jedis.get(SESSION_CACHE_KEY+token);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//登出</span><br><span class=\"line\">public void logoutSuccessInRedis(String token)&#123;</span><br><span class=\"line\">    String ret=this.jedis.watch(SESSION_CACHE_KEY+token,USER_TOKEN_CACHE_KEY+uid);//乐观锁，重试，在这里几乎不存在</span><br><span class=\"line\">    if(ret==null||!ret.equals(&quot;OK&quot;))&#123;</span><br><span class=\"line\">        log.error(&quot;redis watch 操作失败.ret:&#123;&#125;&quot;,ret);</span><br><span class=\"line\">        this.jedis.unwatch();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Transaction tx = this.jedis.multi();</span><br><span class=\"line\">    tx.del(SESSION_CACHE_KEY+token);</span><br><span class=\"line\">    tx.del(USER_TOKEN_CACHE_KEY+uid);</span><br><span class=\"line\">    List&lt;Object&gt; results = tx.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"隐患和思考\"><a href=\"#隐患和思考\" class=\"headerlink\" title=\"隐患和思考\"></a>隐患和思考</h4><p>redis事务带来的问题，redis的事务设计比较暴力，这给应用层带来了麻烦。</p>\n<ul>\n<li>Redis的基本事务（basic transaction）需要用到MULTI命令和EXEC命令，这种事务可以让一个客户端在不被其他客户端打断的情况下执行多个命令。和关系数据库那种可以在执行的过程中进行回滚（rollback）的事务不同，在Redis里面，被MULTI命令和EXEC命令包围的所有命令会一个接一个地执行，直到所有命令都执行完毕为止。当一个事务执行完毕之后，Redis才会处理其他客户端的命令。</li>\n<li><a href=\"http://redisdoc.com/topic/transaction.html\">Redis 在事务失败时不进行回滚，而是继续执行余下的命令</a></li>\n</ul>\n<p>基于此，redis事务会在客户端高并发时，其他客户端命令产生阻塞，而且事务回滚需要应用层自己解决。关于事务无法自动回滚，这在NoSQL领域是常见问题了。</p>\n<h4 id=\"redis时间线设计\"><a href=\"#redis时间线设计\" class=\"headerlink\" title=\"redis时间线设计\"></a>redis时间线设计</h4><p>接下来对用户在24小时内的积分信息的处理进行改进，以及redis不支持对Set内的单个Element进行有效期设置，我们采用Sorted Set结构，结合Score特性和Quartz来达到元素过期被删除的目的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cacheDao的实现</span><br><span class=\"line\">private final static String USER_ACTIVITY_CACHE_KEY=&quot;a:d&quot;;//全称：&quot;activity:daily:&quot;，改善key命名，按业务进行简略，提升网络传输和存储效率。</span><br><span class=\"line\">public void setOneUserWithActivityToRedis(int uid)&#123;</span><br><span class=\"line\">    this.jedis.zadd(USER_ACTIVITY_CACHE_KEY,System.currentTimeMillis(),uid+&quot;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean checkOneUserWithActivityToRedis(int uid)&#123;</span><br><span class=\"line\">    this.jedis.sismember(USER_ACTIVITY_CACHE_KEY,uid+&quot;&quot;);</span><br><span class=\"line\">    long score=this.jedis.zscore(USER_ACTIVITY_CACHE_KEY,uid+&quot;&quot;);</span><br><span class=\"line\">    if(score&gt;0)&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">另外加入一个计划任务，借助Quartz即可。</span><br><span class=\"line\">String corn=*/1 * * * * ?  //每1秒钟执行1次</span><br><span class=\"line\">public void cleanExpireUserWithActivity()&#123;</span><br><span class=\"line\">    long now=System.currentTimeMillis();</span><br><span class=\"line\">    long 1MAgo=now-60*1000;//1分钟前的时间</span><br><span class=\"line\">    long remCount=this.jedis.zremrangeByScore(USER_ACTIVITY_CACHE_KEY,1MAgo,now);</span><br><span class=\"line\">    log.info(&quot;成功删除的元素数量是：&#123;&#125;，执行时间是：&#123;&#125;&quot;,remCount,now);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"隐患和思考-1\"><a href=\"#隐患和思考-1\" class=\"headerlink\" title=\"隐患和思考\"></a>隐患和思考</h4><p>在上文给出的代码中，我们做了一定的容错性，每次删除过去1分钟的所有Element，这样Quartz出现故障时，如果在1分钟内得到fixed，影响的数据只限于1分钟内的Element。每1秒钟触发一次Quartz与删除过去1分钟的所有Element，这2个维度的频率需要权衡。</p>\n<ul>\n<li>过高频率的访问redis是否会有稳定性问题？</li>\n<li>删除Element的时间区间过大，是否会影响redis执行效率(时间复杂度:<a href=\"http://redisdoc.com/sorted_set/zrevrangebyscore.html\">O(log(N)+M)</a>)，导致阻塞？</li>\n<li>高频率删除Element，是否会影响redis的RDB与AOF备份，因此造成额外的问题？</li>\n</ul>\n<p>借助Quartz还有misfire的隐患，如何保障Quartz在每一秒钟都顺畅执行一次(Once and only once)，这涉及到操作系统、内存的可靠性，这是一个大的命题，我们不过多讨论。</p>\n<p>记录一下对这类问题的思考</p>\n<ul>\n<li>可以对这个计划任务进行多机并行运行。例如：A计划与B计划都处于运行状态，A在奇数秒触发，B在偶数秒触发。进一步降低2秒内misfire的概率。</li>\n<li>在Quartz启动Job时，检测到是业务高峰期，另开启一个异步线程，调用cleanExpireUserWithActivity方法，而cleanExpireUserWithActivity需要承受并发，即redis需要对zremrangeByScore命令支持并发，但redis是<a href=\"http://www.blogjava.net/caojianhua/archive/2013/01/28/394847.html\">单进程单线程模型</a>。</li>\n<li>异步线程受制于redis，还可以进行改进，使用队列，如ActiveMQ。调用cleanExpireUserWithActivity逻辑进行调整，将命令序列化后写入到点对点队列，另外使用程序监听队列(即消费者端)，有新命令时取出，这里实际调用cleanExpireUserWithActivity，仅在调用成功后释放命令。</li>\n<li>现在问题在于如何保障ActiveMQ的稳定运行了，应该还有改进方案。</li>\n</ul>\n<p>按照以上的方案进行重构后，性能得到显著提升，按理论来说稳定性会有提高，因为不具备稳定性测试的条件，没法比较。</p>\n<h2 id=\"遇到了一些问题\"><a href=\"#遇到了一些问题\" class=\"headerlink\" title=\"遇到了一些问题\"></a>遇到了一些问题</h2><p>1.redis一次批量hmset过多时报错<br>hmset操作时，对于一次传入参数数量上限有要求。这取决于你的网络环境下，socket一次写入的字节数上限。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String hmset(final String key, final Map&lt;String, String&gt; hash);</span><br></pre></td></tr></table></figure></p>\n<p>在我本机的环境下(应用与redis都在本机，不同端口，redis以默认配置运行)，Map<String, String> hash的size大于5w左右就会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.clients.jedis.exceptions.JedisConnectionException: java.net.SocketException: Software caused connection abort: socket write error</span><br><span class=\"line\">    at redis.clients.jedis.Protocol.sendCommand(Protocol.java:98)</span><br><span class=\"line\">    at redis.clients.jedis.Protocol.sendCommand(Protocol.java:78)</span><br><span class=\"line\">    at redis.clients.jedis.Connection.sendCommand(Connection.java:101)</span><br><span class=\"line\">    at redis.clients.jedis.BinaryClient.hmset(BinaryClient.java:246)</span><br><span class=\"line\">    at redis.clients.jedis.Client.hmset(Client.java:171)</span><br><span class=\"line\">    at redis.clients.jedis.Jedis.hmset(Jedis.java:652)</span><br></pre></td></tr></table></figure></p>\n<p>在这种情况下，必需要将大Map切分成一块块的Map，循环调用hmset<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final static int maxEveryTurn=5000;//定义每次最多批量塞入redis的key数量</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 批量存储到redis的key数量太多，必需切分成小块存储</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void setTooManyToJedis(Jedis jedis, Map&lt;String, String&gt; map) &#123;</span><br><span class=\"line\">        int size=map.size();</span><br><span class=\"line\">        int pieceNum=size/maxEveryTurn;</span><br><span class=\"line\">        if(size&gt;(pieceNum*maxEveryTurn))&#123;</span><br><span class=\"line\">            pieceNum+=1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; list=new ArrayList&lt;&gt;(pieceNum);</span><br><span class=\"line\">        for (int i=0;i&lt;pieceNum;i++)&#123;</span><br><span class=\"line\">            list.add(new HashMap&lt;&gt;(maxEveryTurn));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while (iterator.hasNext()) &#123;</span><br><span class=\"line\">            Map.Entry&lt;String, String&gt; entry = iterator.next();</span><br><span class=\"line\">            String key = entry.getKey();</span><br><span class=\"line\">            int hashCode = Math.abs(String.valueOf(key).hashCode());</span><br><span class=\"line\">            int index=hashCode % pieceNum;</span><br><span class=\"line\">            list.get(index).put(key, map.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.clear();</span><br><span class=\"line\">        for (Map&lt;String, String&gt; pieceMap:list)&#123;</span><br><span class=\"line\">            setToJedis(jedis, pieceMap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.clear();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.持续写redis时遇到rdb问题<br>在完成以上方案的改进后，测试人员的用户登录这个接口在进行性能回归测试时，使用gatling配置250个工作线程进行并发，一共完成50w的用户登录后就算是结束，再根据生成的测试报告分析。<br>刚开始每次压到20多w的用户登录时，就会报错，redis连接池无连接了。分析代码是配置了testOnBorrow:true，这个配置会在获取到连接后检查该连接的有效性，如果无效就丢弃，即在连接池删掉一个连接。而此时redis因为问题无法执行用户端的任何命令，所以所有连接都被当做无效连接被丢弃？直到连接池空了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在redis命令行执行</span><br><span class=\"line\">set test 12321</span><br><span class=\"line\">返回错误：</span><br><span class=\"line\">(error) MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.</span><br></pre></td></tr></table></figure></p>\n<p>这是因为默认的redis配置是以<a href=\"http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22\">RDB的方式</a>进行定期存盘，而存盘时，会拒绝所有外部命令的写入(存盘失败后也会拒绝写入)。因为目前在redis的数据都处于可丢，解决方式也相当的粗暴。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.保证redis处于运行状态，查询系统6379端口的监听情况</span><br><span class=\"line\">2.顺序执行以下命令行，遇到错误请终止</span><br><span class=\"line\">docker exec -it test_redis_1 /bin/bash</span><br><span class=\"line\">cd usr/local/bin</span><br><span class=\"line\">./redis-cli.sh</span><br><span class=\"line\">config set stop-writes-on-bgsave-error no</span><br><span class=\"line\">config set save &quot;&quot;</span><br><span class=\"line\">quit</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure></p>\n<p>执行完以后，重启应用，再压测，呵呵，bug关闭。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1.在最后一步提到RDB定期存盘，解决方案存在问题，强行关闭，会导致redis中的数据存在丢失风险，在这里建议有条件的，配置redis为1主1从，Master不进行任何形式的存盘，而Slave配置RDB和AOF方式的存盘，双保险。应用只连接Master即可。。注意Slave与Master第一次进行同步时会使用全量复制，对资源会有比较大的消耗，尽量选择在业务平峰期进行。<br>引申阅读，Master在这里成为了单点，为了Master的高可用，还有进一步的方案，1个Master下挂2个Slave，其中1个Slave(称为A)负责2种方式的存盘，另一个Slave(称为B)作为Master的热备，在Master故障后，参与到投票，成为新的Master，而B节点切换到A，接受A的增量同步。注意自动failover时，外部需要关闭写入命令。完成failover后，使用ip映射切换，使应用层重新恢复使用，相应的，应用层需要做到一定的容错性。实际生产中，不会要求应用层去做容错性措施，会有各种中间件(twemproxy)自动处理。</p>\n<p>2.以上业务中对<a href=\"https://www.ttlsa.com/redis/redis-database/\">redis的16个数据库</a>没有使用好，可以按业务将数据存储到不同数据库，隔离影响。</p>\n<h3 id=\"常用命令合集\"><a href=\"#常用命令合集\" class=\"headerlink\" title=\"常用命令合集\"></a>常用命令合集</h3><p>调试过程中，由于可视化工具对redis支持的不够好，使用了很多redis的命令行，现在我们总结一下吧！<br>由于docker的风行，好处多多，我们在测试环境、线上环境也使用了docker/docker-compose</p>\n<h4 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose ps          //查看yml文件中所有容器的运行情况</span><br><span class=\"line\">docker-compose up -d xw    //将yml文件中容器名称定义为xw的容器，以后台运行的方式运行起来，如果是tomcat镜像，会调用tomcat的startup.sh.</span><br><span class=\"line\">docker-compose stop xw     //将yml文件中容器名称定义为xw的容器停止，如果是tomcat镜像，会调用tomcat的shutdown.sh</span><br><span class=\"line\">docker-compose stop        //查看yml文件中所有容器进行停止</span><br><span class=\"line\">docker-compose rm xw       //移除xw镜像</span><br><span class=\"line\">docker-compose build xw    //对xw进行镜像构建</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis-cli-sh-info\"><a href=\"#redis-cli-sh-info\" class=\"headerlink\" title=\"./redis-cli.sh/info\"></a>./redis-cli.sh/info</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F:\\Redis&gt; ./redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; info</span><br><span class=\"line\"># Server</span><br><span class=\"line\">redis_version:3.0.501</span><br><span class=\"line\">redis_git_sha1:00000000</span><br><span class=\"line\">redis_git_dirty:0</span><br><span class=\"line\">redis_build_id:ba05b51e58eb9205</span><br><span class=\"line\">redis_mode:standalone</span><br><span class=\"line\">os:Windows</span><br><span class=\"line\">arch_bits:64</span><br><span class=\"line\">multiplexing_api:WinSock_IOCP</span><br><span class=\"line\">process_id:1552</span><br><span class=\"line\">run_id:d3f2efa1c6cf26c7cf9246c2fcaca89b8e109439</span><br><span class=\"line\">tcp_port:6379</span><br><span class=\"line\">uptime_in_seconds:462095</span><br><span class=\"line\">uptime_in_days:5</span><br><span class=\"line\">hz:10</span><br><span class=\"line\">lru_clock:16404129</span><br><span class=\"line\">config_file:F:\\Redis\\redis.windows.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># Clients</span><br><span class=\"line\">connected_clients:1</span><br><span class=\"line\">client_longest_output_list:0</span><br><span class=\"line\">client_biggest_input_buf:0</span><br><span class=\"line\">blocked_clients:0</span><br><span class=\"line\"></span><br><span class=\"line\"># Memory</span><br><span class=\"line\">used_memory:842704</span><br><span class=\"line\">used_memory_human:822.95K</span><br><span class=\"line\">used_memory_rss:804920</span><br><span class=\"line\">used_memory_peak:374731600</span><br><span class=\"line\">used_memory_peak_human:357.37M</span><br><span class=\"line\">used_memory_lua:36864</span><br><span class=\"line\">mem_fragmentation_ratio:0.96</span><br><span class=\"line\">mem_allocator:jemalloc-3.6.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Persistence</span><br><span class=\"line\">loading:0</span><br><span class=\"line\">rdb_changes_since_last_save:0</span><br><span class=\"line\">rdb_bgsave_in_progress:0</span><br><span class=\"line\">rdb_last_save_time:1459242952</span><br><span class=\"line\">rdb_last_bgsave_status:ok</span><br><span class=\"line\">rdb_last_bgsave_time_sec:1</span><br><span class=\"line\">rdb_current_bgsave_time_sec:-1</span><br><span class=\"line\">aof_enabled:0</span><br><span class=\"line\">aof_rewrite_in_progress:0</span><br><span class=\"line\">aof_rewrite_scheduled:0</span><br><span class=\"line\">aof_last_rewrite_time_sec:-1</span><br><span class=\"line\">aof_current_rewrite_time_sec:-1</span><br><span class=\"line\">aof_last_bgrewrite_status:ok</span><br><span class=\"line\">aof_last_write_status:ok</span><br><span class=\"line\"></span><br><span class=\"line\"># Stats</span><br><span class=\"line\">total_connections_received:1010</span><br><span class=\"line\">total_commands_processed:49859</span><br><span class=\"line\">instantaneous_ops_per_sec:0</span><br><span class=\"line\">total_net_input_bytes:1822381802</span><br><span class=\"line\">total_net_output_bytes:3650427</span><br><span class=\"line\">instantaneous_input_kbps:0.00</span><br><span class=\"line\">instantaneous_output_kbps:0.00</span><br><span class=\"line\">rejected_connections:0</span><br><span class=\"line\">sync_full:0</span><br><span class=\"line\">sync_partial_ok:0</span><br><span class=\"line\">sync_partial_err:0</span><br><span class=\"line\">expired_keys:1073</span><br><span class=\"line\">evicted_keys:0</span><br><span class=\"line\">keyspace_hits:20782</span><br><span class=\"line\">keyspace_misses:738</span><br><span class=\"line\">pubsub_channels:0</span><br><span class=\"line\">pubsub_patterns:0</span><br><span class=\"line\">latest_fork_usec:388023</span><br><span class=\"line\">migrate_cached_sockets:0</span><br><span class=\"line\"></span><br><span class=\"line\"># Replication</span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">repl_backlog_active:0</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:0</span><br><span class=\"line\">repl_backlog_histlen:0</span><br><span class=\"line\"></span><br><span class=\"line\"># CPU</span><br><span class=\"line\">used_cpu_sys:9.45</span><br><span class=\"line\">used_cpu_user:38.25</span><br><span class=\"line\">used_cpu_sys_children:0.00</span><br><span class=\"line\">used_cpu_user_children:0.00</span><br><span class=\"line\"></span><br><span class=\"line\"># Cluster</span><br><span class=\"line\">cluster_enabled:0</span><br><span class=\"line\"></span><br><span class=\"line\"># Keyspace</span><br><span class=\"line\">db0:keys=1,expires=0,avg_ttl=0</span><br></pre></td></tr></table></figure>\n<h4 id=\"set-get\"><a href=\"#set-get\" class=\"headerlink\" title=\"set/get\"></a>set/get</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set test 123456</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get test</span><br><span class=\"line\">&quot;123456&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hset-hmset-hget-hmget\"><a href=\"#hset-hmset-hget-hmget\" class=\"headerlink\" title=\"hset/hmset/hget/hmget\"></a>hset/hmset/hget/hmget</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset testHash key1 value11</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget testHash</span><br><span class=\"line\">(error) ERR wrong number of arguments for &apos;hget&apos; command</span><br><span class=\"line\">127.0.0.1:6379&gt; hget testHash key1</span><br><span class=\"line\">&quot;value11&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; hset testHash key1 value11 key2 value22</span><br><span class=\"line\">(error) ERR wrong number of arguments for &apos;hset&apos; command</span><br><span class=\"line\">127.0.0.1:6379&gt; hmset testHash key1 value11 key2 value22</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget testHash key1 key2</span><br><span class=\"line\">1) &quot;value11&quot;</span><br><span class=\"line\">2) &quot;value22&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hlen-keys\"><a href=\"#hlen-keys\" class=\"headerlink\" title=\"hlen/keys\"></a>hlen/keys</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; len test</span><br><span class=\"line\">(error) ERR unknown command &apos;len&apos;</span><br><span class=\"line\">127.0.0.1:6379&gt; hlen testHash</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; keys test</span><br><span class=\"line\">1) &quot;test&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; keys testHash</span><br><span class=\"line\">1) &quot;testHash&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) &quot;testHash&quot;</span><br><span class=\"line\">2) &quot;test&quot;</span><br><span class=\"line\">3) &quot;message-queue-sms&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"config-set-get\"><a href=\"#config-set-get\" class=\"headerlink\" title=\"config set/get\"></a>config set/get</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; config get *</span><br><span class=\"line\">  1) &quot;dbfilename&quot;</span><br><span class=\"line\">  2) &quot;dump.rdb&quot;</span><br><span class=\"line\">  3) &quot;requirepass&quot;</span><br><span class=\"line\">  4) &quot;&quot;</span><br><span class=\"line\">  5) &quot;masterauth&quot;</span><br><span class=\"line\">  6) &quot;&quot;</span><br><span class=\"line\">  7) &quot;unixsocket&quot;</span><br><span class=\"line\">  8) &quot;&quot;</span><br><span class=\"line\">  9) &quot;logfile&quot;</span><br><span class=\"line\"> 10) &quot;&quot;</span><br><span class=\"line\"> 11) &quot;pidfile&quot;</span><br><span class=\"line\"> 12) &quot;/var/run/redis.pid&quot;</span><br><span class=\"line\"> 13) &quot;maxmemory&quot;</span><br><span class=\"line\"> 14) &quot;512000000&quot;</span><br><span class=\"line\"> 15) &quot;maxmemory-samples&quot;</span><br><span class=\"line\"> 16) &quot;5&quot;</span><br><span class=\"line\"> 17) &quot;timeout&quot;</span><br><span class=\"line\"> 18) &quot;0&quot;</span><br><span class=\"line\"> 19) &quot;tcp-keepalive&quot;</span><br><span class=\"line\"> 20) &quot;0&quot;</span><br><span class=\"line\"> 21) &quot;auto-aof-rewrite-percentage&quot;</span><br><span class=\"line\"> 22) &quot;100&quot;</span><br><span class=\"line\"> 23) &quot;auto-aof-rewrite-min-size&quot;</span><br><span class=\"line\"> 24) &quot;67108864&quot;</span><br><span class=\"line\"> 25) &quot;hash-max-ziplist-entries&quot;</span><br><span class=\"line\"> 26) &quot;512&quot;</span><br><span class=\"line\"> 27) &quot;hash-max-ziplist-value&quot;</span><br><span class=\"line\"> 28) &quot;64&quot;</span><br><span class=\"line\"> 29) &quot;list-max-ziplist-entries&quot;</span><br><span class=\"line\"> 30) &quot;512&quot;</span><br><span class=\"line\"> 31) &quot;list-max-ziplist-value&quot;</span><br><span class=\"line\"> 32) &quot;64&quot;</span><br><span class=\"line\"> 33) &quot;set-max-intset-entries&quot;</span><br><span class=\"line\"> 34) &quot;512&quot;</span><br><span class=\"line\"> 35) &quot;zset-max-ziplist-entries&quot;</span><br><span class=\"line\"> 36) &quot;128&quot;</span><br><span class=\"line\"> 37) &quot;zset-max-ziplist-value&quot;</span><br><span class=\"line\"> 38) &quot;64&quot;</span><br><span class=\"line\"> 39) &quot;hll-sparse-max-bytes&quot;</span><br><span class=\"line\"> 40) &quot;3000&quot;</span><br><span class=\"line\"> 41) &quot;lua-time-limit&quot;</span><br><span class=\"line\"> 42) &quot;5000&quot;</span><br><span class=\"line\"> 43) &quot;slowlog-log-slower-than&quot;</span><br><span class=\"line\"> 44) &quot;10000&quot;</span><br><span class=\"line\"> 45) &quot;latency-monitor-threshold&quot;</span><br><span class=\"line\"> 46) &quot;0&quot;</span><br><span class=\"line\"> 47) &quot;slowlog-max-len&quot;</span><br><span class=\"line\"> 48) &quot;128&quot;</span><br><span class=\"line\"> 49) &quot;port&quot;</span><br><span class=\"line\"> 50) &quot;6379&quot;</span><br><span class=\"line\"> 51) &quot;tcp-backlog&quot;</span><br><span class=\"line\"> 52) &quot;511&quot;</span><br><span class=\"line\"> 53) &quot;databases&quot;</span><br><span class=\"line\"> 54) &quot;16&quot;</span><br><span class=\"line\"> 55) &quot;repl-ping-slave-period&quot;</span><br><span class=\"line\"> 56) &quot;10&quot;</span><br><span class=\"line\"> 57) &quot;repl-timeout&quot;</span><br><span class=\"line\"> 58) &quot;60&quot;</span><br><span class=\"line\"> 59) &quot;repl-backlog-size&quot;</span><br><span class=\"line\"> 60) &quot;1048576&quot;</span><br><span class=\"line\"> 61) &quot;repl-backlog-ttl&quot;</span><br><span class=\"line\"> 62) &quot;3600&quot;</span><br><span class=\"line\"> 63) &quot;maxclients&quot;</span><br><span class=\"line\"> 64) &quot;10000&quot;</span><br><span class=\"line\"> 65) &quot;watchdog-period&quot;</span><br><span class=\"line\"> 66) &quot;0&quot;</span><br><span class=\"line\"> 67) &quot;slave-priority&quot;</span><br><span class=\"line\"> 68) &quot;100&quot;</span><br><span class=\"line\"> 69) &quot;min-slaves-to-write&quot;</span><br><span class=\"line\"> 70) &quot;0&quot;</span><br><span class=\"line\"> 71) &quot;min-slaves-max-lag&quot;</span><br><span class=\"line\"> 72) &quot;10&quot;</span><br><span class=\"line\"> 73) &quot;hz&quot;</span><br><span class=\"line\"> 74) &quot;10&quot;</span><br><span class=\"line\"> 75) &quot;cluster-node-timeout&quot;</span><br><span class=\"line\"> 76) &quot;15000&quot;</span><br><span class=\"line\"> 77) &quot;cluster-migration-barrier&quot;</span><br><span class=\"line\"> 78) &quot;1&quot;</span><br><span class=\"line\"> 79) &quot;cluster-slave-validity-factor&quot;</span><br><span class=\"line\"> 80) &quot;10&quot;</span><br><span class=\"line\"> 81) &quot;repl-diskless-sync-delay&quot;</span><br><span class=\"line\"> 82) &quot;5&quot;</span><br><span class=\"line\"> 83) &quot;cluster-require-full-coverage&quot;</span><br><span class=\"line\"> 84) &quot;yes&quot;</span><br><span class=\"line\"> 85) &quot;no-appendfsync-on-rewrite&quot;</span><br><span class=\"line\"> 86) &quot;no&quot;</span><br><span class=\"line\"> 87) &quot;slave-serve-stale-data&quot;</span><br><span class=\"line\"> 88) &quot;yes&quot;</span><br><span class=\"line\"> 89) &quot;slave-read-only&quot;</span><br><span class=\"line\"> 90) &quot;yes&quot;</span><br><span class=\"line\"> 91) &quot;stop-writes-on-bgsave-error&quot;</span><br><span class=\"line\"> 92) &quot;yes&quot;</span><br><span class=\"line\"> 93) &quot;daemonize&quot;</span><br><span class=\"line\"> 94) &quot;no&quot;</span><br><span class=\"line\"> 95) &quot;rdbcompression&quot;</span><br><span class=\"line\"> 96) &quot;yes&quot;</span><br><span class=\"line\"> 97) &quot;rdbchecksum&quot;</span><br><span class=\"line\"> 98) &quot;yes&quot;</span><br><span class=\"line\"> 99) &quot;activerehashing&quot;</span><br><span class=\"line\">100) &quot;yes&quot;</span><br><span class=\"line\">101) &quot;repl-disable-tcp-nodelay&quot;</span><br><span class=\"line\">102) &quot;no&quot;</span><br><span class=\"line\">103) &quot;repl-diskless-sync&quot;</span><br><span class=\"line\">104) &quot;no&quot;</span><br><span class=\"line\">105) &quot;aof-rewrite-incremental-fsync&quot;</span><br><span class=\"line\">106) &quot;yes&quot;</span><br><span class=\"line\">107) &quot;aof-load-truncated&quot;</span><br><span class=\"line\">108) &quot;yes&quot;</span><br><span class=\"line\">109) &quot;appendonly&quot;</span><br><span class=\"line\">110) &quot;no&quot;</span><br><span class=\"line\">111) &quot;dir&quot;</span><br><span class=\"line\">112) &quot;F:\\\\Redis&quot;</span><br><span class=\"line\">113) &quot;maxmemory-policy&quot;</span><br><span class=\"line\">114) &quot;noeviction&quot;</span><br><span class=\"line\">115) &quot;appendfsync&quot;</span><br><span class=\"line\">116) &quot;everysec&quot;</span><br><span class=\"line\">117) &quot;save&quot;</span><br><span class=\"line\">118) &quot;jd 900 jd 300 jd 60&quot;</span><br><span class=\"line\">119) &quot;loglevel&quot;</span><br><span class=\"line\">120) &quot;verbose&quot;</span><br><span class=\"line\">121) &quot;client-output-buffer-limit&quot;</span><br><span class=\"line\">122) &quot;normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60&quot;</span><br><span class=\"line\">123) &quot;unixsocketperm&quot;</span><br><span class=\"line\">124) &quot;0&quot;</span><br><span class=\"line\">125) &quot;slaveof&quot;</span><br><span class=\"line\">126) &quot;&quot;</span><br><span class=\"line\">127) &quot;notify-keyspace-events&quot;</span><br><span class=\"line\">128) &quot;&quot;</span><br><span class=\"line\">129) &quot;bind&quot;</span><br><span class=\"line\">130) &quot;&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; config set save &quot;&quot;</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<h4 id=\"flushdb-flushall\"><a href=\"#flushdb-flushall\" class=\"headerlink\" title=\"flushdb/flushall\"></a>flushdb/flushall</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; flushdb</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; flushall</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li>redis删除有序集合部分过期元素：<a href=\"http://caozm.blog.51cto.com/1118764/1389168\">http://caozm.blog.51cto.com/1118764/1389168</a></li>\n<li>节约内存：Instagram的Redis实践：<a href=\"http://blog.nosqlfan.com/html/3379.html\">http://blog.nosqlfan.com/html/3379.html</a></li>\n<li>redis持久化机制：<a href=\"http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22\">http://shanks.leanote.com/post/Untitled-55ca439338f41148cd000759-22</a></li>\n<li>Redis事务的分析及改进：<a href=\"https://segmentfault.com/a/1190000002594059\">https://segmentfault.com/a/1190000002594059</a></li>\n<li>redis 多数据库：<a href=\"https://www.ttlsa.com/redis/redis-database/\">https://www.ttlsa.com/redis/redis-database/</a></li>\n<li>利用Sorted Set数据结构，为元素设置有效期：<a href=\"http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set\">http://stackoverflow.com/questions/7577923/redis-possible-to-expire-an-element-in-an-array-or-sorted-set</a></li>\n<li>redis的Slave选举与优先级：<a href=\"https://segmentfault.com/a/1190000002685515\">https://segmentfault.com/a/1190000002685515</a></li>\n<li>利用代理中间件实现大规模Redis集群：<a href=\"http://www.imooc.com/article/4343\">http://www.imooc.com/article/4343</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cimrk7x8x0000acnnx94ih2u6","category_id":"cimrk7x990004acnnfqumxjii","_id":"cimrk7x9i000aacnn5eii6x43"},{"post_id":"cimrk7x9e0008acnngf3uikg4","category_id":"cimrk7x990004acnnfqumxjii","_id":"cimrk7x9k000dacnndx45nb98"},{"post_id":"cimrk7x940002acnn8wfw1rgi","category_id":"cimrk7x9g0009acnnbj2ijtzq","_id":"cimrk7x9l000eacnnr3r2oavv"},{"post_id":"cimrk7x9a0005acnnz5ds3nse","category_id":"cimrk7x9g0009acnnbj2ijtzq","_id":"cimrk7x9m000hacnnbmvq8kl2"},{"post_id":"cimrk7x9c0006acnnn3a5swdo","category_id":"cimrk7x9l000facnnm1y5jhup","_id":"cimrk7x9m000jacnnn5uxm729"}],"PostTag":[{"post_id":"cimrk7x8x0000acnnx94ih2u6","tag_id":"cimrk7x970003acnnn1i2101s","_id":"cimrk7x9n000lacnnb1u3jxmx"},{"post_id":"cimrk7x8x0000acnnx94ih2u6","tag_id":"cimrk7x9d0007acnnr31p36yj","_id":"cimrk7x9o000macnnrn0yvxz1"},{"post_id":"cimrk7x8x0000acnnx94ih2u6","tag_id":"cimrk7x9i000bacnnodk8lkbr","_id":"cimrk7x9o000oacnn3yzcczth"},{"post_id":"cimrk7x8x0000acnnx94ih2u6","tag_id":"cimrk7x9l000gacnnb4v80w3e","_id":"cimrk7x9p000pacnn692x6zll"},{"post_id":"cimrk7x8x0000acnnx94ih2u6","tag_id":"cimrk7x9m000iacnnzy0ea1aw","_id":"cimrk7x9y000racnn36r19ckw"},{"post_id":"cimrk7x940002acnn8wfw1rgi","tag_id":"cimrk7x9n000kacnnigj85zvm","_id":"cimrk7x9z000tacnnyl2kkbof"},{"post_id":"cimrk7x940002acnn8wfw1rgi","tag_id":"cimrk7x9o000nacnnh9tfznsf","_id":"cimrk7x9z000uacnna2tqphiw"},{"post_id":"cimrk7x940002acnn8wfw1rgi","tag_id":"cimrk7x9x000qacnn2mqv4tom","_id":"cimrk7xa0000wacnnb43iaz8w"},{"post_id":"cimrk7x9a0005acnnz5ds3nse","tag_id":"cimrk7x9y000sacnnhxkeygd4","_id":"cimrk7xa20010acnnokvceetz"},{"post_id":"cimrk7x9a0005acnnz5ds3nse","tag_id":"cimrk7x9o000nacnnh9tfznsf","_id":"cimrk7xa20011acnn4oxb5fcw"},{"post_id":"cimrk7x9a0005acnnz5ds3nse","tag_id":"cimrk7xa0000xacnnjw8c8f8k","_id":"cimrk7xa30013acnnnh85y5pz"},{"post_id":"cimrk7x9a0005acnnz5ds3nse","tag_id":"cimrk7xa1000yacnns38oe77f","_id":"cimrk7xa30014acnnznxrfumv"},{"post_id":"cimrk7x9c0006acnnn3a5swdo","tag_id":"cimrk7xa2000zacnnynae80ps","_id":"cimrk7xa50018acnnjnl60eta"},{"post_id":"cimrk7x9c0006acnnn3a5swdo","tag_id":"cimrk7xa30012acnnmqa3sfre","_id":"cimrk7xa50019acnn7muekc1q"},{"post_id":"cimrk7x9c0006acnnn3a5swdo","tag_id":"cimrk7xa40015acnnqrxqdggn","_id":"cimrk7xa7001bacnniqxzw46v"},{"post_id":"cimrk7x9c0006acnnn3a5swdo","tag_id":"cimrk7xa40016acnnzu9wbhoz","_id":"cimrk7xa7001cacnn2n4aa0gj"},{"post_id":"cimrk7x9e0008acnngf3uikg4","tag_id":"cimrk7xa50017acnnfakebdz8","_id":"cimrk7xaa001facnnaaxkkfuc"},{"post_id":"cimrk7x9e0008acnngf3uikg4","tag_id":"cimrk7xa6001aacnnaucso3mu","_id":"cimrk7xaa001gacnn56gjy6lp"},{"post_id":"cimrk7x9e0008acnngf3uikg4","tag_id":"cimrk7xa7001dacnnk4cyaruj","_id":"cimrk7xaa001hacnn8bh2cbn7"},{"post_id":"cimrk7x9e0008acnngf3uikg4","tag_id":"cimrk7xa8001eacnnq7mfsh0r","_id":"cimrk7xaa001iacnn0jnzk51n"}],"Tag":[{"name":"Nginx","_id":"cimrk7x970003acnnn1i2101s"},{"name":"Tomcat","_id":"cimrk7x9d0007acnnr31p36yj"},{"name":"Docker","_id":"cimrk7x9i000bacnnodk8lkbr"},{"name":"SSL","_id":"cimrk7x9l000gacnnb4v80w3e"},{"name":"Load balance","_id":"cimrk7x9m000iacnnzy0ea1aw"},{"name":"Tech","_id":"cimrk7x9n000kacnnigj85zvm"},{"name":"SQL","_id":"cimrk7x9o000nacnnh9tfznsf"},{"name":"Elegant","_id":"cimrk7x9x000qacnn2mqv4tom"},{"name":"JOOQ","_id":"cimrk7x9y000sacnnhxkeygd4"},{"name":"ARM","_id":"cimrk7xa0000xacnnjw8c8f8k"},{"name":"ORM","_id":"cimrk7xa1000yacnns38oe77f"},{"name":"GitHub","_id":"cimrk7xa2000zacnnynae80ps"},{"name":"Hexo","_id":"cimrk7xa30012acnnmqa3sfre"},{"name":"Jacman","_id":"cimrk7xa40015acnnqrxqdggn"},{"name":"Markdown","_id":"cimrk7xa40016acnnzu9wbhoz"},{"name":"Redis","_id":"cimrk7xa50017acnnfakebdz8"},{"name":"Hash","_id":"cimrk7xa6001aacnnaucso3mu"},{"name":"Sharding","_id":"cimrk7xa7001dacnnk4cyaruj"},{"name":"Twemproxy","_id":"cimrk7xa8001eacnnq7mfsh0r"}]}}